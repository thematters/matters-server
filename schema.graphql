directive @authenticate(requires: Role = user) on OBJECT | FIELD_DEFINITION

directive @authorize(requires: Role = admin) on OBJECT | FIELD_DEFINITION

directive @private on FIELD_DEFINITION

input AppreciateArticleInput {
  id: ID!
  amount: Int!
}

input ArchiveArticleInput {
  id: ID!
}

type Article implements Node {
  id: ID!
  topicScore: Int
  slug: String!
  createdAt: DateTime!
  state: ArticleState!
  public: Boolean!
  live: Boolean!
  author: User!
  title: String!
  cover: URL
  summary: String!
  tags: [Tag!]
  wordCount: Int
  dataHash: String
  mediaHash: String
  content: String!
  upstream: Article
  downstreams(input: ConnectionArgs!): ArticleConnection!
  relatedArticles(input: ConnectionArgs!): ArticleConnection!

  """MAT recieved for this article"""
  MAT: Int!
  participantCount: Int! @deprecated(reason: "not used")
  participants: UserConnection! @deprecated(reason: "not used")
  subscribers(input: ConnectionArgs!): UserConnection!
  appreciators(input: ConnectionArgs!): UserConnection!
  appreciatorCount: Int! @deprecated(reason: "Use `appreciators.totalCount`.")

  """limit the nuhmber of appreciate per user"""
  appreciateLimit: Int!
  appreciateLeft: Int!

  """Viewer has appreciate"""
  hasAppreciate: Boolean!

  """Viewer has subscribed"""
  subscribed: Boolean!

  """OSS"""
  oss: ArticleOSS!
  remark: String
  commentCount: Int!
  pinCommentLimit: Int!
  pinCommentLeft: Int!
  pinnedComments: [Comment!]
  comments(input: CommentsInput!): CommentConnection!
}

type ArticleConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ArticleEdge!]
}

type ArticleEdge {
  cursor: String!
  node: Article!
}

input ArticleInput {
  mediaHash: String!
}

type ArticleNewAppreciationNotice implements Notice {
  id: ID!
  unread: Boolean!
  createdAt: DateTime!
  actors: [User!]
  target: Article!
  MAT: Int!
}

type ArticleNewCommentNotice implements Notice {
  id: ID!
  unread: Boolean!
  createdAt: DateTime!
  actors: [User!]
  target: Article!
  comment: Comment!
}

type ArticleNewDownstreamNotice implements Notice {
  id: ID!
  unread: Boolean!
  createdAt: DateTime!
  actors: [User!]
  downstream: Article!
  target: Article!
}

type ArticleNewSubscriberNotice implements Notice {
  id: ID!
  unread: Boolean!
  createdAt: DateTime!
  actors: [User!]
  target: Article!
}

type ArticleOSS {
  boost: NonNegativeFloat!
  score: NonNegativeFloat!
  inRecommendToday: Boolean!
  inRecommendIcymi: Boolean!
  inRecommendHottest: Boolean!
  inRecommendNewest: Boolean!
}

type ArticlePublishedNotice implements Notice {
  id: ID!
  unread: Boolean!
  createdAt: DateTime!
  target: Article!
}

input ArticlesInput {
  public: Boolean
  after: String
  first: Int
}

enum ArticleState {
  active
  archived
  banned
}

type Asset {
  id: ID!
  type: AssetType!
  path: String!
  createdAt: DateTime!
}

enum AssetType {
  avatar
  cover
  audiodraft
  report
  feedback
  embed
}

type Audiodraft {
  id: ID!
  authorId: ID!
  title: String
  audio: URL!
  length: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AudiodraftConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [AudiodraftEdge!]
}

type AudiodraftEdge {
  cursor: String!
  node: Audiodraft!
}

input AuthorsFilter {
  random: Boolean
  followed: Boolean
}

input AuthorsInput {
  after: String
  first: Int
  oss: Boolean
  filter: AuthorsFilter
}

type AuthResult {
  auth: Boolean!
  token: String
}

type Badge {
  type: BadgeType!
}

enum BadgeType {
  seed
}

enum BoostTypes {
  Article
  User
  Tag
}

type Category {
  id: ID!
  name: String!
}

input ChangeEmailInput {
  oldEmail: Email!
  oldEmailCodeId: ID!
  newEmail: Email!
  newEmailCodeId: ID!
}

enum ChannelType {
  appStore
  googlePlay
}

input ClearReadHistoryInput {
  id: ID!
}

type Comment implements Node {
  id: ID!
  state: CommentState!
  createdAt: DateTime!

  """Original article of this comment"""
  article: Article!
  content: String
  author: User!
  pinned: Boolean!
  upvotes: Int!
  downvotes: Int!
  myVote: Vote
  mentions: [User!]
  comments(input: ConnectionArgs!): CommentConnection!
  parentComment: Comment
  quotationStart: Int
  quotationEnd: Int
  quotationContent: String
  replyTo: Comment
  remark: String
}

type CommentConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CommentEdge!]
}

type CommentEdge {
  cursor: String!
  node: Comment!
}

input CommentInput {
  content: String!
  quotationStart: Int
  quotationEnd: Int
  quotationContent: String
  replyTo: ID
  articleId: ID!
  parentId: ID
  mentions: [ID!]
}

type CommentMentionedYouNotice implements Notice {
  id: ID!
  unread: Boolean!
  createdAt: DateTime!
  actor: User!
  target: Comment!
}

type CommentNewReplyNotice implements Notice {
  id: ID!
  unread: Boolean!
  createdAt: DateTime!
  actors: [User!]
  target: Comment!
  reply: Comment!
}

type CommentNewUpvoteNotice implements Notice {
  id: ID!
  unread: Boolean!
  createdAt: DateTime!
  actors: [User!]
  target: Comment!
}

type CommentPinnedNotice implements Notice {
  id: ID!
  unread: Boolean!
  createdAt: DateTime!
  actor: User!
  target: Comment!
}

input CommentsInput {
  author: ID
  sort: CommentSort
  after: String
  first: Int
  parent: Boolean
}

enum CommentSort {
  oldest
  newest
  upvotes
}

enum CommentState {
  active
  archived
  banned
}

input ConfirmVerificationCodeInput {
  email: Email!
  type: VerificationCodeType!
  code: String!
}

interface Connection {
  totalCount: Int!
  pageInfo: PageInfo!
}

input ConnectionArgs {
  after: String
  first: Int
  oss: Boolean
}

scalar Date

scalar DateTime

input DeleteAudiodraftInput {
  id: ID!
}

input DeleteCommentInput {
  id: ID!
}

input DeleteDraftInput {
  id: ID!
}

input DeleteTagsInput {
  ids: [ID!]!
}

type DownstreamArticleArchivedNotice implements Notice {
  id: ID!
  unread: Boolean!
  createdAt: DateTime!
  downstream: Article!
  target: Article!
}

type Draft implements Node {
  id: ID!
  upstream: Article
  title: String
  summary: String
  content: String!
  scheduledAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  tags: [String!]
  cover: URL
  publishState: PublishState!
}

type DraftConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [DraftEdge!]
}

type DraftEdge {
  cursor: String!
  node: Draft!
}

scalar Email

input FeedbackInput {
  category: ID!
  description: String
  assetIds: [ID!]
  contact: String
}

input FollowUserInput {
  id: ID!
}

input FrequentSearchInput {
  key: String
  first: Int
}

input ImportArticlesInput {
  platform: String
  token: String
}

type Invitation {
  id: ID!
  user: User
  email: String
  accepted: Boolean!
  createdAt: DateTime!
}

type InvitationConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [InvitationEdge!]
}

type InvitationEdge {
  cursor: String!
  node: Invitation!
}

type InvitationStatus {
  reward: String!

  """invitation number left"""
  left: Int!

  """invitations sent"""
  sent(input: ConnectionArgs!): InvitationConnection!
}

input InviteInput {
  id: ID
  email: Email
}

scalar JSON

type MAT {
  total: Int!
  history(input: ConnectionArgs!): TransactionConnection!
}

input MergeTagsInput {
  ids: [ID!]!
  content: String!
}

type Mutation {
  _: Boolean
  publishArticle(input: PublishArticleInput!): Draft!
  archiveArticle(input: ArchiveArticleInput!): Article!
  subscribeArticle(input: SubscribeArticleInput!): Boolean
  unsubscribeArticle(input: UnsubscribeArticleInput!): Boolean
  appreciateArticle(input: AppreciateArticleInput!): Article!
  readArticle(input: ReadArticleInput!): Boolean
  recallPublish(input: RecallPublishInput!): Draft!

  """OSS"""
  toggleArticleLive(input: ToggleArticleLiveInput!): Article!
  toggleArticlePublic(input: ToggleArticlePublicInput!): Article!
  toggleArticleRecommend(input: ToggleArticleRecommendInput!): Article!
  updateArticleState(input: UpdateArticleStateInput!): Article!
  deleteTags(input: DeleteTagsInput!): Boolean
  renameTag(input: RenameTagInput!): Tag!
  mergeTags(input: MergeTagsInput!): Tag!
  putComment(input: PutCommentInput!): Comment!
  pinComment(input: PinCommentInput!): Comment!
  unpinComment(input: UnpinCommentInput!): Comment!
  deleteComment(input: DeleteCommentInput!): Boolean
  reportComment(input: ReportCommentInput!): Boolean
  voteComment(input: VoteCommentInput!): Comment!
  unvoteComment(input: UnvoteCommentInput!): Comment!
  updateCommentState(input: UpdateCommentStateInput!): Comment!

  """audio dtaft"""
  putAudiodraft(input: PutAudiodraftInput!): Audiodraft!
  deleteAudiodraft(input: DeleteAudiodraftInput!): Boolean

  """draft"""
  putDraft(input: PutDraftInput!): Draft!
  deleteDraft(input: DeleteDraftInput!): Boolean
  markAllNoticesAsRead: Boolean
  singleFileUpload(input: SingleFileUploadInput!): Asset!
  feedback(input: FeedbackInput!): Boolean
  setBoost(input: SetBoostInput!): Node!
  putRemark(input: PutRemarkInput!): String

  """send/confirm verification code"""
  sendVerificationCode(input: SendVerificationCodeInput!): Boolean
  confirmVerificationCode(input: ConfirmVerificationCodeInput!): ID!

  """change or reset password"""
  resetPassword(input: ResetPasswordInput!): Boolean

  """change email"""
  changeEmail(input: ChangeEmailInput!): Boolean

  """verify email"""
  verifyEmail(input: VerifyEmailInput!): Boolean

  """register"""
  userRegister(input: UserRegisterInput!): AuthResult!

  """login"""
  userLogin(input: UserLoginInput!): AuthResult!

  """
  addOAuth(input: AddOAuthInput!): Boolean
  update info/ setting
  """
  updateUserInfo(input: UpdateUserInfoInput!): User!
  updateNotificationSetting(input: UpdateNotificationSettingInput!): NotificationSetting

  """follow/unfollow"""
  followUser(input: FollowUserInput!): Boolean
  unfollowUser(input: UnfollowUserInput!): Boolean

  """importArticles(input: ImportArticlesInput!): [Article!]"""
  clearReadHistory(input: ClearReadHistoryInput!): Boolean
  clearSearchHistory: Boolean
  invite(input: InviteInput!): Boolean

  """OSS"""
  updateUserState(input: UpdateUserStateInput!): User!
}

scalar NegativeFloat

scalar NegativeInt

interface Node {
  id: ID!
}

input NodeEditedInput {
  id: ID!
}

input NodeInput {
  id: ID!
}

scalar NonNegativeFloat

scalar NonNegativeInt

scalar NonPositiveFloat

scalar NonPositiveInt

interface Notice {
  id: ID!
  unread: Boolean!
  createdAt: DateTime!
}

type NoticeConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [NoticeEdge!]
}

type NoticeEdge {
  cursor: String!
  node: Notice!
}

type NotificationSetting {
  enable: Boolean!
  mention: Boolean!
  follow: Boolean!
  comment: Boolean!
  appreciation: Boolean!
  articleSubscription: Boolean!
  commentSubscribed: Boolean!
  downstream: Boolean!
  commentPinned: Boolean!
  commentVoted: Boolean!

  """walletUpdate: Boolean!"""
  officialNotice: Boolean!
  reportFeedback: Boolean!
}

enum NotificationSettingType {
  enable
  mention
  follow
  comment
  appreciation
  articleSubscription
  commentSubscribed
  downstream
  commentPinned
  commentVoted
  officialNotice
  reportFeedback
}

type Official {
  reportCategory: [Category!]!
  feedbackCategory: [Category!]!
  releases(input: ReleasesInput!): [Release!]
  links: OfficialLinks!
  placements: Placements!
  gatewayUrls: [URL!]
}

type OfficialAnnouncementNotice implements Notice {
  id: ID!
  unread: Boolean!
  createdAt: DateTime!
  message: String!
  link: URL
}

type OfficialLinks {
  beginnerGuide: URL!
  userGuide: URL!
  about: URL!
  faq: URL!
  tos: URL!
}

type OSS {
  users(input: ConnectionArgs!): UserConnection!
  articles(input: ArticlesInput!): ArticleConnection!
  tags(input: ConnectionArgs!): TagConnection!
  reports(input: ReportsInput!): ReportConnection!
  report(input: ReportInput!): Report!
  today(input: ConnectionArgs!): ArticleConnection!
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
}

input PinCommentInput {
  id: ID!
}

type Placements {
  webAsideTop: PlacementUnit!
  appSplash: PlacementUnit!
  appInStreamTop: PlacementUnit!
  appInStreamMiddle: PlacementUnit!
  appInStreamBottom: PlacementUnit!
  appInvitationTop: PlacementUnit!
}

type PlacementUnit {
  image: URL!
  link: URL!
  adLabel: Boolean!
}

enum PlatformType {
  ios
  android
}

scalar PositiveFloat

scalar PositiveInt

input PublishArticleInput {
  id: ID!
  delay: Int
}

enum PublishState {
  unpublished
  pending
  error
  published
}

input PutAudiodraftInput {
  id: ID
  audioAssetId: ID
  title: String
  length: Int
}

input PutCommentInput {
  comment: CommentInput!
  id: ID
}

input PutDraftInput {
  id: ID
  upstreamId: ID
  title: String
  content: String
  tags: [String]
  coverAssetId: ID
}

input PutRemarkInput {
  id: ID!
  remark: String!
  type: RemarkTypes!
}

"""
The dummy queries and mutations are necessary because
graphql-js cannot have empty root types and we only extend
these types later on
Ref: apollographql/graphql-tools#293
"""
type Query {
  _: Boolean
  article(input: ArticleInput!): Article
  node(input: NodeInput!): Node
  frequentSearch(input: FrequentSearchInput!): [String!]
  search(input: SearchInput!): SearchResultConnection!
  official: Official!
  oss: OSS!
  viewer: User
  user(input: UserInput!): User
}

input ReadArticleInput {
  id: ID!
}

type ReadHistory {
  article: Article!
  readAt: DateTime!
}

type ReadHistoryConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReadHistoryEdge!]
}

type ReadHistoryEdge {
  cursor: String!
  node: ReadHistory!
}

input RecallPublishInput {
  id: ID!
}

type RecentSearchConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [RecentSearchEdge!]
}

type RecentSearchEdge {
  cursor: String!
  node: String!
}

type Recommendation {
  followeeArticles(input: ConnectionArgs!): ArticleConnection!
  newest(input: ConnectionArgs!): ArticleConnection!
  hottest(input: ConnectionArgs!): ArticleConnection!

  """Matters Today"""
  today: Article!

  """In case you missed it"""
  icymi(input: ConnectionArgs!): ArticleConnection!
  tags(input: ConnectionArgs!): TagConnection!
  topics(input: ConnectionArgs!): ArticleConnection!
  authors(input: AuthorsInput!): UserConnection!
}

enum RecommendTypes {
  today
  icymi
  hottest
  newest
}

type Release {
  title: String
  description: String
  cover: URL
  link: URL
  platform: PlatformType!
  channel: ChannelType!
  version: String!
  latest: Boolean!
  forceUpdate: Boolean!
  releasedAt: DateTime!
}

input ReleasesInput {
  platform: PlatformType!
  channel: ChannelType!
  first: Int
}

enum RemarkTypes {
  Article
  User
  Tag
  Comment
  Report
  Feedback
}

input RenameTagInput {
  id: ID!
  content: String!
}

type Report {
  id: ID!
  user: User
  article: Article
  comment: Comment
  category: String!
  description: String
  assets: [URL!]
  contact: String
  createdAt: DateTime!
  remark: String
}

input ReportArticleInput {
  id: ID!
  category: ID!
  description: String!
  assetIds: [ID!]
  contact: String
}

input ReportCommentInput {
  id: ID!
  category: ID!
  description: String!
  assetIds: [ID!]
  contact: String
}

type ReportConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReportEdge!]
}

type ReportEdge {
  cursor: String!
  node: Report!
}

input ReportInput {
  id: ID!
}

input ReportsInput {
  article: Boolean!
  comment: Boolean!
  after: String
  first: Int
}

input ResetPasswordInput {
  password: String!
  codeId: ID!
}

enum Role {
  vistor
  user
  admin
}

input SearchInput {
  key: String!
  type: SearchTypes!
  after: String
  first: Int
}

type SearchResultConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [SearchResultEdge!]
}

type SearchResultEdge {
  cursor: String!
  node: Node!
}

enum SearchTypes {
  Article
  User
  Tag
}

input SendVerificationCodeInput {
  email: Email!
  type: VerificationCodeType!
}

input SetBoostInput {
  id: ID!
  boost: NonNegativeFloat!
  type: BoostTypes!
}

input SingleFileUploadInput {
  type: AssetType!
  file: Upload!
}

input SubscribeArticleInput {
  id: ID!
}

type SubscribedArticleNewCommentNotice implements Notice {
  id: ID!
  unread: Boolean!
  createdAt: DateTime!
  actors: [User!]
  target: Article!
  comment: Comment!
}

type Subscription {
  _: Boolean
  nodeEdited(input: NodeEditedInput!): Node!
}

type Tag implements Node {
  id: ID!
  content: String!
  count: Int! @deprecated(reason: "Use `articles.totalCount`.")
  articles(input: ConnectionArgs!): ArticleConnection!
  createdAt: DateTime!

  """OSS"""
  oss: TagOSS!
  remark: String
}

type TagConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TagEdge!]
}

type TagEdge {
  cursor: String!
  node: Tag!
}

type TagOSS {
  boost: NonNegativeFloat!
  score: NonNegativeFloat!
}

scalar Time

input ToggleArticleLiveInput {
  id: ID!
  enabled: Boolean!
}

input ToggleArticlePublicInput {
  id: ID!
  enabled: Boolean!
}

input ToggleArticleRecommendInput {
  id: ID!
  enabled: Boolean!
  type: RecommendTypes!
}

type Transaction {
  delta: Int!
  purpose: TransactionPurpose!
  content: String!
  createdAt: DateTime!
}

type TransactionConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TransactionEdge!]
}

type TransactionEdge {
  cursor: String!
  node: Transaction!
}

enum TransactionPurpose {
  appreciate
  appreciateComment
  appreciateSubsidy
  invitationAccepted
  joinByInvitation
  joinByTask
  firstPost
  systemSubsidy
}

input UnfollowUserInput {
  id: ID!
}

input UnpinCommentInput {
  id: ID!
}

input UnsubscribeArticleInput {
  id: ID!
}

input UnvoteCommentInput {
  id: ID!
}

input UpdateArticleStateInput {
  id: ID!
  state: ArticleState!
}

input UpdateCommentStateInput {
  id: ID!
  state: CommentState!
}

input UpdateNotificationSettingInput {
  type: NotificationSettingType!
  enabled: Boolean!
}

input UpdateUserInfoInput {
  displayName: String
  userName: String
  avatar: ID
  description: String
  language: UserLanguage
}

input UpdateUserStateInput {
  id: ID!
  state: UserState!
  banDays: PositiveInt
}

scalar Upload

type UpstreamArticleArchivedNotice implements Notice {
  id: ID!
  unread: Boolean!
  createdAt: DateTime!
  upstream: Article!
  target: Article!
}

scalar URL

type User implements Node {
  id: ID!
  uuid: UUID!
  info: UserInfo!
  settings: UserSettings!
  recommendation: Recommendation!

  """Articles written by this user"""
  articles(input: ConnectionArgs!): ArticleConnection!
  drafts(input: ConnectionArgs!): DraftConnection!
  audiodrafts(input: ConnectionArgs!): AudiodraftConnection!

  """Comments posted by this user"""
  commentedArticles(input: ConnectionArgs!): ArticleConnection!
  subscriptions(input: ConnectionArgs!): ArticleConnection!
  activity: UserActivity!

  """Followers of this user"""
  followers(input: ConnectionArgs!): UserConnection!

  """Users that this user follows"""
  followees(input: ConnectionArgs!): UserConnection!

  """This user is following viewer"""
  isFollower: Boolean!

  """Viewer is following this user"""
  isFollowee: Boolean!
  status: UserStatus!

  """OSS"""
  oss: UserOSS!
  remark: String
  notices(input: ConnectionArgs!): NoticeConnection!
}

type UserActivity {
  history(input: ConnectionArgs!): ReadHistoryConnection!
  recentSearches(input: ConnectionArgs!): RecentSearchConnection!
}

type UserConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [UserEdge!]
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserInfo {
  createdAt: DateTime!

  """Unique user name"""
  userName: String!

  """Is user name editable"""
  userNameEditable: Boolean!

  """Display name on profile"""
  displayName: String!

  """User desciption"""
  description: String

  """URL for avatar"""
  avatar: URL
  email: Email
  emailVerified: Boolean
  mobile: String

  """Use 500 for now, adaptive in the future"""
  readSpeed: Int!
  badges: [Badge!]
}

enum UserInfoFields {
  displayName
  avatar
  description
  email
  mobile
}

input UserInput {
  userName: String!
}

enum UserLanguage {
  en
  zh_hans
  zh_hant
}

input UserLoginInput {
  email: Email!
  password: String!
}

type UserNewFollowerNotice implements Notice {
  id: ID!
  unread: Boolean!
  createdAt: DateTime!
  actors: [User!]
}

type UserOSS {
  boost: NonNegativeFloat!
  score: NonNegativeFloat!
}

input UserRegisterInput {
  email: Email!
  userName: String
  displayName: String!
  password: String!
  description: String
  codeId: ID!
}

type UserSettings {
  """User language setting"""
  language: UserLanguage!

  """
  Thrid party accounts binded for the user
  oauthType: [OAuthType!]
  Notification settings
  """
  notification: NotificationSetting!
}

enum UserState {
  active
  onboarding
  banned
  frozen
  archived
}

type UserStatus {
  state: UserState!

  """Total MAT left in wallet"""
  MAT: MAT!
  invitation: InvitationStatus!

  """Number of articles published by user"""
  articleCount: Int! @deprecated(reason: "Use `User.articles.totalCount`.")

  """Number of views on articles"""
  viewCount: Int!
  draftCount: Int! @deprecated(reason: "Use `User.drafts.totalCount`.")

  """Number of comments posted by user"""
  commentCount: Int!

  """quotationCount: Int! @deprecated(reason: "not used")"""
  subscriptionCount: Int! @deprecated(reason: "Use `User.subscriptions.totalCount`.")

  """Number of user that this user follows"""
  followeeCount: Int! @deprecated(reason: "Use `User.followees.totalCount`.")

  """Number of user that follows this user"""
  followerCount: Int! @deprecated(reason: "Use `User.followers.totalCount`.")

  """Number of unread notices"""
  unreadNoticeCount: Int!
}

scalar UUID

enum VerificationCodeType {
  register
  email_reset
  password_reset
  email_verify
}

input VerifyEmailInput {
  codeId: ID!
}

enum Vote {
  up
  down
}

input VoteCommentInput {
  vote: Vote!
  id: ID!
}
