directive @cacheControl(maxAge: Int, scope: CacheScope) on OBJECT | FIELD | FIELD_DEFINITION

directive @cost(multipliers: [String], useMultipliers: Boolean, complexity: CostComplexity) on OBJECT | FIELD_DEFINITION

"""Rate limit within a given period of time, in seconds"""
directive @rateLimit(period: Int!, limit: Int!) on FIELD_DEFINITION

directive @auth(mode: String!, group: String) on FIELD_DEFINITION

directive @privateCache(strict: Boolean! = false) on FIELD_DEFINITION

directive @objectCache(maxAge: Int = 1000) on OBJECT | FIELD_DEFINITION

directive @logCache(type: String!, identifier: String = "id") on FIELD_DEFINITION

directive @purgeCache(type: String!, identifier: String = "id") on FIELD_DEFINITION

input AddArticlesTagsInput {
  id: ID!
  articles: [ID!]
  selected: Boolean
}

"""Add Credit"""
input AddCreditInput {
  amount: PositiveFloat!
}

type AddCreditResult {
  transaction: Transaction!

  """The client secret of this PaymentIntent."""
  client_secret: String!
}

input AppreciateArticleInput {
  id: ID!
  amount: Int!
  token: String
  superLike: Boolean
}

type Appreciation {
  amount: Int!
  purpose: AppreciationPurpose!
  content: String!

  """Timestamp of appreciation."""
  createdAt: DateTime!

  """Recipient of appreciation."""
  recipient: User!

  """Sender of appreciation."""
  sender: User

  """Object that appreciation is meant for."""
  target: Article
}

type AppreciationConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [AppreciationEdge!]
}

type AppreciationEdge {
  cursor: String!
  node: Appreciation!
}

enum AppreciationPurpose {
  appreciate
  appreciateComment
  appreciateSubsidy
  invitationAccepted
  joinByInvitation
  joinByTask
  firstPost
  systemSubsidy
}

"""
This type contains metadata, content, hash and related data of an article. If you
want information about article's comments. Please check Comment type.
"""
type Article implements Node {
  """Unique ID of this article"""
  id: ID!

  """The number represents how popular is this article."""
  topicScore: Int

  """Slugified article title."""
  slug: String!

  """Time of this article was created."""
  createdAt: DateTime!

  """State of this article."""
  state: ArticleState!

  """This value determines if this article is under Subscription or not."""
  live: Boolean!

  """Author of this article."""
  author: User!

  """Article title."""
  title: String!

  """Article cover's link."""
  cover: URL

  """List of asstets are belonged to this article."""
  assets: [Asset!]!

  """A short summary for this article."""
  summary: String!

  """Tags attached to this article."""
  tags: [Tag!]

  """Word count of this article."""
  wordCount: Int

  """IPFS hash of this article."""
  dataHash: String!

  """Media hash, composed of cid encoding, of this article."""
  mediaHash: String!

  """Content of this article."""
  content: String!

  """Original language of content"""
  language: String

  """List of articles which added this article into their collections."""
  collectedBy(input: ConnectionArgs!): ArticleConnection!

  """List of articles added into this article' collection."""
  collection(input: ConnectionArgs!): ArticleConnection!

  """Related articles to this article."""
  relatedArticles(input: ConnectionArgs!): ArticleConnection!

  """Donation-related articles to this article."""
  relatedDonationArticles(input: RelatedDonationArticlesInput!): ArticleConnection!

  """Appreciations history of this article."""
  appreciationsReceived(input: ConnectionArgs!): AppreciationConnection!

  """Total number of appreciations recieved of this article."""
  appreciationsReceivedTotal: Int!

  """Subscribers of this article."""
  subscribers(input: ConnectionArgs!): UserConnection!

  """Limit the nuhmber of appreciate per user."""
  appreciateLimit: Int!

  """Number represents how many times per user can appreciate this article."""
  appreciateLeft: Int!

  """This value determines if current viewer has appreciated or not."""
  hasAppreciate: Boolean!

  """This value determines if current viewer can SuperLike or not."""
  canSuperLike: Boolean!

  """This value determines if current Viewer has subscribed of not."""
  subscribed: Boolean!

  """
  This value determines if this article is an author selected article or not.
  """
  sticky: Boolean!

  """Translation of article title and content."""
  translation(input: TranslationArgs): ArticleTranslation

  """Transactions history of this article."""
  transactionsReceivedBy(input: TransactionsReceivedByArgs!): UserConnection!

  """OSS"""
  oss: ArticleOSS!
  remark: String

  """The counting number of comments."""
  commentCount: Int!

  """The number determines how many pinned comments can be set."""
  pinCommentLimit: Int!

  """The number determines how many comments can be set as pinned comment."""
  pinCommentLeft: Int!

  """List of pinned comments."""
  pinnedComments: [Comment!]

  """List of featured comments of this article."""
  featuredComments(input: FeaturedCommentsInput!): CommentConnection!

  """List of comments of this article."""
  comments(input: CommentsInput!): CommentConnection!

  """The counting number of this article."""
  responseCount: Int!

  """List of responses of a article."""
  responses(input: ResponsesInput!): ResponseConnection!
}

type ArticleConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ArticleEdge!]
}

type ArticleEdge {
  cursor: String!
  node: Article!
}

input ArticleInput {
  mediaHash: String
  uuid: UUID
}

"""
This notice type contains info about current user has been mentioned in an article.
"""
type ArticleMentionedYouNotice implements Notice {
  """Unique ID of this notice."""
  id: ID!

  """The value determines if the notice is unread or not."""
  unread: Boolean!

  """Time of this notice was created."""
  createdAt: DateTime!

  """The user who mentioned current user."""
  actor: User!

  """The article that current user has been mentioned in."""
  target: Article
}

"""
This notice type contains info about current user's article has been appreciated by others.
"""
type ArticleNewAppreciationNotice implements Notice {
  """Unique ID of this notice."""
  id: ID!

  """The value determines if the notice is unread or not."""
  unread: Boolean!

  """Time of this notice was created."""
  createdAt: DateTime!

  """List of users who appreciated current user's article."""
  actors: [User]

  """The article that has been appreciated."""
  target: Article
}

"""
This notice type contains info about current user's article has been collected by others.
"""
type ArticleNewCollectedNotice implements Notice {
  """Unique ID of this notice."""
  id: ID!

  """The value determines if the notice is unread or not."""
  unread: Boolean!

  """Time of this notice was created."""
  createdAt: DateTime!

  """The user collect current user's articles."""
  actor: User!

  """The article that collected current user's articles."""
  collection: Article

  """The article that has been collected."""
  target: Article
}

"""
This notice type contains info about current user's article has new comment.
"""
type ArticleNewCommentNotice implements Notice {
  """Unique ID of this notice."""
  id: ID!

  """The value determines if the notice is unread or not."""
  unread: Boolean!

  """Time of this notice was created."""
  createdAt: DateTime!

  """The user who comment current user's article."""
  actors: [User]

  """The article that has new comment."""
  target: Article

  """The comment data."""
  comment: Comment
}

type ArticleNewDownstreamNotice implements Notice {
  id: ID!
  unread: Boolean!
  createdAt: DateTime!
  actors: [User]
  downstream: Article
  target: Article
}

"""
This notice type contains info about current user's article has been subscribed by others.
"""
type ArticleNewSubscriberNotice implements Notice {
  """Unique ID of this notice."""
  id: ID!

  """The value determines if the notice is unread or not."""
  unread: Boolean!

  """Time of this notice was created."""
  createdAt: DateTime!

  """List of users who subscribed current user's article."""
  actors: [User]

  """The article that has been subscribed."""
  target: Article
}

type ArticleOSS {
  boost: NonNegativeFloat!
  score: NonNegativeFloat!
  inRecommendIcymi: Boolean!
  inRecommendHottest: Boolean!
  inRecommendNewest: Boolean!
}

"""
This notice type contains info about current user's article publihsed successfully.
"""
type ArticlePublishedNotice implements Notice {
  """Unique ID of this notice."""
  id: ID!

  """The value determines if the notice is unread or not."""
  unread: Boolean!

  """Time of this notice was created."""
  createdAt: DateTime!

  """The article that has been published."""
  target: Article
}

"""Enums for an article state."""
enum ArticleState {
  active
  archived
  banned
}

"""
This notice type contains info about one user has added current user's article, and set it as selected.
"""
type ArticleTagHasBeenAddedNotice implements Notice {
  """Unique ID of this notice."""
  id: ID!

  """The value determines if the notice is unread or not."""
  unread: Boolean!

  """Time of this notice was created."""
  createdAt: DateTime!

  """The user who replied current user's comment."""
  actor: User!

  """The article has a new tag."""
  target: Article

  """The tag has been attached to an article."""
  tag: Tag
}

"""
This notice type contains info about one uer has removed a tag from current user's article.
"""
type ArticleTagHasBeenRemovedNotice implements Notice {
  """Unique ID of this notice."""
  id: ID!

  """The value determines if the notice is unread or not."""
  unread: Boolean!

  """Time of this notice was created."""
  createdAt: DateTime!

  """The user who replied current user's comment."""
  actor: User!

  """The article loses a tag."""
  target: Article

  """The tag has been deattached from an article."""
  tag: Tag
}

"""
This notice type contains info about one user has set current user's article unselected.
"""
type ArticleTagHasBeenUnselectedNotice implements Notice {
  """Unique ID of this notice."""
  id: ID!

  """The value determines if the notice is unread or not."""
  unread: Boolean!

  """Time of this notice was created."""
  createdAt: DateTime!

  """The user who replied current user's comment."""
  actor: User!

  """The article has a new tag."""
  target: Article

  """The tag has been attached to an article."""
  tag: Tag
}

type ArticleTranslation {
  title: String
  content: String
}

"""This type contains type, link and related data of an asset."""
type Asset {
  """Unique ID of this Asset."""
  id: ID!

  """Types of this asset."""
  type: AssetType!

  """Link of this asset."""
  path: String!

  """Time of this asset was created."""
  createdAt: DateTime!
}

"""Enums for asset types."""
enum AssetType {
  avatar
  cover
  embed
  embedaudio
  profileCover
  oauthClientAvatar
  tagCover
}

input AuthorsFilter {
  """index of author list, min: 0, max: 49"""
  random: NonNegativeInt
  followed: Boolean
}

input AuthorsInput {
  after: String
  first: Int
  oss: Boolean
  filter: AuthorsFilter
}

type AuthResult {
  auth: Boolean!
  token: String
}

type Badge {
  type: BadgeType!
}

enum BadgeType {
  seed
}

type Balance {
  HKD: Float!
}

enum BoostTypes {
  Article
  User
  Tag
}

enum CacheScope {
  PUBLIC
  PRIVATE
}

input ChangeEmailInput {
  oldEmail: Email!
  oldEmailCodeId: ID!
  newEmail: Email!
  newEmailCodeId: ID!
}

input ClearReadHistoryInput {
  id: ID!
}

"""
This type contains content, author, descendant comments and related data of a comment.
"""
type Comment implements Node {
  """Unique ID of this comment."""
  id: ID!

  """State of this comment."""
  state: CommentState!

  """Time of this comment was created."""
  createdAt: DateTime!

  """Article that the comment is belonged to."""
  article: Article!

  """Content of this comment."""
  content: String

  """Author of this comment."""
  author: User!

  """This value determines this comment is pinned or not."""
  pinned: Boolean!

  """The counting number of upvotes."""
  upvotes: Int!

  """The counting number of downvotes."""
  downvotes: Int!

  """The value determines current user's vote."""
  myVote: Vote

  """Descendant comments of this comment."""
  comments(input: CommentCommentsInput!): CommentConnection!

  """Parent comment of this comment."""
  parentComment: Comment

  """A Comment that this comment replied to."""
  replyTo: Comment
  remark: String
}

input CommentCommentsInput {
  author: ID
  sort: CommentSort
  after: String
  first: Int
}

type CommentConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CommentEdge!]
}

type CommentEdge {
  cursor: String!
  node: Comment!
}

input CommentInput {
  content: String!
  replyTo: ID
  articleId: ID!
  parentId: ID
  mentions: [ID!]
}

type CommentMentionedYouNotice implements Notice {
  id: ID!
  unread: Boolean!
  createdAt: DateTime!
  actor: User!
  target: Comment
}

"""
This notice type contains info about current user's comment has new reply.
"""
type CommentNewReplyNotice implements Notice {
  """Unique ID of this notice."""
  id: ID!

  """The value determines if the notice is unread or not."""
  unread: Boolean!

  """Time of this notice was created."""
  createdAt: DateTime!

  """The user who replied current user's comment."""
  actors: [User]

  """The comment that has new replied."""
  target: Comment

  """The comment that replied to current user's existing comment."""
  reply: Comment
}

"""
This notice type contains info about current user's comment has been pinned.
"""
type CommentPinnedNotice implements Notice {
  """Unique ID of this notice."""
  id: ID!

  """The value determines if the notice is unread or not."""
  unread: Boolean!

  """Time of this notice was created."""
  createdAt: DateTime!

  """The user who pinned current user's comment."""
  actor: User!

  """The comment data."""
  target: Comment
}

input CommentsFilter {
  parentComment: ID
  state: CommentState
  author: ID
}

input CommentsInput {
  sort: CommentSort
  after: String
  before: String
  includeAfter: Boolean
  includeBefore: Boolean
  first: Int
  filter: CommentsFilter
}

"""Enums for sorting comments by time."""
enum CommentSort {
  oldest
  newest
}

"""Enums for comment state."""
enum CommentState {
  active
  archived
  banned
  collapsed
}

input ConfirmVerificationCodeInput {
  email: Email!
  type: VerificationCodeType!
  code: String!
}

interface Connection {
  totalCount: Int!
  pageInfo: PageInfo!
}

input ConnectionArgs {
  after: String
  first: Int
  oss: Boolean
}

type ConnectStripeAccountResult {
  redirectUrl: URL!
}

input CostComplexity {
  min: Int = 1
  max: Int
}

scalar Date

scalar DateTime

input DeleteArticlesTagsInput {
  id: ID!
  articles: [ID!]
}

input DeleteCommentInput {
  id: ID!
}

input DeleteDraftInput {
  id: ID!
}

input DeleteTagsInput {
  ids: [ID!]!
}

type DownstreamArticleArchivedNotice implements Notice {
  id: ID!
  unread: Boolean!
  createdAt: DateTime!
  downstream: Article
  target: Article
}

"""
This type contains content, collections, assets and related data of a draft.
"""
type Draft implements Node {
  """Unique ID of this draft."""
  id: ID!

  """Collection list of this draft."""
  collection(input: ConnectionArgs!): ArticleConnection!

  """Draft title."""
  title: String

  """Slugified draft title."""
  slug: String!

  """Summary of this draft."""
  summary: String

  """Content of this draft."""
  content: String

  """Time of this draft was created."""
  createdAt: DateTime!

  """Last time of this draft was upadted."""
  updatedAt: DateTime!

  """The counting number of words in this draft."""
  wordCount: Int!

  """Tags are attached to this draft."""
  tags: [String!]

  """Draft's cover link."""
  cover: URL

  """State of draft during publihsing."""
  publishState: PublishState!

  """List of asstets are belonged to this draft."""
  assets: [Asset!]!

  """Published article"""
  article: Article
}

type DraftConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [DraftEdge!]
}

type DraftEdge {
  cursor: String!
  node: Draft!
}

input EditArticleInput {
  id: ID!
  state: ArticleState
  sticky: Boolean
  tags: [String!]
  cover: ID
  collection: [ID!]
}

scalar Email

enum EntityType {
  article
  draft
  tag
  user
}

type Feature {
  name: FeatureName!
  enabled: Boolean!
}

input FeaturedCommentsInput {
  sort: CommentSort
  after: String
  first: Int
}

enum FeatureFlag {
  on
  off
  admin
}

enum FeatureName {
  add_credit
  payment
  payout
  verify_appreciate
  fingerprint
  tag_adoption
}

type FolloweeDonatedArticle {
  article: Article!
  followee: User!
}

type FolloweeDonatedArticleConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [FolloweeDonatedArticleEdge!]
}

type FolloweeDonatedArticleEdge {
  cursor: String!
  node: FolloweeDonatedArticle!
}

input FrequentSearchInput {
  key: String
  first: Int
}

enum GrantType {
  authorization_code
  refresh_token
}

scalar JSON

type Liker {
  """Liker ID of LikeCoin"""
  likerId: String

  """Whether liker is a civic liker"""
  civicLiker: Boolean!

  """Total LIKE left in wallet."""
  total: NonNegativeFloat!

  """Rate of LikeCoin/USD"""
  rateUSD: NonNegativeFloat
}

input LogRecordInput {
  type: LogRecordTypes!
}

enum LogRecordTypes {
  ReadFolloweeArticles
  ReadResponseInfoPopUp
}

input MergeTagsInput {
  ids: [ID!]!
  content: String!
}

input MigrationInput {
  type: MigrationType
  files: [Upload]!
}

enum MigrationType {
  medium
}

type Mutation {
  """Publish an article onto IPFS."""
  publishArticle(input: PublishArticleInput!): Draft!

  """Edit an article."""
  editArticle(input: EditArticleInput!): Article!

  """Subscribe or Unsubscribe article"""
  toggleSubscribeArticle(input: ToggleItemInput!): Article!

  """Appreciate an article."""
  appreciateArticle(input: AppreciateArticleInput!): Article!

  """Read an article."""
  readArticle(input: ReadArticleInput!): Article!

  """Follow or unfollow tag."""
  toggleFollowTag(input: ToggleItemInput!): Tag!

  """Create or update tag."""
  putTag(input: PutTagInput!): Tag!

  """Update member, permission and othters of a tag."""
  updateTagSetting(input: UpdateTagSettingInput!): Tag!

  """Add one tag to articles."""
  addArticlesTags(input: AddArticlesTagsInput!): Tag!

  """Update articles' tag."""
  updateArticlesTags(input: UpdateArticlesTagsInput!): Tag!

  """Delete one tag from articles"""
  deleteArticlesTags(input: DeleteArticlesTagsInput!): Tag!

  """
  #############
       OSS    #
  #############
  """
  toggleArticleLive(input: ToggleItemInput!): Article!
  toggleArticleRecommend(input: ToggleArticleRecommendInput!): Article!
  updateArticleState(input: UpdateArticleStateInput!): Article!
  deleteTags(input: DeleteTagsInput!): Boolean
  renameTag(input: RenameTagInput!): Tag!
  mergeTags(input: MergeTagsInput!): Tag!

  """Publish a comment."""
  putComment(input: PutCommentInput!): Comment!

  """Remove a comment."""
  deleteComment(input: DeleteCommentInput!): Comment!

  """Pin or Unpin a comment."""
  togglePinComment(input: ToggleItemInput!): Comment!

  """Upvote or downvote a comment."""
  voteComment(input: VoteCommentInput!): Comment!

  """Unvote a comment."""
  unvoteComment(input: UnvoteCommentInput!): Comment!

  """Update a comments' state."""
  updateCommentsState(input: UpdateCommentsStateInput!): [Comment!]!

  """Pin a comment."""
  pinComment(input: PinCommentInput!): Comment!

  """Unpin a comment."""
  unpinComment(input: UnpinCommentInput!): Comment!

  """Create or update a draft."""
  putDraft(input: PutDraftInput!): Draft!

  """Remove a draft."""
  deleteDraft(input: DeleteDraftInput!): Boolean

  """Mark all received notices as read."""
  markAllNoticesAsRead: Boolean

  """Upload a single file."""
  singleFileUpload(input: SingleFileUploadInput!): Asset!

  """Add specific user behavior record."""
  logRecord(input: LogRecordInput!): Boolean

  """
  #############
       OSS    #
  #############
  """
  setBoost(input: SetBoostInput!): Node!
  putRemark(input: PutRemarkInput!): String
  putSkippedListItem(input: PutSkippedListItemInput!): [SkippedListItem!]
  setFeature(input: SetFeatureInput!): Feature!

  """Send verification code for email."""
  sendVerificationCode(input: SendVerificationCodeInput!): Boolean

  """Confirm verification code from email."""
  confirmVerificationCode(input: ConfirmVerificationCodeInput!): ID!

  """Reset user or payment password."""
  resetPassword(input: ResetPasswordInput!): Boolean

  """Change user email."""
  changeEmail(input: ChangeEmailInput!): User!

  """Verify user email."""
  verifyEmail(input: VerifyEmailInput!): Boolean

  """Register user, can only be used on matters.news website."""
  userRegister(input: UserRegisterInput!): AuthResult!

  """Login user."""
  userLogin(input: UserLoginInput!): AuthResult!

  """Logout user."""
  userLogout: Boolean!

  """Generate or claim a Liker ID through LikeCoin"""
  generateLikerId: User!

  """Update user information."""
  updateUserInfo(input: UpdateUserInfoInput!): User!

  """Update user notification settings."""
  updateNotificationSetting(input: UpdateNotificationSettingInput!): User!

  """Follow or Unfollow current user."""
  toggleFollowUser(input: ToggleItemInput!): User!

  """Block or Unblock a given user."""
  toggleBlockUser(input: ToggleItemInput!): User!

  """Subscribe/ Unsubscribe Push Notification."""
  toggleSubscribePush(input: ToggleItemInput!): User!

  """Clear read history for user."""
  clearReadHistory(input: ClearReadHistoryInput!): Boolean

  """Clear search history for user."""
  clearSearchHistory: Boolean

  """Migrate articles from other service provider."""
  migration(input: MigrationInput!): Boolean

  """Update state of a user, used in OSS."""
  updateUserState(input: UpdateUserStateInput!): [User!]

  """Update state of a user, used in OSS."""
  updateUserRole(input: UpdateUserRoleInput!): User!

  """Add Credit to User Wallet"""
  addCredit(input: AddCreditInput!): AddCreditResult!

  """Pay to another user or article"""
  payTo(input: PayToInput!): PayToResult!

  """Payout to user"""
  payout(input: PayoutInput!): Transaction!

  """Create Stripe Connect account for Payout"""
  connectStripeAccount: ConnectStripeAccountResult!

  """Create or Update an OAuth Client, used in OSS."""
  putOAuthClient(input: PutOAuthClientInput!): OAuthClient
}

scalar NegativeFloat

scalar NegativeInt

interface Node {
  id: ID!
}

input NodeEditedInput {
  id: ID!
}

input NodeInput {
  id: ID!
}

input NodesInput {
  ids: [ID!]!
}

scalar NonNegativeFloat

scalar NonNegativeInt

scalar NonPositiveFloat

scalar NonPositiveInt

"""This interface contains common fields of a notice."""
interface Notice {
  """Unique ID of this notice."""
  id: ID!

  """The value determines if the notice is unread or not."""
  unread: Boolean!

  """Time of this notice was created."""
  createdAt: DateTime!
}

type NoticeConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [NoticeEdge!]
}

type NoticeEdge {
  cursor: String!
  node: Notice!
}

type NotificationSetting {
  enable: Boolean!
  email: Boolean!
  mention: Boolean!
  follow: Boolean!
  comment: Boolean!
  appreciation: Boolean!
  articleSubscription: Boolean!
  commentSubscribed: Boolean!
  downstream: Boolean!
  commentPinned: Boolean!
  commentVoted: Boolean!
  officialNotice: Boolean!
  reportFeedback: Boolean!
}

enum NotificationSettingType {
  enable
  email
  mention
  follow
  comment
  appreciation
  articleSubscription
  commentSubscribed
  downstream
  commentPinned
  commentVoted
  officialNotice
  reportFeedback
}

type OAuthClient {
  """Unique Client ID of this OAuth Client."""
  id: ID!

  """App name"""
  name: String!

  """App Description"""
  description: String

  """URL for oauth client's official website"""
  website: URL

  """Scopes"""
  scope: [String!]

  """URL for oauth client's avatar."""
  avatar: URL

  """Client secret"""
  secret: String!

  """Redirect URIs"""
  redirectURIs: [URL!]

  """Grant Types"""
  grantTypes: [GrantType!]

  """Linked Developer Account"""
  user: User

  """Creation Date"""
  createdAt: Date!
}

type OAuthClientConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [OAuthClientEdge!]
}

type OAuthClientEdge {
  cursor: String!
  node: OAuthClient!
}

input OAuthClientInput {
  id: ID!
}

"""This type contains system-wise settings."""
type Official {
  """Feature flag"""
  features: [Feature!]!
}

"""The notice type contains info about official announcement."""
type OfficialAnnouncementNotice implements Notice {
  """Unique ID of this notice."""
  id: ID!

  """The value determines if the notice is unread or not."""
  unread: Boolean!

  """Time of this notice was created."""
  createdAt: DateTime!

  """The message content."""
  message: String!

  """The link to a specific page if provided."""
  link: URL
}

type OSS {
  users(input: ConnectionArgs!): UserConnection!
  comments(input: ConnectionArgs!): CommentConnection!
  articles(input: ConnectionArgs!): ArticleConnection!
  tags(input: TagsInput!): TagConnection!
  oauthClients(input: ConnectionArgs!): OAuthClientConnection!
  skippedListItems(input: SkippedListItemsInput!): SkippedListItemsConnection!
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

"""This notice type contains info about current user requested to payout."""
type PaymentPayoutNotice implements Notice {
  """Unique ID of this notice."""
  id: ID!

  """The value determines if the notice is unread or not."""
  unread: Boolean!

  """Time of this notice was created."""
  createdAt: DateTime!

  """The transaction data."""
  target: Transaction
}

"""This notice type contains info about current user received a donation."""
type PaymentReceivedDonationNotice implements Notice {
  """Unique ID of this notice."""
  id: ID!

  """The value determines if the notice is unread or not."""
  unread: Boolean!

  """Time of this notice was created."""
  createdAt: DateTime!

  """The user who donated to current user."""
  actor: User!

  """The transaction data."""
  target: Transaction
}

input PayoutInput {
  amount: PositiveFloat!
  password: String!
}

input PayToInput {
  amount: PositiveFloat!
  currency: TransactionCurrency!
  purpose: TransactionPurpose!
  recipientId: ID!
  targetId: ID
  password: String
}

type PayToResult {
  transaction: Transaction!

  """Only available when paying with LIKE."""
  redirectUrl: URL
}

input PinCommentInput {
  id: ID!
}

scalar PositiveFloat

scalar PositiveInt

input PublishArticleInput {
  id: ID!
}

"""Enums for publishing state."""
enum PublishState {
  unpublished
  pending
  error
  published
}

input PutCommentInput {
  comment: CommentInput!
  id: ID
}

input PutDraftInput {
  id: ID
  title: String
  content: String
  tags: [String]
  cover: ID
  collection: [ID]
}

input PutOAuthClientInput {
  id: ID
  name: String
  description: String
  website: URL
  scope: [String!]
  avatar: ID
  secret: String
  redirectURIs: [URL!]
  grantTypes: [GrantType!]
  user: ID
}

input PutRemarkInput {
  id: ID!
  remark: String!
  type: RemarkTypes!
}

input PutSkippedListItemInput {
  id: ID
  type: SkippedListItemType
  value: String
  archived: Boolean
}

input PutTagInput {
  id: ID
  content: String
  cover: ID
  description: String
}

type Query {
  article(input: ArticleInput!): Article
  node(input: NodeInput!): Node
  nodes(input: NodesInput!): [Node!]
  frequentSearch(input: FrequentSearchInput!): [String!]
  search(input: SearchInput!): SearchResultConnection!
  official: Official!
  oss: OSS!
  viewer: User
  user(input: UserInput!): User
  oauthClient(input: OAuthClientInput!): OAuthClient
}

input ReadArticleInput {
  id: ID!
}

type ReadHistory {
  article: Article!
  readAt: DateTime!
}

type ReadHistoryConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ReadHistoryEdge!]
}

type ReadHistoryEdge {
  cursor: String!
  node: ReadHistory!
}

type RecentSearchConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [RecentSearchEdge!]
}

type RecentSearchEdge {
  cursor: String!
  node: String!
}

type Recommendation {
  """Articles published by user's followees."""
  followeeArticles(input: ConnectionArgs!): ArticleConnection!

  """Comments published by user's followees."""
  followeeComments(input: ConnectionArgs!): CommentConnection!

  """Articles that followee donated"""
  followeeDonatedArticles(input: ConnectionArgs!): FolloweeDonatedArticleConnection!

  """Tags that user followed."""
  followingTags(input: ConnectionArgs!): TagConnection!

  """Articles has been added into followed tags."""
  followingTagsArticles(input: ConnectionArgs!): ArticleConnection!

  """Global articles sort by publish time."""
  newest(input: ConnectionArgs!): ArticleConnection!

  """Global articles sort by latest activity time."""
  hottest(input: ConnectionArgs!): ArticleConnection!

  """'In case you missed it' recommendation."""
  icymi(input: ConnectionArgs!): ArticleConnection!

  """Global articles sort by appreciate, donation and subscription."""
  valued(input: ConnectionArgs!): ArticleConnection!

  """Global tag list, sort by activities in recent 14 days."""
  tags(input: RecommendationTagsInput!): TagConnection!

  """Gloabl article list, sort by activities in recent 72 hours."""
  topics(input: ConnectionArgs!): ArticleConnection!

  """Global user list, sort by activities in recent 6 month."""
  authors(input: AuthorsInput!): UserConnection!

  """Personalized recommendation based on interaction with tags."""
  interest(input: ConnectionArgs!): ArticleConnection!

  """Recommend articles with collaborative filtering"""
  recommendArticles(input: ConnectionArgs!): ArticleConnection!
}

input RecommendationTagsFilter {
  """index of tag list, min: 0, max: 49"""
  random: NonNegativeInt
}

input RecommendationTagsInput {
  after: String
  first: Int
  oss: Boolean
  filter: RecommendationTagsFilter
}

"""Enums for types of recommend articles."""
enum RecommendTypes {
  icymi
  hottest
  newest
}

input RelatedDonationArticlesInput {
  after: String
  first: Int
  oss: Boolean

  """index of article list, min: 0, max: 49"""
  random: NonNegativeInt
}

enum RemarkTypes {
  Article
  User
  Tag
  Comment
  Report
  Feedback
}

input RenameTagInput {
  id: ID!
  content: String!
}

input ReportsInput {
  article: Boolean!
  comment: Boolean!
  after: String
  first: Int
}

input ResetPasswordInput {
  password: String!
  codeId: ID!
  type: ResetPasswordType
}

enum ResetPasswordType {
  account
  payment
}

union Response = Article | Comment

type ResponseConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ResponseEdge!]
}

type ResponseEdge {
  cursor: String!
  node: Response!
}

input ResponsesInput {
  sort: ResponseSort
  after: String
  before: String
  includeAfter: Boolean
  includeBefore: Boolean
  first: Int
  articleOnly: Boolean
}

"""Enums for sorting responses."""
enum ResponseSort {
  oldest
  newest
}

"""Enums for user roles."""
enum Role {
  vistor
  user
  admin
}

input SearchFilter {
  authorId: ID
}

input SearchInput {
  key: String!
  type: SearchTypes!
  after: String
  first: Int
  filter: SearchFilter

  """whether this search operation should be recorded in search history"""
  record: Boolean
  oss: Boolean
}

type SearchResultConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [SearchResultEdge!]
}

type SearchResultEdge {
  cursor: String!
  node: Node!
}

enum SearchTypes {
  Article
  User
  Tag
}

input SendVerificationCodeInput {
  email: Email!
  type: VerificationCodeType!
  token: String
}

input SetBoostInput {
  id: ID!
  boost: NonNegativeFloat!
  type: BoostTypes!
}

input SetFeatureInput {
  name: FeatureName!
  flag: FeatureFlag!
}

input SingleFileUploadInput {
  type: AssetType!
  file: Upload
  url: URL
  entityType: EntityType!
  entityId: ID
}

type SkippedListItem {
  id: ID!
  uuid: UUID!
  type: SkippedListItemType!
  value: String!
  archived: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SkippedListItemEdge {
  cursor: String!
  node: SkippedListItem
}

type SkippedListItemsConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [SkippedListItemEdge!]
}

input SkippedListItemsInput {
  after: String
  first: Int
  type: SkippedListItemType
}

enum SkippedListItemType {
  agent_hash
  email
  domain
}

"""Stripe Account"""
type StripeAccount {
  id: ID!
  loginUrl: URL!
}

"""
This notice type contains info about current user's subscribed article has new comment.
"""
type SubscribedArticleNewCommentNotice implements Notice {
  """Unique ID of this notice."""
  id: ID!

  """The value determines if the notice is unread or not."""
  unread: Boolean!

  """Time of this notice was created."""
  createdAt: DateTime!

  """The user who made new comment to current user's subscribed article."""
  actors: [User]

  """The article that current user has been subscribed."""
  target: Article

  """The comment data."""
  comment: Comment
}

type Subscription {
  nodeEdited(input: NodeEditedInput!): Node!
}

"""This type contains content, count and related data of an article tag."""
type Tag implements Node {
  """Unique id of this tag."""
  id: ID!

  """Content of this tag."""
  content: String!

  """List of how many articles were attached with this tag."""
  articles(input: TagArticlesInput!): ArticleConnection!

  """This value determines if this article is selected by this tag or not."""
  selected(input: TagSelectedInput!): Boolean!

  """Time of this tag was created."""
  createdAt: DateTime!

  """Tag's cover link."""
  cover: URL

  """Description of this tag."""
  description: String

  """Editors of this tag."""
  editors(input: TagEditorsInput): [User!]

  """Creator of this tag."""
  creator: User

  """Owner of this tag."""
  owner: User

  """This value determines if current viewer is following or not."""
  isFollower: Boolean

  """Followers of this tag."""
  followers(input: ConnectionArgs!): UserConnection!

  """Participants of this tag."""
  participants(input: ConnectionArgs!): UserConnection!

  """OSS"""
  oss: TagOSS!
  remark: String
  deleted: Boolean!
}

"""
This notice type contains info about editors has been added into a tag.
"""
type TagAddEditorNotice implements Notice {
  """Unique ID of this notice."""
  id: ID!

  """The value determines if the notice is unread or not."""
  unread: Boolean!

  """Time of this notice was created."""
  createdAt: DateTime!

  """The user who added editor to a tag."""
  actor: User!
  tag: Tag
}

"""This notice type contains info about a tag has been adopted by a user."""
type TagAdoptionNotice implements Notice {
  """Unique ID of this notice."""
  id: ID!

  """The value determines if the notice is unread or not."""
  unread: Boolean!

  """Time of this notice was created."""
  createdAt: DateTime!

  """The user who adopted a tag."""
  actor: User!

  """The tag adopted by user."""
  tag: Tag
}

input TagArticlesInput {
  after: String
  first: Int
  oss: Boolean
  selected: Boolean
}

type TagConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TagEdge!]
}

type TagEdge {
  cursor: String!
  node: Tag!
}

input TagEditorsInput {
  excludeAdmin: Boolean
  excludeOwner: Boolean
}

"""This notice type contains info about a editor left a tag."""
type TagLeaveEditorNotice implements Notice {
  """Unique ID of this notice."""
  id: ID!

  """The value determines if the notice is unread or not."""
  unread: Boolean!

  """Time of this notice was created."""
  createdAt: DateTime!

  """The user who leave from tag editors."""
  actor: User!
  tag: Tag
}

"""This notice type contains info about a user left a tag."""
type TagLeaveNotice implements Notice {
  """Unique ID of this notice."""
  id: ID!

  """The value determines if the notice is unread or not."""
  unread: Boolean!

  """Time of this notice was created."""
  createdAt: DateTime!

  """The user who leave a tag."""
  actor: User!

  """The tag left by user."""
  tag: Tag
}

type TagOSS {
  boost: NonNegativeFloat!
  score: NonNegativeFloat!
}

input TagSelectedInput {
  id: ID
  mediaHash: String
}

input TagsInput {
  after: String
  first: Int
  sort: TagsSort
}

"""Enums for sorting tags."""
enum TagsSort {
  newest
  oldest
  hottest
}

scalar Time

input ToggleArticleRecommendInput {
  id: ID!
  enabled: Boolean!
  type: RecommendTypes!
}

"""Common input to toggle single item for `toggleXXX` mutations"""
input ToggleItemInput {
  id: ID!
  enabled: Boolean
}

type Transaction {
  id: ID!
  state: TransactionState!
  purpose: TransactionPurpose!
  amount: Float!
  fee: NonNegativeFloat!
  currency: TransactionCurrency!

  """Timestamp of transaction."""
  createdAt: DateTime!

  """Recipient of transaction."""
  recipient: User

  """Sender of transaction."""
  sender: User

  """Related target article or transaction."""
  target: TransactionTarget

  """Message for end user, including reason of failure."""
  message: String
}

type TransactionConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TransactionEdge!]
}

enum TransactionCurrency {
  HKD
  LIKE
}

type TransactionEdge {
  cursor: String!
  node: Transaction!
}

enum TransactionPurpose {
  donation
  addCredit
  refund
  payout
}

input TransactionsArgs {
  after: String
  first: Int
  id: ID
  states: [TransactionState!]
}

input TransactionsReceivedByArgs {
  after: String
  first: Int
  purpose: TransactionPurpose!
}

enum TransactionState {
  pending
  succeeded
  failed
  canceled
}

union TransactionTarget = Article | Transaction

input TranslationArgs {
  language: UserLanguage!
}

input UnpinCommentInput {
  id: ID!
}

input UnvoteCommentInput {
  id: ID!
}

input UpdateArticlesTagsInput {
  id: ID!
  articles: [ID!]
  isSelected: Boolean!
}

input UpdateArticleStateInput {
  id: ID!
  state: ArticleState!
}

input UpdateCommentsStateInput {
  ids: [ID!]!
  state: CommentState!
}

input UpdateNotificationSettingInput {
  type: NotificationSettingType!
  enabled: Boolean!
}

input UpdateTagSettingInput {
  id: ID!
  type: UpdateTagSettingType!
  editors: [ID!]
}

enum UpdateTagSettingType {
  adopt
  leave
  add_editor
  remove_editor
  leave_editor
}

input UpdateUserInfoInput {
  displayName: String
  userName: String
  avatar: ID
  description: String
  language: UserLanguage
  agreeOn: Boolean
  profileCover: ID
  paymentPassword: String
}

input UpdateUserRoleInput {
  id: ID!
  role: UserRole!
}

input UpdateUserStateInput {
  id: ID
  emails: [String!]
  state: UserState!
  banDays: PositiveInt
  password: String
}

scalar Upload

type UpstreamArticleArchivedNotice implements Notice {
  id: ID!
  unread: Boolean!
  createdAt: DateTime!
  upstream: Article
  target: Article
}

scalar URL

type User implements Node {
  """Global id of an user."""
  id: ID!

  """UUID of an user, for backward compatibility."""
  uuid: UUID!

  """Global unique user name of a user."""
  userName: String

  """Display name on user profile, can be duplicated."""
  displayName: String

  """LikerID of LikeCoin, being used by LikeCoin OAuth"""
  likerId: String

  """Liker info of current user"""
  liker: Liker!

  """URL for user avatar."""
  avatar: URL

  """User information."""
  info: UserInfo!

  """User settings."""
  settings: UserSettings!

  """Article recommendations for current user."""
  recommendation: Recommendation!

  """Articles authored by current user."""
  articles(input: ConnectionArgs!): ArticleConnection!

  """Tags owned and maintained by current user."""
  tags(input: ConnectionArgs!): TagConnection!

  """Drafts authored by current user."""
  drafts(input: ConnectionArgs!): DraftConnection!

  """Articles current user commented on"""
  commentedArticles(input: ConnectionArgs!): ArticleConnection!

  """Artilces current user subscribed to."""
  subscriptions(input: ConnectionArgs!): ArticleConnection!

  """Record of user activity, only accessable by current user."""
  activity: UserActivity!

  """Followers of this user."""
  followers(input: ConnectionArgs!): UserConnection!

  """Users that this user follows."""
  followees(input: ConnectionArgs!): UserConnection!

  """Whether current user is following viewer."""
  isFollower: Boolean!

  """Whether viewer is following current user."""
  isFollowee: Boolean!

  """Users that blocked by current user."""
  blockList(input: ConnectionArgs!): UserConnection!

  """Whether current user is blocking viewer."""
  isBlocking: Boolean!

  """Whether current user is blocked by viewer."""
  isBlocked: Boolean!

  """Status of current user."""
  status: UserStatus

  """OSS"""
  oss: UserOSS!
  remark: String
  notices(input: ConnectionArgs!): NoticeConnection!

  """User Wallet"""
  wallet: Wallet!
}

type UserActivity {
  """User reading history."""
  history(input: ConnectionArgs!): ReadHistoryConnection!

  """User search history."""
  recentSearches(input: ConnectionArgs!): RecentSearchConnection!

  """Appreciations current user gave."""
  appreciationsSent(input: ConnectionArgs!): AppreciationConnection!

  """Total number of appreciation current user gave."""
  appreciationsSentTotal: Int!

  """Appreciations current user received."""
  appreciationsReceived(input: ConnectionArgs!): AppreciationConnection!

  """Total number of appreciation current user received."""
  appreciationsReceivedTotal: Int!
}

type UserConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [UserEdge!]
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserGroup {
  a
  b
}

type UserInfo {
  """Timestamp of registration."""
  createdAt: DateTime

  """Is user name editable."""
  userNameEditable: Boolean!

  """User desciption."""
  description: String

  """User email."""
  email: Email

  """User badges."""
  badges: [Badge!]

  """Timestamp of user agreement."""
  agreeOn: DateTime

  """Cover of profile page."""
  profileCover: URL

  """Type of group."""
  group: UserGroup!
}

enum UserInfoFields {
  displayName
  avatar
  description
  email
  agreeOn
}

input UserInput {
  userName: String!
}

enum UserLanguage {
  en
  zh_hans
  zh_hant
}

input UserLoginInput {
  email: Email!
  password: String!
}

"""This notice type contains info about current user has new followers."""
type UserNewFollowerNotice implements Notice {
  """Unique ID of this notice."""
  id: ID!

  """The value determines if the notice is unread or not."""
  unread: Boolean!

  """Time of this notice was created."""
  createdAt: DateTime!

  """List of new followers."""
  actors: [User]
}

type UserOSS {
  boost: NonNegativeFloat!
  score: NonNegativeFloat!
}

input UserRegisterInput {
  email: Email!
  userName: String
  displayName: String!
  password: String!
  description: String
  codeId: ID!
}

enum UserRole {
  user
  admin
}

type UserSettings {
  """User language setting."""
  language: UserLanguage!

  """Notification settings."""
  notification: NotificationSetting!
}

enum UserState {
  active
  onboarding
  banned
  archived
  frozen
}

type UserStatus {
  """User state."""
  state: UserState!

  """User role and access level."""
  role: UserRole!

  """Number of articles published by user"""
  articleCount: Int!

  """Number of comments posted by user."""
  commentCount: Int!

  """Number of unread notices."""
  unreadNoticeCount: Int!

  """Whether there are unread articles from followees."""
  unreadFolloweeArticles: Boolean!

  """Whether user already set payment password."""
  hasPaymentPassword: Boolean!

  """Number of total written words."""
  totalWordCount: Int!

  """Number of articles donated by user"""
  donatedArticleCount: Int!

  """Number of times of donations received by user"""
  receivedDonationCount: Int!
}

scalar UUID

enum VerificationCodeType {
  register
  email_reset
  email_reset_confirm
  password_reset
  payment_password_reset
  email_verify
}

input VerifyEmailInput {
  codeId: ID!
}

"""Enums for vote types."""
enum Vote {
  up
  down
}

input VoteCommentInput {
  vote: Vote!
  id: ID!
}

type Wallet {
  balance: Balance!
  transactions(input: TransactionsArgs!): TransactionConnection!
  stripeAccount: StripeAccount
}
