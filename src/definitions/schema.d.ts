import { Context } from './index'
/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql'
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  article?: GQLArticle
  node?: GQLNode
  nodes?: Array<GQLNode>
  frequentSearch?: Array<string>
  search: GQLSearchResultConnection
  official: GQLOfficial
  oss: GQLOSS
  viewer?: GQLUser
  user?: GQLUser
  oauthClient?: GQLOAuthClient
}

export interface GQLArticleInput {
  mediaHash?: string
  uuid?: GQLUUID
}

export type GQLUUID = any

/**
 * This type contains metadata, content, hash and related data of an article. If you
 * want information about article's comments. Please check Comment type.
 */
export interface GQLArticle extends GQLNode {
  /**
   * Unique ID of this article
   */
  id: string

  /**
   * The number represents how popular is this article.
   */
  topicScore?: number

  /**
   * Slugified article title.
   */
  slug: string

  /**
   * Time of this article was created.
   */
  createdAt: GQLDateTime

  /**
   * State of this article.
   */
  state: GQLArticleState

  /**
   * This value determines if this article is accessible to visitors.
   */
  public: boolean

  /**
   * This value determines if this article is under Subscription or not.
   */
  live: boolean

  /**
   * Author of this article.
   */
  author: GQLUser

  /**
   * Article title.
   */
  title: string

  /**
   * Article cover's link.
   */
  cover?: GQLURL

  /**
   * A short summary for this article.
   */
  summary: string

  /**
   * Tags attached to this article.
   */
  tags?: Array<GQLTag>

  /**
   * Word count of this article.
   */
  wordCount?: number

  /**
   * IPFS hash of this article.
   */
  dataHash?: string

  /**
   * Media hash, composed of cid encoding, of this article.
   */
  mediaHash?: string

  /**
   * Content of this article.
   */
  content: string

  /**
   * Original language of content
   */
  language?: string

  /**
   * List of articles which added this article into their collections.
   */
  collectedBy: GQLArticleConnection

  /**
   * List of articles added into this articles' collection.
   */
  collection: GQLArticleConnection

  /**
   * Related articles to this articles.
   */
  relatedArticles: GQLArticleConnection

  /**
   * Appreciations history of this article.
   */
  appreciationsReceived: GQLAppreciationConnection

  /**
   * Total number of appreciations recieved of this article.
   */
  appreciationsReceivedTotal: number

  /**
   * Subscribers of this articles.
   */
  subscribers: GQLUserConnection

  /**
   * Limit the nuhmber of appreciate per user.
   */
  appreciateLimit: number

  /**
   * Number represents how many times per user can appreciate this article.
   */
  appreciateLeft: number

  /**
   * This value determines if current viewer has appreciated or not.
   */
  hasAppreciate: boolean

  /**
   * This value determines if current viewer can SuperLike or not.
   */
  canSuperLike: boolean

  /**
   * This value determines if current Viewer has subscribed of not.
   */
  subscribed: boolean

  /**
   * This value determines if this article is an author selected article or not.
   */
  sticky: boolean

  /**
   * Translation of article title and content.
   */
  translation?: GQLArticleTranslation

  /**
   * Transactions history of this article.
   */
  transactionsReceivedBy: GQLUserConnection

  /**
   * OSS
   */
  oss: GQLArticleOSS
  remark?: string

  /**
   * The counting number of comments.
   */
  commentCount: number

  /**
   * The number determines how many pinned comments can be set.
   */
  pinCommentLimit: number

  /**
   * The number determines how many comments can be set as pinned comment.
   */
  pinCommentLeft: number

  /**
   * List of pinned comments.
   */
  pinnedComments?: Array<GQLComment>

  /**
   * List of featured comments of this article.
   */
  featuredComments: GQLCommentConnection

  /**
   * List of comments of this article.
   */
  comments: GQLCommentConnection

  /**
   * The counting number of this article.
   */
  responseCount: number

  /**
   * List of responses of a article.
   */
  responses: GQLResponseConnection
}

export interface GQLNode {
  id: string
}

/** Use this to resolve interface type Node */
export type GQLPossibleNodeTypeNames =
  | 'Article'
  | 'User'
  | 'Comment'
  | 'Tag'
  | 'Draft'

export interface GQLNodeNameMap {
  Node: GQLNode
  Article: GQLArticle
  User: GQLUser
  Comment: GQLComment
  Tag: GQLTag
  Draft: GQLDraft
}

export type GQLDateTime = any

/**
 * Enums for an article state.
 */
export const enum GQLArticleState {
  active = 'active',
  archived = 'archived',
  banned = 'banned',
}

export interface GQLUser extends GQLNode {
  /**
   * Global id of an user.
   */
  id: string

  /**
   * UUID of an user, for backward compatibility.
   */
  uuid: GQLUUID

  /**
   * Global unique user name of a user.
   */
  userName?: string

  /**
   * Display name on user profile, can be duplicated.
   */
  displayName?: string

  /**
   * LikerID of LikeCoin
   * @deprecated Use `liker.likerId`.
   */
  likerId?: string

  /**
   * Liker info of current user
   */
  liker: GQLLiker

  /**
   * URL for user avatar.
   */
  avatar?: GQLURL

  /**
   * User information.
   */
  info: GQLUserInfo

  /**
   * User settings.
   */
  settings: GQLUserSettings

  /**
   * Article recommendations for current user.
   */
  recommendation: GQLRecommendation

  /**
   * Articles authored by current user.
   */
  articles: GQLArticleConnection

  /**
   * Drafts authored by current user.
   */
  drafts: GQLDraftConnection

  /**
   * Articles current user commented on
   */
  commentedArticles: GQLArticleConnection

  /**
   * Artilces current user subscribed to.
   */
  subscriptions: GQLArticleConnection

  /**
   * Record of user activity, only accessable by current user.
   */
  activity: GQLUserActivity

  /**
   * Followers of this user.
   */
  followers: GQLUserConnection

  /**
   * Users that this user follows.
   */
  followees: GQLUserConnection

  /**
   * Whether current user is following viewer.
   */
  isFollower: boolean

  /**
   * Whether viewer is following current user.
   */
  isFollowee: boolean

  /**
   * Users that blocked by current user.
   */
  blockList: GQLUserConnection

  /**
   * Whether current user is blocking viewer.
   */
  isBlocking: boolean

  /**
   * Whether current user is blocked by viewer.
   */
  isBlocked: boolean

  /**
   * Status of current user.
   */
  status?: GQLUserStatus

  /**
   * OSS
   */
  oss: GQLUserOSS
  remark?: string
  notices: GQLNoticeConnection

  /**
   * User Wallet
   */
  wallet: GQLWallet
}

export interface GQLLiker {
  /**
   * Liker ID of LikeCoin
   */
  likerId?: string

  /**
   * Whether liker is a civic liker
   */
  civicLiker: boolean

  /**
   * Total LIKE left in wallet.
   */
  total: GQLNonNegativeFloat

  /**
   * Rate of LikeCoin/USD
   */
  rateUSD?: GQLNonNegativeFloat
}

export type GQLNonNegativeFloat = any

export type GQLURL = any

export interface GQLUserInfo {
  /**
   * Timestamp of registration.
   */
  createdAt: GQLDateTime

  /**
   * Is user name editable.
   */
  userNameEditable: boolean

  /**
   * User desciption.
   */
  description?: string

  /**
   * User email.
   */
  email?: GQLEmail

  /**
   * User badges.
   */
  badges?: Array<GQLBadge>

  /**
   * Timestamp of user agreement.
   */
  agreeOn?: GQLDateTime

  /**
   * Cover of profile page.
   */
  profileCover?: GQLURL

  /**
   * Type of group.
   */
  group: GQLUserGroup
}

export type GQLEmail = any

export interface GQLBadge {
  type: GQLBadgeType
}

export const enum GQLBadgeType {
  seed = 'seed',
}

export const enum GQLUserGroup {
  a = 'a',
  b = 'b',
}

export interface GQLUserSettings {
  /**
   * User language setting.
   */
  language: GQLUserLanguage

  /**
   * Notification settings.
   */
  notification: GQLNotificationSetting
  oauthProviders?: Array<GQLOAuthProvider>
}

export const enum GQLUserLanguage {
  en = 'en',
  zh_hans = 'zh_hans',
  zh_hant = 'zh_hant',
}

export interface GQLNotificationSetting {
  enable: boolean
  email: boolean
  mention: boolean
  follow: boolean
  comment: boolean
  appreciation: boolean
  articleSubscription: boolean
  commentSubscribed: boolean
  downstream: boolean
  commentPinned: boolean
  commentVoted: boolean
  officialNotice: boolean
  reportFeedback: boolean
}

export const enum GQLOAuthProvider {
  facebook = 'facebook',
  wechat = 'wechat',
  google = 'google',
}

export interface GQLRecommendation {
  /**
   * Articles published by user's followees.
   * @deprecated Use `followeeWorks`.
   */
  followeeArticles: GQLArticleConnection

  /**
   * Articles and comments published by user's followees.
   */
  followeeWorks: GQLResponseConnection

  /**
   * Global articles sort by publish time.
   */
  newest: GQLArticleConnection

  /**
   * Global articles sort by latest activity time.
   */
  hottest: GQLArticleConnection

  /**
   * 'In case you missed it' recommendation.
   */
  icymi: GQLArticleConnection

  /**
   * Global articles sort by appreciate, donation and subscription.
   */
  valued: GQLArticleConnection

  /**
   * Global tag list, sort by activities in recent 14 days.
   */
  tags: GQLTagConnection

  /**
   * Gloabl article list, sort by activities in recent 72 hours.
   */
  topics: GQLArticleConnection

  /**
   * Global user list, sort by activities in recent 6 month.
   */
  authors: GQLUserConnection

  /**
   * Recommend articles usings collaborative filtering
   */
  recommendArticles: GQLArticleConnection
}

export interface GQLConnectionArgs {
  after?: string
  first?: number
  oss?: boolean
}

export interface GQLArticleConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLArticleEdge>
}

export interface GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
}

/** Use this to resolve interface type Connection */
export type GQLPossibleConnectionTypeNames =
  | 'ArticleConnection'
  | 'ResponseConnection'
  | 'CommentConnection'
  | 'TagConnection'
  | 'UserConnection'
  | 'DraftConnection'
  | 'ReadHistoryConnection'
  | 'RecentSearchConnection'
  | 'AppreciationConnection'
  | 'NoticeConnection'
  | 'TransactionConnection'
  | 'SearchResultConnection'
  | 'ReportConnection'
  | 'OAuthClientConnection'
  | 'SkippedListItemsConnection'

export interface GQLConnectionNameMap {
  Connection: GQLConnection
  ArticleConnection: GQLArticleConnection
  ResponseConnection: GQLResponseConnection
  CommentConnection: GQLCommentConnection
  TagConnection: GQLTagConnection
  UserConnection: GQLUserConnection
  DraftConnection: GQLDraftConnection
  ReadHistoryConnection: GQLReadHistoryConnection
  RecentSearchConnection: GQLRecentSearchConnection
  AppreciationConnection: GQLAppreciationConnection
  NoticeConnection: GQLNoticeConnection
  TransactionConnection: GQLTransactionConnection
  SearchResultConnection: GQLSearchResultConnection
  ReportConnection: GQLReportConnection
  OAuthClientConnection: GQLOAuthClientConnection
  SkippedListItemsConnection: GQLSkippedListItemsConnection
}

export interface GQLPageInfo {
  startCursor?: string
  endCursor?: string
  hasNextPage: boolean
  hasPreviousPage: boolean
}

export interface GQLArticleEdge {
  cursor: string
  node: GQLArticle
}

export interface GQLResponsesInput {
  sort?: GQLResponseSort
  after?: string
  before?: string
  includeAfter?: boolean
  includeBefore?: boolean
  first?: number
  articleOnly?: boolean
}

/**
 * Enums for sorting responses.
 */
export const enum GQLResponseSort {
  oldest = 'oldest',
  newest = 'newest',
}

export interface GQLResponseConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLResponseEdge>
}

export interface GQLResponseEdge {
  cursor: string
  node: GQLResponse
}

export type GQLResponse = GQLArticle | GQLComment

/** Use this to resolve union type Response */
export type GQLPossibleResponseTypeNames = 'Article' | 'Comment'

export interface GQLResponseNameMap {
  Response: GQLResponse
  Article: GQLArticle
  Comment: GQLComment
}

/**
 * This type contains content, author, descendant comments and related data of a comment.
 */
export interface GQLComment extends GQLNode {
  /**
   * Unique ID of this comment.
   */
  id: string

  /**
   * State of this comment.
   */
  state: GQLCommentState

  /**
   * Time of this comment was created.
   */
  createdAt: GQLDateTime

  /**
   * Article that the comment is belonged to.
   */
  article: GQLArticle

  /**
   * Content of this comment.
   */
  content?: string

  /**
   * Author of this comment.
   */
  author: GQLUser

  /**
   * This value determines this comment is pinned or not.
   */
  pinned: boolean

  /**
   * The counting number of upvotes.
   */
  upvotes: number

  /**
   * The counting number of downvotes.
   */
  downvotes: number

  /**
   * The value determines current user's vote.
   */
  myVote?: GQLVote

  /**
   * Descendant comments of this comment.
   */
  comments: GQLCommentConnection

  /**
   * Parent comment of this comment.
   */
  parentComment?: GQLComment

  /**
   * A Comment that this comment replied to.
   */
  replyTo?: GQLComment
  remark?: string
}

/**
 * Enums for comment state.
 */
export const enum GQLCommentState {
  active = 'active',
  archived = 'archived',
  banned = 'banned',
  collapsed = 'collapsed',
}

/**
 * Enums for vote types.
 */
export const enum GQLVote {
  up = 'up',
  down = 'down',
}

export interface GQLCommentCommentsInput {
  author?: string
  sort?: GQLCommentSort
  after?: string
  first?: number
}

/**
 * Enums for sorting comments by time.
 */
export const enum GQLCommentSort {
  oldest = 'oldest',
  newest = 'newest',
}

export interface GQLCommentConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLCommentEdge>
}

export interface GQLCommentEdge {
  cursor: string
  node: GQLComment
}

export interface GQLTagConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLTagEdge>
}

export interface GQLTagEdge {
  cursor: string
  node: GQLTag
}

/**
 * This type contains content, count and related data of an article tag.
 */
export interface GQLTag extends GQLNode {
  /**
   * Unique id of this tag.
   */
  id: string

  /**
   * Content of this tag.
   */
  content: string

  /**
   * List of how many articles were attached with this tag.
   */
  articles: GQLArticleConnection

  /**
   * This value determines if this article is selected by this tag or not.
   */
  selected: boolean

  /**
   * Time of this tag was created.
   */
  createdAt: GQLDateTime

  /**
   * Tag's cover link.
   */
  cover?: GQLURL

  /**
   * Description of this tag.
   */
  description?: string

  /**
   * Editors of this tag.
   */
  editors?: Array<GQLUser>

  /**
   * Creator of this tag.
   */
  creator?: GQLUser

  /**
   * OSS
   */
  oss: GQLTagOSS
  remark?: string
  deleted: boolean
}

export interface GQLTagArticlesInput {
  after?: string
  first?: number
  oss?: boolean
  selected?: boolean
}

export interface GQLTagSelectedInput {
  id?: string
  mediaHash?: string
}

export interface GQLTagOSS {
  boost: GQLNonNegativeFloat
  score: GQLNonNegativeFloat
}

export interface GQLAuthorsInput {
  after?: string
  first?: number
  oss?: boolean
  filter?: GQLAuthorsFilter
}

export interface GQLAuthorsFilter {
  random?: boolean
  followed?: boolean
}

export interface GQLUserConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLUserEdge>
}

export interface GQLUserEdge {
  cursor: string
  node: GQLUser
}

export interface GQLDraftConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLDraftEdge>
}

export interface GQLDraftEdge {
  cursor: string
  node: GQLDraft
}

/**
 * This type contains content, collections, assets and related data of a draft.
 */
export interface GQLDraft extends GQLNode {
  /**
   * Unique ID of this draft.
   */
  id: string

  /**
   * Collection list of this draft.
   */
  collection: GQLArticleConnection

  /**
   * Draft title.
   */
  title?: string

  /**
   * Slugified draft title.
   */
  slug: string

  /**
   * Summary of this draft.
   */
  summary?: string

  /**
   * Content of this draft.
   */
  content?: string

  /**
   * Time of this draft was scheduled for publishing.
   */
  scheduledAt?: GQLDateTime

  /**
   * Time of this draft was created.
   */
  createdAt: GQLDateTime

  /**
   * Last time of this draft was upadted.
   */
  updatedAt: GQLDateTime

  /**
   * The counting number of words in this draft.
   */
  wordCount: number

  /**
   * Tags are attached to this draft.
   */
  tags?: Array<string>

  /**
   * Draft's cover link.
   */
  cover?: GQLURL

  /**
   * State of draft during publihsing.
   */
  publishState: GQLPublishState

  /**
   * List of asstets are belonged to this draft.
   */
  assets: Array<GQLAsset>

  /**
   * Published article
   */
  article?: GQLArticle
}

/**
 * Enums for publishing state.
 */
export const enum GQLPublishState {
  unpublished = 'unpublished',
  pending = 'pending',
  error = 'error',
  published = 'published',
}

/**
 * This type contains type, link and related data of an asset.
 */
export interface GQLAsset {
  /**
   * Unique ID of this Asset.
   */
  id: string

  /**
   * Types of this asset.
   */
  type: GQLAssetType

  /**
   * Link of this asset.
   */
  path: string

  /**
   * Time of this asset was created.
   */
  createdAt: GQLDateTime
}

/**
 * Enums for asset types.
 */
export const enum GQLAssetType {
  avatar = 'avatar',
  embed = 'embed',
  embedaudio = 'embedaudio',
  profileCover = 'profileCover',
  oauthClientAvatar = 'oauthClientAvatar',
}

export interface GQLUserActivity {
  /**
   * User reading history.
   */
  history: GQLReadHistoryConnection

  /**
   * User search history.
   */
  recentSearches: GQLRecentSearchConnection

  /**
   * Appreciations current user gave.
   */
  appreciationsSent: GQLAppreciationConnection

  /**
   * Total number of appreciation current user gave.
   */
  appreciationsSentTotal: number

  /**
   * Appreciations current user received.
   */
  appreciationsReceived: GQLAppreciationConnection

  /**
   * Total number of appreciation current user received.
   */
  appreciationsReceivedTotal: number
}

export interface GQLReadHistoryConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLReadHistoryEdge>
}

export interface GQLReadHistoryEdge {
  cursor: string
  node: GQLReadHistory
}

export interface GQLReadHistory {
  article: GQLArticle
  readAt: GQLDateTime
}

export interface GQLRecentSearchConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLRecentSearchEdge>
}

export interface GQLRecentSearchEdge {
  cursor: string
  node: string
}

export interface GQLAppreciationConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLAppreciationEdge>
}

export interface GQLAppreciationEdge {
  cursor: string
  node: GQLAppreciation
}

export interface GQLAppreciation {
  amount: number
  purpose: GQLAppreciationPurpose
  content: string

  /**
   * Timestamp of appreciation.
   */
  createdAt: GQLDateTime

  /**
   * Recipient of appreciation.
   */
  recipient: GQLUser

  /**
   * Sender of appreciation.
   */
  sender?: GQLUser

  /**
   * Object that appreciation is meant for.
   */
  target?: GQLArticle
}

export const enum GQLAppreciationPurpose {
  appreciate = 'appreciate',
  appreciateComment = 'appreciateComment',
  appreciateSubsidy = 'appreciateSubsidy',
  invitationAccepted = 'invitationAccepted',
  joinByInvitation = 'joinByInvitation',
  joinByTask = 'joinByTask',
  firstPost = 'firstPost',
  systemSubsidy = 'systemSubsidy',
}

export interface GQLUserStatus {
  /**
   * User state.
   */
  state: GQLUserState

  /**
   * User role and access level.
   */
  role: GQLUserRole

  /**
   * Total LIKE left in wallet.
   * @deprecated Use `liker.total` and `liker.rateUSD`.
   */
  LIKE: GQLLIKE

  /**
   * Number of articles published by user
   */
  articleCount: number

  /**
   * Number of comments posted by user.
   */
  commentCount: number

  /**
   * Number of unread notices.
   */
  unreadNoticeCount: number

  /**
   * Whether there are unread articles from followees.
   */
  unreadFolloweeArticles: boolean

  /**
   * Whether user has read response info or not.
   */
  unreadResponseInfoPopUp: boolean

  /**
   * Whether user already set payment password.
   */
  hasPaymentPassword: boolean

  /**
   * Number of total written words.
   */
  totalWordCount: number
}

export const enum GQLUserState {
  active = 'active',
  onboarding = 'onboarding',
  banned = 'banned',
  archived = 'archived',
}

export const enum GQLUserRole {
  user = 'user',
  admin = 'admin',
}

export interface GQLLIKE {
  total: GQLNonNegativeFloat
  rateUSD?: GQLNonNegativeFloat
}

export interface GQLUserOSS {
  boost: GQLNonNegativeFloat
  score: GQLNonNegativeFloat
}

export interface GQLNoticeConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLNoticeEdge>
}

export interface GQLNoticeEdge {
  cursor: string
  node: GQLNotice
}

/**
 * This interface contains common fields of a notice.
 */
export interface GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime
}

/** Use this to resolve interface type Notice */
export type GQLPossibleNoticeTypeNames =
  | 'ArticleMentionedYouNotice'
  | 'ArticleNewAppreciationNotice'
  | 'ArticleNewCollectedNotice'
  | 'ArticleNewCommentNotice'
  | 'ArticleNewDownstreamNotice'
  | 'ArticleNewSubscriberNotice'
  | 'ArticlePublishedNotice'
  | 'ArticleTagHasBeenAddedNotice'
  | 'ArticleTagHasBeenRemovedNotice'
  | 'ArticleTagHasBeenUnselectedNotice'
  | 'CommentMentionedYouNotice'
  | 'CommentNewReplyNotice'
  | 'CommentPinnedNotice'
  | 'DownstreamArticleArchivedNotice'
  | 'OfficialAnnouncementNotice'
  | 'PaymentPayoutNotice'
  | 'PaymentReceivedDonationNotice'
  | 'SubscribedArticleNewCommentNotice'
  | 'UpstreamArticleArchivedNotice'
  | 'UserNewFollowerNotice'

export interface GQLNoticeNameMap {
  Notice: GQLNotice
  ArticleMentionedYouNotice: GQLArticleMentionedYouNotice
  ArticleNewAppreciationNotice: GQLArticleNewAppreciationNotice
  ArticleNewCollectedNotice: GQLArticleNewCollectedNotice
  ArticleNewCommentNotice: GQLArticleNewCommentNotice
  ArticleNewDownstreamNotice: GQLArticleNewDownstreamNotice
  ArticleNewSubscriberNotice: GQLArticleNewSubscriberNotice
  ArticlePublishedNotice: GQLArticlePublishedNotice
  ArticleTagHasBeenAddedNotice: GQLArticleTagHasBeenAddedNotice
  ArticleTagHasBeenRemovedNotice: GQLArticleTagHasBeenRemovedNotice
  ArticleTagHasBeenUnselectedNotice: GQLArticleTagHasBeenUnselectedNotice
  CommentMentionedYouNotice: GQLCommentMentionedYouNotice
  CommentNewReplyNotice: GQLCommentNewReplyNotice
  CommentPinnedNotice: GQLCommentPinnedNotice
  DownstreamArticleArchivedNotice: GQLDownstreamArticleArchivedNotice
  OfficialAnnouncementNotice: GQLOfficialAnnouncementNotice
  PaymentPayoutNotice: GQLPaymentPayoutNotice
  PaymentReceivedDonationNotice: GQLPaymentReceivedDonationNotice
  SubscribedArticleNewCommentNotice: GQLSubscribedArticleNewCommentNotice
  UpstreamArticleArchivedNotice: GQLUpstreamArticleArchivedNotice
  UserNewFollowerNotice: GQLUserNewFollowerNotice
}

export interface GQLWallet {
  balance: GQLBalance
  transactions: GQLTransactionConnection
  stripeAccount?: GQLStripeAccount
}

export interface GQLBalance {
  HKD: number
}

export interface GQLTransactionsArgs {
  after?: string
  first?: number
  id?: string
  states?: Array<GQLTransactionState>
}

export const enum GQLTransactionState {
  pending = 'pending',
  succeeded = 'succeeded',
  failed = 'failed',
  canceled = 'canceled',
}

export interface GQLTransactionConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLTransactionEdge>
}

export interface GQLTransactionEdge {
  cursor: string
  node: GQLTransaction
}

export interface GQLTransaction {
  id: string
  state: GQLTransactionState
  purpose: GQLTransactionPurpose
  amount: number
  fee: GQLNonNegativeFloat
  currency: GQLTransactionCurrency

  /**
   * Timestamp of transaction.
   */
  createdAt: GQLDateTime

  /**
   * Recipient of transaction.
   */
  recipient?: GQLUser

  /**
   * Sender of transaction.
   */
  sender?: GQLUser

  /**
   * Related target article or transaction.
   */
  target?: GQLTransactionTarget

  /**
   * Message for end user, including reason of failure.
   */
  message?: string
}

export const enum GQLTransactionPurpose {
  donation = 'donation',
  addCredit = 'addCredit',
  refund = 'refund',
  payout = 'payout',
}

export const enum GQLTransactionCurrency {
  HKD = 'HKD',
  LIKE = 'LIKE',
}

export type GQLTransactionTarget = GQLArticle | GQLTransaction

/** Use this to resolve union type TransactionTarget */
export type GQLPossibleTransactionTargetTypeNames = 'Article' | 'Transaction'

export interface GQLTransactionTargetNameMap {
  TransactionTarget: GQLTransactionTarget
  Article: GQLArticle
  Transaction: GQLTransaction
}

/**
 * Stripe Account
 */
export interface GQLStripeAccount {
  id: string
  loginUrl: GQLURL
}

export interface GQLTranslationArgs {
  language: GQLUserLanguage
}

export interface GQLArticleTranslation {
  /**
   *
   * @deprecated Use `Article.language` instead
   */
  originalLanguage: string
  title?: string
  content?: string
}

export interface GQLTransactionsReceivedByArgs {
  after?: string
  first?: number
  purpose: GQLTransactionPurpose
}

export interface GQLArticleOSS {
  boost: GQLNonNegativeFloat
  score: GQLNonNegativeFloat
  inRecommendIcymi: boolean
  inRecommendHottest: boolean
  inRecommendNewest: boolean
}

export interface GQLFeaturedCommentsInput {
  sort?: GQLCommentSort
  after?: string
  first?: number
}

export interface GQLCommentsInput {
  sort?: GQLCommentSort
  after?: string
  before?: string
  includeAfter?: boolean
  includeBefore?: boolean
  first?: number
  filter?: GQLCommentsFilter
}

export interface GQLCommentsFilter {
  parentComment?: string
  state?: GQLCommentState
  author?: string
}

export interface GQLNodeInput {
  id: string
}

export interface GQLNodesInput {
  ids: Array<string>
}

export interface GQLFrequentSearchInput {
  key?: string
  first?: number
}

export interface GQLSearchInput {
  key: string
  type: GQLSearchTypes
  after?: string
  first?: number
  oss?: boolean
}

export const enum GQLSearchTypes {
  Article = 'Article',
  User = 'User',
  Tag = 'Tag',
}

export interface GQLSearchResultConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLSearchResultEdge>
}

export interface GQLSearchResultEdge {
  cursor: string
  node: GQLNode
}

/**
 * This type contains system-wise settings.
 */
export interface GQLOfficial {
  reportCategory: Array<GQLCategory>
  feedbackCategory: Array<GQLCategory>
  releases?: Array<GQLRelease>

  /**
   * Links of specific pages on Matters site.
   */
  links: GQLOfficialLinks
  placements: GQLPlacements

  /**
   * IPFS node address
   */
  ipfsAddress: Array<string>

  /**
   * Feature flag
   */
  features: Array<GQLFeature>
}

export interface GQLCategory {
  id: string
  name: string
}

export interface GQLReleasesInput {
  platform: GQLPlatformType
  channel: GQLChannelType
  first?: number
}

export const enum GQLPlatformType {
  ios = 'ios',
  android = 'android',
}

export const enum GQLChannelType {
  appStore = 'appStore',
  googlePlay = 'googlePlay',
}

export interface GQLRelease {
  title?: string
  description?: string
  cover?: GQLURL
  link?: GQLURL
  platform: GQLPlatformType
  channel: GQLChannelType
  version: string
  latest: boolean
  forceUpdate: boolean
  releasedAt: GQLDateTime
}

export interface GQLOfficialLinks {
  beginnerGuide: GQLURL
  userGuide: GQLURL
  about: GQLURL
  faq: GQLURL
  tos: GQLURL
}

export interface GQLPlacements {
  webAsideTop: GQLPlacementUnit
  appSplash: GQLPlacementUnit
  appInStreamTop: GQLPlacementUnit
  appInStreamMiddle: GQLPlacementUnit
  appInStreamBottom: GQLPlacementUnit
  appInvitationTop: GQLPlacementUnit
}

export interface GQLPlacementUnit {
  image: GQLURL
  link: GQLURL
  adLabel: boolean
}

export interface GQLFeature {
  name: GQLFeatureName
  enabled: boolean
}

export const enum GQLFeatureName {
  add_credit = 'add_credit',
  payment = 'payment',
  payout = 'payout',
  verify_appreciate = 'verify_appreciate',
  fingerprint = 'fingerprint',
}

export interface GQLOSS {
  users: GQLUserConnection
  comments: GQLCommentConnection
  articles: GQLArticleConnection
  tags: GQLTagConnection
  reports: GQLReportConnection
  report: GQLReport
  oauthClients: GQLOAuthClientConnection
  skippedListItems: GQLSkippedListItemsConnection
}

export interface GQLOSSArticlesInput {
  public?: boolean
  after?: string
  first?: number
}

export interface GQLTagsInput {
  after?: string
  first?: number
  sort?: GQLTagsSort
}

/**
 * Enums for sorting tags.
 */
export const enum GQLTagsSort {
  newest = 'newest',
  oldest = 'oldest',
  hottest = 'hottest',
}

export interface GQLReportsInput {
  article: boolean
  comment: boolean
  after?: string
  first?: number
}

export interface GQLReportConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLReportEdge>
}

export interface GQLReportEdge {
  cursor: string
  node: GQLReport
}

export interface GQLReport {
  id: string
  user?: GQLUser
  article?: GQLArticle
  comment?: GQLComment
  category: string
  description?: string
  assets?: Array<GQLURL>
  contact?: string
  createdAt: GQLDateTime
  remark?: string
}

export interface GQLReportInput {
  id: string
}

export interface GQLOAuthClientConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLOAuthClientEdge>
}

export interface GQLOAuthClientEdge {
  cursor: string
  node: GQLOAuthClient
}

export interface GQLOAuthClient {
  /**
   * Unique Client ID of this OAuth Client.
   */
  id: string

  /**
   * App name
   */
  name: string

  /**
   * App Description
   */
  description?: string

  /**
   * URL for oauth client's official website
   */
  website?: GQLURL

  /**
   * Scopes
   */
  scope?: Array<string>

  /**
   * URL for oauth client's avatar.
   */
  avatar?: GQLURL

  /**
   * Client secret
   */
  secret: string

  /**
   * Redirect URIs
   */
  redirectURIs?: Array<GQLURL>

  /**
   * Grant Types
   */
  grantTypes?: Array<GQLGrantType>

  /**
   * Linked Developer Account
   */
  user?: GQLUser

  /**
   * Creation Date
   */
  createdAt: GQLDate
}

export const enum GQLGrantType {
  authorization_code = 'authorization_code',
  refresh_token = 'refresh_token',
}

export type GQLDate = any

export interface GQLSkippedListItemsInput {
  after?: string
  first?: number
  type?: GQLSkippedListItemType
}

export const enum GQLSkippedListItemType {
  agent_hash = 'agent_hash',
  email = 'email',
  domain = 'domain',
}

export interface GQLSkippedListItemsConnection extends GQLConnection {
  totalCount: number
  pageInfo: GQLPageInfo
  edges?: Array<GQLSkippedListItemEdge>
}

export interface GQLSkippedListItemEdge {
  cursor: string
  node?: GQLSkippedListItem
}

export interface GQLSkippedListItem {
  id: string
  uuid: GQLUUID
  type: GQLSkippedListItemType
  value: string
  archived: boolean
  createdAt: GQLDateTime
  updatedAt: GQLDateTime
}

export interface GQLUserInput {
  userName: string
}

export interface GQLOAuthClientInput {
  id: string
}

export interface GQLMutation {
  /**
   * Publish an article onto IPFS.
   */
  publishArticle: GQLDraft

  /**
   * Archive an article and users won't be able to view this article.
   */
  archiveArticle: GQLArticle

  /**
   * Report an article to team.
   */
  reportArticle?: boolean

  /**
   * Subscribe or Unsubscribe article
   */
  toggleSubscribeArticle: GQLArticle

  /**
   * Appreciate an article.
   */
  appreciateArticle: GQLArticle

  /**
   * Read an article.
   */
  readArticle: GQLArticle

  /**
   * Recall while publishing.
   */
  recallPublish: GQLDraft

  /**
   * Set collection of an article.
   */
  setCollection: GQLArticle

  /**
   * Update article information.
   */
  updateArticleInfo: GQLArticle

  /**
   * Create or update tag.
   */
  putTag: GQLTag

  /**
   * Add or update one tag to articles.
   */
  putArticlesTags: GQLTag

  /**
   * Delete one tag from articles
   */
  deleteArticlesTags: GQLTag

  /**
   * #############
   *      OSS    #
   * #############
   */
  toggleArticleLive: GQLArticle
  toggleArticlePublic: GQLArticle
  toggleArticleRecommend: GQLArticle
  updateArticleState: GQLArticle
  deleteTags?: boolean
  renameTag: GQLTag
  mergeTags: GQLTag

  /**
   * Subscribe an artcile.
   * @deprecated Use `toggleSubscribeArticle`.
   */
  subscribeArticle: GQLArticle

  /**
   * Unsubscribe an article.
   * @deprecated Use `toggleSubscribeArticle`.
   */
  unsubscribeArticle: GQLArticle

  /**
   * Publish a comment.
   */
  putComment: GQLComment

  /**
   * Remove a comment.
   */
  deleteComment: GQLComment

  /**
   * Pin or Unpin a comment.
   */
  togglePinComment: GQLComment

  /**
   * Report a comment to team.
   */
  reportComment?: boolean

  /**
   * Upvote or downvote a comment.
   */
  voteComment: GQLComment

  /**
   * Unvote a comment.
   */
  unvoteComment: GQLComment

  /**
   * Update a comments' state.
   */
  updateCommentsState: Array<GQLComment>

  /**
   * Pin a comment.
   * @deprecated Use `togglePinComment`.
   */
  pinComment: GQLComment

  /**
   * Unpin a comment.
   * @deprecated Use `togglePinComment`.
   */
  unpinComment: GQLComment

  /**
   * Create or update a draft.
   */
  putDraft: GQLDraft

  /**
   * Remove a draft.
   */
  deleteDraft?: boolean

  /**
   * Mark all received notices as read.
   */
  markAllNoticesAsRead?: boolean

  /**
   * Upload a single file.
   */
  singleFileUpload: GQLAsset

  /**
   * Delete a uploaded file.
   */
  singleFileDelete: boolean
  feedback?: boolean

  /**
   * Add specific user behavior record.
   */
  logRecord?: boolean

  /**
   * #############
   *      OSS    #
   * #############
   */
  setBoost: GQLNode
  putRemark?: string
  putSkippedListItem?: Array<GQLSkippedListItem>
  setFeature: GQLFeature

  /**
   * Send verification code for email.
   */
  sendVerificationCode?: boolean

  /**
   * Confirm verification code from email.
   */
  confirmVerificationCode: string

  /**
   * Reset user or payment password.
   */
  resetPassword?: boolean

  /**
   * Change user email.
   */
  changeEmail: GQLUser

  /**
   * Verify user email.
   */
  verifyEmail?: boolean

  /**
   * Register user, can only be used on matters.news website.
   */
  userRegister: GQLAuthResult

  /**
   * Login user.
   */
  userLogin: GQLAuthResult

  /**
   * Logout user.
   */
  userLogout: boolean

  /**
   * Generate or claim a Liker ID through LikeCoin
   */
  generateLikerId: GQLUser

  /**
   * Update user information.
   */
  updateUserInfo: GQLUser

  /**
   * Update user notification settings.
   */
  updateNotificationSetting: GQLUser

  /**
   * Follow or Unfollow current usere.
   */
  toggleFollowUser: GQLUser

  /**
   * Block or Unblock a given user.
   */
  toggleBlockUser: GQLUser

  /**
   * Subscribe/ Unsubscribe Push Notification.
   */
  toggleSubscribePush: GQLUser

  /**
   * Clear read history for user.
   */
  clearReadHistory?: boolean

  /**
   * Clear search history for user.
   */
  clearSearchHistory?: boolean

  /**
   * Migrate articles from other service provider.
   */
  migration?: boolean

  /**
   * Update state of a user, used in OSS.
   */
  updateUserState: GQLUser

  /**
   * Update state of a user, used in OSS.
   */
  updateUserRole: GQLUser

  /**
   * Block a given user.
   * @deprecated Use `toggleBlockUser`.
   */
  blockUser: GQLUser

  /**
   * Unblock a given user.
   * @deprecated Use `toggleBlockUser`.
   */
  unblockUser: GQLUser

  /**
   * Follow a given user.
   * @deprecated Use `toggleFollowUser`.
   */
  followUser: GQLUser

  /**
   * Unfollow curent user.
   * @deprecated Use `toggleFollowUser`.
   */
  unfollowUser: GQLUser

  /**
   * Add Credit to User Wallet
   */
  addCredit: GQLAddCreditResult

  /**
   * Pay to another user or article
   */
  payTo: GQLPayToResult

  /**
   * Payout to user
   */
  payout: GQLTransaction

  /**
   * Create Stripe Connect account for Payout
   */
  connectStripeAccount: GQLConnectStripeAccountResult

  /**
   * Create or Update an OAuth Client, used in OSS.
   */
  putOAuthClient?: GQLOAuthClient
}

export interface GQLPublishArticleInput {
  id: string
  delay?: number
}

export interface GQLArchiveArticleInput {
  id: string
}

export interface GQLReportArticleInput {
  id: string
  category: string
  description: string
  assetIds?: Array<string>
  contact?: string
}

/**
 * Common input to toggle single item for `toggleXXX` mutations
 */
export interface GQLToggleItemInput {
  id: string
  enabled?: boolean
}

export interface GQLAppreciateArticleInput {
  id: string
  amount: number
  token?: string
  superLike?: boolean
}

export interface GQLReadArticleInput {
  id: string
}

export interface GQLRecallPublishInput {
  id: string
}

export interface GQLSetCollectionInput {
  id: string
  collection: Array<string>
}

export interface GQLUpdateArticleInfoInput {
  id: string
  sticky?: boolean
}

export interface GQLPutTagInput {
  id?: string
  content?: string
  description?: string
}

export interface GQLPutArticlesTagsInput {
  id: string
  articles?: Array<string>
  selected?: boolean
}

export interface GQLUpdateArticlesTagsInput {
  id: string
  articles?: Array<string>
}

export interface GQLToggleArticleRecommendInput {
  id: string
  enabled: boolean
  type: GQLRecommendTypes
}

/**
 * Enums for types of recommend articles.
 */
export const enum GQLRecommendTypes {
  icymi = 'icymi',
  hottest = 'hottest',
  newest = 'newest',
}

export interface GQLUpdateArticleStateInput {
  id: string
  state: GQLArticleState
}

export interface GQLDeleteTagsInput {
  ids: Array<string>
}

export interface GQLRenameTagInput {
  id: string
  content: string
}

export interface GQLMergeTagsInput {
  ids: Array<string>
  content: string
}

export interface GQLSubscribeArticleInput {
  id: string
}

export interface GQLUnsubscribeArticleInput {
  id: string
}

export interface GQLPutCommentInput {
  comment: GQLCommentInput
  id?: string
}

export interface GQLCommentInput {
  content: string
  replyTo?: string
  articleId: string
  parentId?: string
  mentions?: Array<string>
}

export interface GQLDeleteCommentInput {
  id: string
}

export interface GQLReportCommentInput {
  id: string
  category: string
  description: string
  assetIds?: Array<string>
  contact?: string
}

export interface GQLVoteCommentInput {
  vote: GQLVote
  id: string
}

export interface GQLUnvoteCommentInput {
  id: string
}

export interface GQLUpdateCommentsStateInput {
  ids: Array<string>
  state: GQLCommentState
}

export interface GQLPinCommentInput {
  id: string
}

export interface GQLUnpinCommentInput {
  id: string
}

export interface GQLPutDraftInput {
  id?: string
  title?: string
  content?: string
  tags?: Array<string | null>
  coverAssetId?: string
  collection?: Array<string | null>
}

export interface GQLDeleteDraftInput {
  id: string
}

export interface GQLSingleFileUploadInput {
  type: GQLAssetType
  file?: GQLUpload
  url?: GQLURL
  entityType: GQLEntityType
  entityId?: string
}

export type GQLUpload = any

export const enum GQLEntityType {
  article = 'article',
  draft = 'draft',
  user = 'user',
}

export interface GQLSingleFileDeleteInput {
  id: string
}

export interface GQLFeedbackInput {
  category: string
  description?: string
  assetIds?: Array<string>
  contact?: string
}

export interface GQLLogRecordInput {
  type: GQLLogRecordTypes
}

export const enum GQLLogRecordTypes {
  ReadFolloweeArticles = 'ReadFolloweeArticles',
  ReadResponseInfoPopUp = 'ReadResponseInfoPopUp',
}

export interface GQLSetBoostInput {
  id: string
  boost: GQLNonNegativeFloat
  type: GQLBoostTypes
}

export const enum GQLBoostTypes {
  Article = 'Article',
  User = 'User',
  Tag = 'Tag',
}

export interface GQLPutRemarkInput {
  id: string
  remark: string
  type: GQLRemarkTypes
}

export const enum GQLRemarkTypes {
  Article = 'Article',
  User = 'User',
  Tag = 'Tag',
  Comment = 'Comment',
  Report = 'Report',
  Feedback = 'Feedback',
}

export interface GQLPutSkippedListItemInput {
  id?: string
  type?: GQLSkippedListItemType
  value?: string
  archived?: boolean
}

export interface GQLSetFeatureInput {
  name: GQLFeatureName
  flag: GQLFeatureFlag
}

export const enum GQLFeatureFlag {
  on = 'on',
  off = 'off',
  admin = 'admin',
}

export interface GQLSendVerificationCodeInput {
  email: GQLEmail
  type: GQLVerificationCodeType
  token?: string
}

export const enum GQLVerificationCodeType {
  register = 'register',
  email_reset = 'email_reset',
  email_reset_confirm = 'email_reset_confirm',
  password_reset = 'password_reset',
  payment_password_reset = 'payment_password_reset',
  email_verify = 'email_verify',
}

export interface GQLConfirmVerificationCodeInput {
  email: GQLEmail
  type: GQLVerificationCodeType
  code: string
}

export interface GQLResetPasswordInput {
  password: string
  codeId: string
  type?: GQLResetPasswordType
}

export const enum GQLResetPasswordType {
  account = 'account',
  payment = 'payment',
}

export interface GQLChangeEmailInput {
  oldEmail: GQLEmail
  oldEmailCodeId: string
  newEmail: GQLEmail
  newEmailCodeId: string
}

export interface GQLVerifyEmailInput {
  codeId: string
}

export interface GQLUserRegisterInput {
  email: GQLEmail
  userName?: string
  displayName: string
  password: string
  description?: string
  codeId: string
}

export interface GQLAuthResult {
  auth: boolean
  token?: string
}

export interface GQLUserLoginInput {
  email: GQLEmail
  password: string
}

export interface GQLUpdateUserInfoInput {
  displayName?: string
  userName?: string
  avatar?: string
  description?: string
  language?: GQLUserLanguage
  agreeOn?: boolean
  profileCover?: string
  paymentPassword?: string
}

export interface GQLUpdateNotificationSettingInput {
  type: GQLNotificationSettingType
  enabled: boolean
}

export const enum GQLNotificationSettingType {
  enable = 'enable',
  email = 'email',
  mention = 'mention',
  follow = 'follow',
  comment = 'comment',
  appreciation = 'appreciation',
  articleSubscription = 'articleSubscription',
  commentSubscribed = 'commentSubscribed',
  downstream = 'downstream',
  commentPinned = 'commentPinned',
  commentVoted = 'commentVoted',
  officialNotice = 'officialNotice',
  reportFeedback = 'reportFeedback',
}

export interface GQLClearReadHistoryInput {
  id: string
}

export interface GQLMigrationInput {
  type?: GQLMigrationType
  files: Array<GQLUpload | null>
}

export const enum GQLMigrationType {
  medium = 'medium',
}

export interface GQLUpdateUserStateInput {
  id: string
  state: GQLUserState
  banDays?: GQLPositiveInt
  password?: string
}

export type GQLPositiveInt = any

export interface GQLUpdateUserRoleInput {
  id: string
  role: GQLUserRole
}

export interface GQLBlockUserInput {
  id: string
}

export interface GQLFollowUserInput {
  id: string
}

/**
 * Add Credit
 */
export interface GQLAddCreditInput {
  amount: GQLPositiveFloat
}

export type GQLPositiveFloat = any

export interface GQLAddCreditResult {
  transaction: GQLTransaction

  /**
   * The client secret of this PaymentIntent.
   */
  client_secret: string
}

export interface GQLPayToInput {
  amount: GQLPositiveFloat
  currency: GQLTransactionCurrency
  purpose: GQLTransactionPurpose
  recipientId: string
  targetId?: string
  password?: string
}

export interface GQLPayToResult {
  transaction: GQLTransaction

  /**
   * Only available when paying with LIKE.
   */
  redirectUrl?: GQLURL
}

export interface GQLPayoutInput {
  amount: GQLPositiveFloat
  password: string
}

export interface GQLConnectStripeAccountResult {
  redirectUrl: GQLURL
}

export interface GQLPutOAuthClientInput {
  id?: string
  name?: string
  description?: string
  website?: GQLURL
  scope?: Array<string>
  avatar?: string
  secret?: string
  redirectURIs?: Array<GQLURL>
  grantTypes?: Array<GQLGrantType>
  user?: string
}

export interface GQLSubscription {
  nodeEdited: GQLNode
}

export interface GQLNodeEditedInput {
  id: string
}

/**
 * This notice type contains info about current user has been mentioned in an article.
 */
export interface GQLArticleMentionedYouNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * The user who mentioned current user.
   */
  actor: GQLUser

  /**
   * The article that current user has been mentioned in.
   */
  target?: GQLArticle
}

/**
 * This notice type contains info about current user's article has been appreciated by others.
 */
export interface GQLArticleNewAppreciationNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * List of users who appreciated current user's article.
   */
  actors?: Array<GQLUser | null>

  /**
   * The article that has been appreciated.
   */
  target?: GQLArticle
}

/**
 * This notice type contains info about current user's article has been collected by others.
 */
export interface GQLArticleNewCollectedNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * The user collect current user's articles.
   */
  actor: GQLUser

  /**
   * The article that collected current user's articles.
   */
  collection?: GQLArticle

  /**
   * The article that has been collected.
   */
  target?: GQLArticle
}

/**
 * This notice type contains info about current user's article has new comment.
 */
export interface GQLArticleNewCommentNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * The user who comment current user's article.
   */
  actors?: Array<GQLUser | null>

  /**
   * The article that has new comment.
   */
  target?: GQLArticle

  /**
   * The comment data.
   */
  comment?: GQLComment
}

export interface GQLArticleNewDownstreamNotice extends GQLNotice {
  id: string
  unread: boolean
  createdAt: GQLDateTime
  actors?: Array<GQLUser | null>
  downstream?: GQLArticle
  target?: GQLArticle
}

/**
 * This notice type contains info about current user's article has been subscribed by others.
 */
export interface GQLArticleNewSubscriberNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * List of users who subscribed current user's article.
   */
  actors?: Array<GQLUser | null>

  /**
   * The article that has been subscribed.
   */
  target?: GQLArticle
}

/**
 * This notice type contains info about current user's article publihsed successfully.
 */
export interface GQLArticlePublishedNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * The article that has been published.
   */
  target?: GQLArticle
}

/**
 * This notice type contains info about one user has added current user's article, and set it as selected.
 */
export interface GQLArticleTagHasBeenAddedNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * The user who replied current user's comment.
   */
  actor: GQLUser

  /**
   * The article has a new tag.
   */
  target?: GQLArticle

  /**
   * The tag has been attached to an article.
   */
  tag?: GQLTag
}

/**
 * This notice type contains info about one uer has removed a tag from current user's article.
 */
export interface GQLArticleTagHasBeenRemovedNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * The user who replied current user's comment.
   */
  actor: GQLUser

  /**
   * The article loses a tag.
   */
  target?: GQLArticle

  /**
   * The tag has been deattached from an article.
   */
  tag?: GQLTag
}

/**
 * This notice type contains info about one user has set current user's article unselected.
 */
export interface GQLArticleTagHasBeenUnselectedNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * The user who replied current user's comment.
   */
  actor: GQLUser

  /**
   * The article has a new tag.
   */
  target?: GQLArticle

  /**
   * The tag has been attached to an article.
   */
  tag?: GQLTag
}

export const enum GQLCacheScope {
  PUBLIC = 'PUBLIC',
  PRIVATE = 'PRIVATE',
}

export interface GQLCommentMentionedYouNotice extends GQLNotice {
  id: string
  unread: boolean
  createdAt: GQLDateTime
  actor: GQLUser
  target?: GQLComment
}

/**
 * This notice type contains info about current user's comment has new reply.
 */
export interface GQLCommentNewReplyNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * The user who replied current user's comment.
   */
  actors?: Array<GQLUser | null>

  /**
   * The comment that has new replied.
   */
  target?: GQLComment

  /**
   * The comment that replied to current user's existing comment.
   */
  reply?: GQLComment
}

/**
 * This notice type contains info about current user's comment has been pinned.
 */
export interface GQLCommentPinnedNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * The user who pinned current user's comment.
   */
  actor: GQLUser

  /**
   * The comment data.
   */
  target?: GQLComment
}

export interface GQLCostComplexity {
  min?: number
  max?: number
}

export interface GQLDownstreamArticleArchivedNotice extends GQLNotice {
  id: string
  unread: boolean
  createdAt: GQLDateTime
  downstream?: GQLArticle
  target?: GQLArticle
}

export interface GQLImportArticlesInput {
  platform?: string
  token?: string
}

export type GQLJSON = any

export type GQLNegativeFloat = any

export type GQLNegativeInt = any

export type GQLNonNegativeInt = any

export type GQLNonPositiveFloat = any

export type GQLNonPositiveInt = any

/**
 * The notice type contains info about official announcement.
 */
export interface GQLOfficialAnnouncementNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * The message content.
   */
  message: string

  /**
   * The link to a specific page if provided.
   */
  link?: GQLURL
}

/**
 * This notice type contains info about current user requested to payout.
 */
export interface GQLPaymentPayoutNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * The transaction data.
   */
  target?: GQLTransaction
}

/**
 * This notice type contains info about current user received a donation.
 */
export interface GQLPaymentReceivedDonationNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * The user who donated to current user.
   */
  actor: GQLUser

  /**
   * The transaction data.
   */
  target?: GQLTransaction
}

/**
 * Enums for user roles.
 */
export const enum GQLRole {
  vistor = 'vistor',
  user = 'user',
  admin = 'admin',
}

/**
 * This notice type contains info about current user's subscribed article has new comment.
 */
export interface GQLSubscribedArticleNewCommentNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * The user who made new comment to current user's subscribed article.
   */
  actors?: Array<GQLUser | null>

  /**
   * The article that current user has been subscribed.
   */
  target?: GQLArticle

  /**
   * The comment data.
   */
  comment?: GQLComment
}

export type GQLTime = any

export interface GQLUpstreamArticleArchivedNotice extends GQLNotice {
  id: string
  unread: boolean
  createdAt: GQLDateTime
  upstream?: GQLArticle
  target?: GQLArticle
}

export const enum GQLUserInfoFields {
  displayName = 'displayName',
  avatar = 'avatar',
  description = 'description',
  email = 'email',
  agreeOn = 'agreeOn',
}

/**
 * This notice type contains info about current user has new followers.
 */
export interface GQLUserNewFollowerNotice extends GQLNotice {
  /**
   * Unique ID of this notice.
   */
  id: string

  /**
   * The value determines if the notice is unread or not.
   */
  unread: boolean

  /**
   * Time of this notice was created.
   */
  createdAt: GQLDateTime

  /**
   * List of new followers.
   */
  actors?: Array<GQLUser | null>
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver
  UUID?: GraphQLScalarType
  Article?: GQLArticleTypeResolver
  Node?: {
    __resolveType: GQLNodeTypeResolver
  }

  DateTime?: GraphQLScalarType
  User?: GQLUserTypeResolver
  Liker?: GQLLikerTypeResolver
  NonNegativeFloat?: GraphQLScalarType
  URL?: GraphQLScalarType
  UserInfo?: GQLUserInfoTypeResolver
  Email?: GraphQLScalarType
  Badge?: GQLBadgeTypeResolver
  UserSettings?: GQLUserSettingsTypeResolver
  NotificationSetting?: GQLNotificationSettingTypeResolver
  Recommendation?: GQLRecommendationTypeResolver
  ArticleConnection?: GQLArticleConnectionTypeResolver
  Connection?: {
    __resolveType: GQLConnectionTypeResolver
  }

  PageInfo?: GQLPageInfoTypeResolver
  ArticleEdge?: GQLArticleEdgeTypeResolver
  ResponseConnection?: GQLResponseConnectionTypeResolver
  ResponseEdge?: GQLResponseEdgeTypeResolver
  Response?: {
    __resolveType: GQLResponseTypeResolver
  }

  Comment?: GQLCommentTypeResolver
  CommentConnection?: GQLCommentConnectionTypeResolver
  CommentEdge?: GQLCommentEdgeTypeResolver
  TagConnection?: GQLTagConnectionTypeResolver
  TagEdge?: GQLTagEdgeTypeResolver
  Tag?: GQLTagTypeResolver
  TagOSS?: GQLTagOSSTypeResolver
  UserConnection?: GQLUserConnectionTypeResolver
  UserEdge?: GQLUserEdgeTypeResolver
  DraftConnection?: GQLDraftConnectionTypeResolver
  DraftEdge?: GQLDraftEdgeTypeResolver
  Draft?: GQLDraftTypeResolver
  Asset?: GQLAssetTypeResolver
  UserActivity?: GQLUserActivityTypeResolver
  ReadHistoryConnection?: GQLReadHistoryConnectionTypeResolver
  ReadHistoryEdge?: GQLReadHistoryEdgeTypeResolver
  ReadHistory?: GQLReadHistoryTypeResolver
  RecentSearchConnection?: GQLRecentSearchConnectionTypeResolver
  RecentSearchEdge?: GQLRecentSearchEdgeTypeResolver
  AppreciationConnection?: GQLAppreciationConnectionTypeResolver
  AppreciationEdge?: GQLAppreciationEdgeTypeResolver
  Appreciation?: GQLAppreciationTypeResolver
  UserStatus?: GQLUserStatusTypeResolver
  LIKE?: GQLLIKETypeResolver
  UserOSS?: GQLUserOSSTypeResolver
  NoticeConnection?: GQLNoticeConnectionTypeResolver
  NoticeEdge?: GQLNoticeEdgeTypeResolver
  Notice?: {
    __resolveType: GQLNoticeTypeResolver
  }

  Wallet?: GQLWalletTypeResolver
  Balance?: GQLBalanceTypeResolver
  TransactionConnection?: GQLTransactionConnectionTypeResolver
  TransactionEdge?: GQLTransactionEdgeTypeResolver
  Transaction?: GQLTransactionTypeResolver
  TransactionTarget?: {
    __resolveType: GQLTransactionTargetTypeResolver
  }

  StripeAccount?: GQLStripeAccountTypeResolver
  ArticleTranslation?: GQLArticleTranslationTypeResolver
  ArticleOSS?: GQLArticleOSSTypeResolver
  SearchResultConnection?: GQLSearchResultConnectionTypeResolver
  SearchResultEdge?: GQLSearchResultEdgeTypeResolver
  Official?: GQLOfficialTypeResolver
  Category?: GQLCategoryTypeResolver
  Release?: GQLReleaseTypeResolver
  OfficialLinks?: GQLOfficialLinksTypeResolver
  Placements?: GQLPlacementsTypeResolver
  PlacementUnit?: GQLPlacementUnitTypeResolver
  Feature?: GQLFeatureTypeResolver
  OSS?: GQLOSSTypeResolver
  ReportConnection?: GQLReportConnectionTypeResolver
  ReportEdge?: GQLReportEdgeTypeResolver
  Report?: GQLReportTypeResolver
  OAuthClientConnection?: GQLOAuthClientConnectionTypeResolver
  OAuthClientEdge?: GQLOAuthClientEdgeTypeResolver
  OAuthClient?: GQLOAuthClientTypeResolver
  Date?: GraphQLScalarType
  SkippedListItemsConnection?: GQLSkippedListItemsConnectionTypeResolver
  SkippedListItemEdge?: GQLSkippedListItemEdgeTypeResolver
  SkippedListItem?: GQLSkippedListItemTypeResolver
  Mutation?: GQLMutationTypeResolver
  Upload?: GraphQLScalarType
  AuthResult?: GQLAuthResultTypeResolver
  PositiveInt?: GraphQLScalarType
  PositiveFloat?: GraphQLScalarType
  AddCreditResult?: GQLAddCreditResultTypeResolver
  PayToResult?: GQLPayToResultTypeResolver
  ConnectStripeAccountResult?: GQLConnectStripeAccountResultTypeResolver
  Subscription?: GQLSubscriptionTypeResolver
  ArticleMentionedYouNotice?: GQLArticleMentionedYouNoticeTypeResolver
  ArticleNewAppreciationNotice?: GQLArticleNewAppreciationNoticeTypeResolver
  ArticleNewCollectedNotice?: GQLArticleNewCollectedNoticeTypeResolver
  ArticleNewCommentNotice?: GQLArticleNewCommentNoticeTypeResolver
  ArticleNewDownstreamNotice?: GQLArticleNewDownstreamNoticeTypeResolver
  ArticleNewSubscriberNotice?: GQLArticleNewSubscriberNoticeTypeResolver
  ArticlePublishedNotice?: GQLArticlePublishedNoticeTypeResolver
  ArticleTagHasBeenAddedNotice?: GQLArticleTagHasBeenAddedNoticeTypeResolver
  ArticleTagHasBeenRemovedNotice?: GQLArticleTagHasBeenRemovedNoticeTypeResolver
  ArticleTagHasBeenUnselectedNotice?: GQLArticleTagHasBeenUnselectedNoticeTypeResolver
  CommentMentionedYouNotice?: GQLCommentMentionedYouNoticeTypeResolver
  CommentNewReplyNotice?: GQLCommentNewReplyNoticeTypeResolver
  CommentPinnedNotice?: GQLCommentPinnedNoticeTypeResolver
  DownstreamArticleArchivedNotice?: GQLDownstreamArticleArchivedNoticeTypeResolver
  JSON?: GraphQLScalarType
  NegativeFloat?: GraphQLScalarType
  NegativeInt?: GraphQLScalarType
  NonNegativeInt?: GraphQLScalarType
  NonPositiveFloat?: GraphQLScalarType
  NonPositiveInt?: GraphQLScalarType
  OfficialAnnouncementNotice?: GQLOfficialAnnouncementNoticeTypeResolver
  PaymentPayoutNotice?: GQLPaymentPayoutNoticeTypeResolver
  PaymentReceivedDonationNotice?: GQLPaymentReceivedDonationNoticeTypeResolver
  SubscribedArticleNewCommentNotice?: GQLSubscribedArticleNewCommentNoticeTypeResolver
  Time?: GraphQLScalarType
  UpstreamArticleArchivedNotice?: GQLUpstreamArticleArchivedNoticeTypeResolver
  UserNewFollowerNotice?: GQLUserNewFollowerNoticeTypeResolver
}
export interface GQLQueryTypeResolver<TParent = any> {
  article?: QueryToArticleResolver<TParent>
  node?: QueryToNodeResolver<TParent>
  nodes?: QueryToNodesResolver<TParent>
  frequentSearch?: QueryToFrequentSearchResolver<TParent>
  search?: QueryToSearchResolver<TParent>
  official?: QueryToOfficialResolver<TParent>
  oss?: QueryToOssResolver<TParent>
  viewer?: QueryToViewerResolver<TParent>
  user?: QueryToUserResolver<TParent>
  oauthClient?: QueryToOauthClientResolver<TParent>
}

export interface QueryToArticleArgs {
  input: GQLArticleInput
}
export interface QueryToArticleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToArticleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToNodeArgs {
  input: GQLNodeInput
}
export interface QueryToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToNodeArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToNodesArgs {
  input: GQLNodesInput
}
export interface QueryToNodesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToNodesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFrequentSearchArgs {
  input: GQLFrequentSearchInput
}
export interface QueryToFrequentSearchResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToFrequentSearchArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToSearchArgs {
  input: GQLSearchInput
}
export interface QueryToSearchResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToSearchArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToOfficialResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToOssResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToViewerResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToUserArgs {
  input: GQLUserInput
}
export interface QueryToUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToUserArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToOauthClientArgs {
  input: GQLOAuthClientInput
}
export interface QueryToOauthClientResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToOauthClientArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleTypeResolver<TParent = any> {
  id?: ArticleToIdResolver<TParent>
  topicScore?: ArticleToTopicScoreResolver<TParent>
  slug?: ArticleToSlugResolver<TParent>
  createdAt?: ArticleToCreatedAtResolver<TParent>
  state?: ArticleToStateResolver<TParent>
  public?: ArticleToPublicResolver<TParent>
  live?: ArticleToLiveResolver<TParent>
  author?: ArticleToAuthorResolver<TParent>
  title?: ArticleToTitleResolver<TParent>
  cover?: ArticleToCoverResolver<TParent>
  summary?: ArticleToSummaryResolver<TParent>
  tags?: ArticleToTagsResolver<TParent>
  wordCount?: ArticleToWordCountResolver<TParent>
  dataHash?: ArticleToDataHashResolver<TParent>
  mediaHash?: ArticleToMediaHashResolver<TParent>
  content?: ArticleToContentResolver<TParent>
  language?: ArticleToLanguageResolver<TParent>
  collectedBy?: ArticleToCollectedByResolver<TParent>
  collection?: ArticleToCollectionResolver<TParent>
  relatedArticles?: ArticleToRelatedArticlesResolver<TParent>
  appreciationsReceived?: ArticleToAppreciationsReceivedResolver<TParent>
  appreciationsReceivedTotal?: ArticleToAppreciationsReceivedTotalResolver<
    TParent
  >
  subscribers?: ArticleToSubscribersResolver<TParent>
  appreciateLimit?: ArticleToAppreciateLimitResolver<TParent>
  appreciateLeft?: ArticleToAppreciateLeftResolver<TParent>
  hasAppreciate?: ArticleToHasAppreciateResolver<TParent>
  canSuperLike?: ArticleToCanSuperLikeResolver<TParent>
  subscribed?: ArticleToSubscribedResolver<TParent>
  sticky?: ArticleToStickyResolver<TParent>
  translation?: ArticleToTranslationResolver<TParent>
  transactionsReceivedBy?: ArticleToTransactionsReceivedByResolver<TParent>
  oss?: ArticleToOssResolver<TParent>
  remark?: ArticleToRemarkResolver<TParent>
  commentCount?: ArticleToCommentCountResolver<TParent>
  pinCommentLimit?: ArticleToPinCommentLimitResolver<TParent>
  pinCommentLeft?: ArticleToPinCommentLeftResolver<TParent>
  pinnedComments?: ArticleToPinnedCommentsResolver<TParent>
  featuredComments?: ArticleToFeaturedCommentsResolver<TParent>
  comments?: ArticleToCommentsResolver<TParent>
  responseCount?: ArticleToResponseCountResolver<TParent>
  responses?: ArticleToResponsesResolver<TParent>
}

export interface ArticleToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToTopicScoreResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToSlugResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToStateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToPublicResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToLiveResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToAuthorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToTitleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToCoverResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToSummaryResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToTagsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToWordCountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToDataHashResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToMediaHashResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToContentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToLanguageResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToCollectedByArgs {
  input: GQLConnectionArgs
}
export interface ArticleToCollectedByResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: ArticleToCollectedByArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToCollectionArgs {
  input: GQLConnectionArgs
}
export interface ArticleToCollectionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: ArticleToCollectionArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToRelatedArticlesArgs {
  input: GQLConnectionArgs
}
export interface ArticleToRelatedArticlesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: ArticleToRelatedArticlesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToAppreciationsReceivedArgs {
  input: GQLConnectionArgs
}
export interface ArticleToAppreciationsReceivedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: ArticleToAppreciationsReceivedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToAppreciationsReceivedTotalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToSubscribersArgs {
  input: GQLConnectionArgs
}
export interface ArticleToSubscribersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: ArticleToSubscribersArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToAppreciateLimitResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToAppreciateLeftResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToHasAppreciateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToCanSuperLikeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToSubscribedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToStickyResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToTranslationArgs {
  input?: GQLTranslationArgs
}
export interface ArticleToTranslationResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: ArticleToTranslationArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToTransactionsReceivedByArgs {
  input: GQLTransactionsReceivedByArgs
}
export interface ArticleToTransactionsReceivedByResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: ArticleToTransactionsReceivedByArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToOssResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToRemarkResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToCommentCountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToPinCommentLimitResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToPinCommentLeftResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToPinnedCommentsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToFeaturedCommentsArgs {
  input: GQLFeaturedCommentsInput
}
export interface ArticleToFeaturedCommentsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: ArticleToFeaturedCommentsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToCommentsArgs {
  input: GQLCommentsInput
}
export interface ArticleToCommentsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: ArticleToCommentsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToResponseCountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleToResponsesArgs {
  input: GQLResponsesInput
}
export interface ArticleToResponsesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: ArticleToResponsesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLNodeTypeResolver<TParent = any> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo):
    | 'Article'
    | 'User'
    | 'Comment'
    | 'Tag'
    | 'Draft'
}
export interface GQLUserTypeResolver<TParent = any> {
  id?: UserToIdResolver<TParent>
  uuid?: UserToUuidResolver<TParent>
  userName?: UserToUserNameResolver<TParent>
  displayName?: UserToDisplayNameResolver<TParent>
  likerId?: UserToLikerIdResolver<TParent>
  liker?: UserToLikerResolver<TParent>
  avatar?: UserToAvatarResolver<TParent>
  info?: UserToInfoResolver<TParent>
  settings?: UserToSettingsResolver<TParent>
  recommendation?: UserToRecommendationResolver<TParent>
  articles?: UserToArticlesResolver<TParent>
  drafts?: UserToDraftsResolver<TParent>
  commentedArticles?: UserToCommentedArticlesResolver<TParent>
  subscriptions?: UserToSubscriptionsResolver<TParent>
  activity?: UserToActivityResolver<TParent>
  followers?: UserToFollowersResolver<TParent>
  followees?: UserToFolloweesResolver<TParent>
  isFollower?: UserToIsFollowerResolver<TParent>
  isFollowee?: UserToIsFolloweeResolver<TParent>
  blockList?: UserToBlockListResolver<TParent>
  isBlocking?: UserToIsBlockingResolver<TParent>
  isBlocked?: UserToIsBlockedResolver<TParent>
  status?: UserToStatusResolver<TParent>
  oss?: UserToOssResolver<TParent>
  remark?: UserToRemarkResolver<TParent>
  notices?: UserToNoticesResolver<TParent>
  wallet?: UserToWalletResolver<TParent>
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToUuidResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToUserNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToDisplayNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToLikerIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToLikerResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToAvatarResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToInfoResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToSettingsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToRecommendationResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToArticlesArgs {
  input: GQLConnectionArgs
}
export interface UserToArticlesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToArticlesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToDraftsArgs {
  input: GQLConnectionArgs
}
export interface UserToDraftsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToDraftsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToCommentedArticlesArgs {
  input: GQLConnectionArgs
}
export interface UserToCommentedArticlesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToCommentedArticlesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToSubscriptionsArgs {
  input: GQLConnectionArgs
}
export interface UserToSubscriptionsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToSubscriptionsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToActivityResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToFollowersArgs {
  input: GQLConnectionArgs
}
export interface UserToFollowersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToFollowersArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToFolloweesArgs {
  input: GQLConnectionArgs
}
export interface UserToFolloweesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToFolloweesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToIsFollowerResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToIsFolloweeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToBlockListArgs {
  input: GQLConnectionArgs
}
export interface UserToBlockListResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToBlockListArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToIsBlockingResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToIsBlockedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToStatusResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToOssResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToRemarkResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToNoticesArgs {
  input: GQLConnectionArgs
}
export interface UserToNoticesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserToNoticesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserToWalletResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLLikerTypeResolver<TParent = any> {
  likerId?: LikerToLikerIdResolver<TParent>
  civicLiker?: LikerToCivicLikerResolver<TParent>
  total?: LikerToTotalResolver<TParent>
  rateUSD?: LikerToRateUSDResolver<TParent>
}

export interface LikerToLikerIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LikerToCivicLikerResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LikerToTotalResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LikerToRateUSDResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserInfoTypeResolver<TParent = any> {
  createdAt?: UserInfoToCreatedAtResolver<TParent>
  userNameEditable?: UserInfoToUserNameEditableResolver<TParent>
  description?: UserInfoToDescriptionResolver<TParent>
  email?: UserInfoToEmailResolver<TParent>
  badges?: UserInfoToBadgesResolver<TParent>
  agreeOn?: UserInfoToAgreeOnResolver<TParent>
  profileCover?: UserInfoToProfileCoverResolver<TParent>
  group?: UserInfoToGroupResolver<TParent>
}

export interface UserInfoToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserInfoToUserNameEditableResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserInfoToDescriptionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserInfoToEmailResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserInfoToBadgesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserInfoToAgreeOnResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserInfoToProfileCoverResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserInfoToGroupResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLBadgeTypeResolver<TParent = any> {
  type?: BadgeToTypeResolver<TParent>
}

export interface BadgeToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserSettingsTypeResolver<TParent = any> {
  language?: UserSettingsToLanguageResolver<TParent>
  notification?: UserSettingsToNotificationResolver<TParent>
  oauthProviders?: UserSettingsToOauthProvidersResolver<TParent>
}

export interface UserSettingsToLanguageResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserSettingsToNotificationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserSettingsToOauthProvidersResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLNotificationSettingTypeResolver<TParent = any> {
  enable?: NotificationSettingToEnableResolver<TParent>
  email?: NotificationSettingToEmailResolver<TParent>
  mention?: NotificationSettingToMentionResolver<TParent>
  follow?: NotificationSettingToFollowResolver<TParent>
  comment?: NotificationSettingToCommentResolver<TParent>
  appreciation?: NotificationSettingToAppreciationResolver<TParent>
  articleSubscription?: NotificationSettingToArticleSubscriptionResolver<
    TParent
  >
  commentSubscribed?: NotificationSettingToCommentSubscribedResolver<TParent>
  downstream?: NotificationSettingToDownstreamResolver<TParent>
  commentPinned?: NotificationSettingToCommentPinnedResolver<TParent>
  commentVoted?: NotificationSettingToCommentVotedResolver<TParent>
  officialNotice?: NotificationSettingToOfficialNoticeResolver<TParent>
  reportFeedback?: NotificationSettingToReportFeedbackResolver<TParent>
}

export interface NotificationSettingToEnableResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToEmailResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToMentionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToFollowResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToCommentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToAppreciationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToArticleSubscriptionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToCommentSubscribedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToDownstreamResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToCommentPinnedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToCommentVotedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToOfficialNoticeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NotificationSettingToReportFeedbackResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLRecommendationTypeResolver<TParent = any> {
  followeeArticles?: RecommendationToFolloweeArticlesResolver<TParent>
  followeeWorks?: RecommendationToFolloweeWorksResolver<TParent>
  newest?: RecommendationToNewestResolver<TParent>
  hottest?: RecommendationToHottestResolver<TParent>
  icymi?: RecommendationToIcymiResolver<TParent>
  valued?: RecommendationToValuedResolver<TParent>
  tags?: RecommendationToTagsResolver<TParent>
  topics?: RecommendationToTopicsResolver<TParent>
  authors?: RecommendationToAuthorsResolver<TParent>
  recommendArticles?: RecommendationToRecommendArticlesResolver<TParent>
}

export interface RecommendationToFolloweeArticlesArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToFolloweeArticlesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: RecommendationToFolloweeArticlesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToFolloweeWorksArgs {
  input: GQLResponsesInput
}
export interface RecommendationToFolloweeWorksResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: RecommendationToFolloweeWorksArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToNewestArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToNewestResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: RecommendationToNewestArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToHottestArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToHottestResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: RecommendationToHottestArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToIcymiArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToIcymiResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: RecommendationToIcymiArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToValuedArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToValuedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: RecommendationToValuedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToTagsArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToTagsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: RecommendationToTagsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToTopicsArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToTopicsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: RecommendationToTopicsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToAuthorsArgs {
  input: GQLAuthorsInput
}
export interface RecommendationToAuthorsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: RecommendationToAuthorsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecommendationToRecommendArticlesArgs {
  input: GQLConnectionArgs
}
export interface RecommendationToRecommendArticlesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: RecommendationToRecommendArticlesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleConnectionTypeResolver<TParent = any> {
  totalCount?: ArticleConnectionToTotalCountResolver<TParent>
  pageInfo?: ArticleConnectionToPageInfoResolver<TParent>
  edges?: ArticleConnectionToEdgesResolver<TParent>
}

export interface ArticleConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLConnectionTypeResolver<TParent = any> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo):
    | 'ArticleConnection'
    | 'ResponseConnection'
    | 'CommentConnection'
    | 'TagConnection'
    | 'UserConnection'
    | 'DraftConnection'
    | 'ReadHistoryConnection'
    | 'RecentSearchConnection'
    | 'AppreciationConnection'
    | 'NoticeConnection'
    | 'TransactionConnection'
    | 'SearchResultConnection'
    | 'ReportConnection'
    | 'OAuthClientConnection'
    | 'SkippedListItemsConnection'
}
export interface GQLPageInfoTypeResolver<TParent = any> {
  startCursor?: PageInfoToStartCursorResolver<TParent>
  endCursor?: PageInfoToEndCursorResolver<TParent>
  hasNextPage?: PageInfoToHasNextPageResolver<TParent>
  hasPreviousPage?: PageInfoToHasPreviousPageResolver<TParent>
}

export interface PageInfoToStartCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PageInfoToEndCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PageInfoToHasNextPageResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PageInfoToHasPreviousPageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleEdgeTypeResolver<TParent = any> {
  cursor?: ArticleEdgeToCursorResolver<TParent>
  node?: ArticleEdgeToNodeResolver<TParent>
}

export interface ArticleEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLResponseConnectionTypeResolver<TParent = any> {
  totalCount?: ResponseConnectionToTotalCountResolver<TParent>
  pageInfo?: ResponseConnectionToPageInfoResolver<TParent>
  edges?: ResponseConnectionToEdgesResolver<TParent>
}

export interface ResponseConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ResponseConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ResponseConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLResponseEdgeTypeResolver<TParent = any> {
  cursor?: ResponseEdgeToCursorResolver<TParent>
  node?: ResponseEdgeToNodeResolver<TParent>
}

export interface ResponseEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ResponseEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLResponseTypeResolver<TParent = any> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo):
    | 'Article'
    | 'Comment'
}
export interface GQLCommentTypeResolver<TParent = any> {
  id?: CommentToIdResolver<TParent>
  state?: CommentToStateResolver<TParent>
  createdAt?: CommentToCreatedAtResolver<TParent>
  article?: CommentToArticleResolver<TParent>
  content?: CommentToContentResolver<TParent>
  author?: CommentToAuthorResolver<TParent>
  pinned?: CommentToPinnedResolver<TParent>
  upvotes?: CommentToUpvotesResolver<TParent>
  downvotes?: CommentToDownvotesResolver<TParent>
  myVote?: CommentToMyVoteResolver<TParent>
  comments?: CommentToCommentsResolver<TParent>
  parentComment?: CommentToParentCommentResolver<TParent>
  replyTo?: CommentToReplyToResolver<TParent>
  remark?: CommentToRemarkResolver<TParent>
}

export interface CommentToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToStateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToArticleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToContentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToAuthorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToPinnedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToUpvotesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToDownvotesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToMyVoteResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToCommentsArgs {
  input: GQLCommentCommentsInput
}
export interface CommentToCommentsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: CommentToCommentsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToParentCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToReplyToResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentToRemarkResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCommentConnectionTypeResolver<TParent = any> {
  totalCount?: CommentConnectionToTotalCountResolver<TParent>
  pageInfo?: CommentConnectionToPageInfoResolver<TParent>
  edges?: CommentConnectionToEdgesResolver<TParent>
}

export interface CommentConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCommentEdgeTypeResolver<TParent = any> {
  cursor?: CommentEdgeToCursorResolver<TParent>
  node?: CommentEdgeToNodeResolver<TParent>
}

export interface CommentEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTagConnectionTypeResolver<TParent = any> {
  totalCount?: TagConnectionToTotalCountResolver<TParent>
  pageInfo?: TagConnectionToPageInfoResolver<TParent>
  edges?: TagConnectionToEdgesResolver<TParent>
}

export interface TagConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagConnectionToEdgesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTagEdgeTypeResolver<TParent = any> {
  cursor?: TagEdgeToCursorResolver<TParent>
  node?: TagEdgeToNodeResolver<TParent>
}

export interface TagEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTagTypeResolver<TParent = any> {
  id?: TagToIdResolver<TParent>
  content?: TagToContentResolver<TParent>
  articles?: TagToArticlesResolver<TParent>
  selected?: TagToSelectedResolver<TParent>
  createdAt?: TagToCreatedAtResolver<TParent>
  cover?: TagToCoverResolver<TParent>
  description?: TagToDescriptionResolver<TParent>
  editors?: TagToEditorsResolver<TParent>
  creator?: TagToCreatorResolver<TParent>
  oss?: TagToOssResolver<TParent>
  remark?: TagToRemarkResolver<TParent>
  deleted?: TagToDeletedResolver<TParent>
}

export interface TagToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToContentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToArticlesArgs {
  input: GQLTagArticlesInput
}
export interface TagToArticlesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: TagToArticlesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToSelectedArgs {
  input: GQLTagSelectedInput
}
export interface TagToSelectedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: TagToSelectedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToCoverResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToDescriptionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToEditorsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToCreatorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToOssResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToRemarkResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagToDeletedResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTagOSSTypeResolver<TParent = any> {
  boost?: TagOSSToBoostResolver<TParent>
  score?: TagOSSToScoreResolver<TParent>
}

export interface TagOSSToBoostResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TagOSSToScoreResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserConnectionTypeResolver<TParent = any> {
  totalCount?: UserConnectionToTotalCountResolver<TParent>
  pageInfo?: UserConnectionToPageInfoResolver<TParent>
  edges?: UserConnectionToEdgesResolver<TParent>
}

export interface UserConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserConnectionToEdgesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserEdgeTypeResolver<TParent = any> {
  cursor?: UserEdgeToCursorResolver<TParent>
  node?: UserEdgeToNodeResolver<TParent>
}

export interface UserEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLDraftConnectionTypeResolver<TParent = any> {
  totalCount?: DraftConnectionToTotalCountResolver<TParent>
  pageInfo?: DraftConnectionToPageInfoResolver<TParent>
  edges?: DraftConnectionToEdgesResolver<TParent>
}

export interface DraftConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftConnectionToEdgesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLDraftEdgeTypeResolver<TParent = any> {
  cursor?: DraftEdgeToCursorResolver<TParent>
  node?: DraftEdgeToNodeResolver<TParent>
}

export interface DraftEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLDraftTypeResolver<TParent = any> {
  id?: DraftToIdResolver<TParent>
  collection?: DraftToCollectionResolver<TParent>
  title?: DraftToTitleResolver<TParent>
  slug?: DraftToSlugResolver<TParent>
  summary?: DraftToSummaryResolver<TParent>
  content?: DraftToContentResolver<TParent>
  scheduledAt?: DraftToScheduledAtResolver<TParent>
  createdAt?: DraftToCreatedAtResolver<TParent>
  updatedAt?: DraftToUpdatedAtResolver<TParent>
  wordCount?: DraftToWordCountResolver<TParent>
  tags?: DraftToTagsResolver<TParent>
  cover?: DraftToCoverResolver<TParent>
  publishState?: DraftToPublishStateResolver<TParent>
  assets?: DraftToAssetsResolver<TParent>
  article?: DraftToArticleResolver<TParent>
}

export interface DraftToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToCollectionArgs {
  input: GQLConnectionArgs
}
export interface DraftToCollectionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: DraftToCollectionArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToTitleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToSlugResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToSummaryResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToContentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToScheduledAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToUpdatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToWordCountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToTagsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToCoverResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToPublishStateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToAssetsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DraftToArticleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLAssetTypeResolver<TParent = any> {
  id?: AssetToIdResolver<TParent>
  type?: AssetToTypeResolver<TParent>
  path?: AssetToPathResolver<TParent>
  createdAt?: AssetToCreatedAtResolver<TParent>
}

export interface AssetToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AssetToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AssetToPathResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AssetToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserActivityTypeResolver<TParent = any> {
  history?: UserActivityToHistoryResolver<TParent>
  recentSearches?: UserActivityToRecentSearchesResolver<TParent>
  appreciationsSent?: UserActivityToAppreciationsSentResolver<TParent>
  appreciationsSentTotal?: UserActivityToAppreciationsSentTotalResolver<TParent>
  appreciationsReceived?: UserActivityToAppreciationsReceivedResolver<TParent>
  appreciationsReceivedTotal?: UserActivityToAppreciationsReceivedTotalResolver<
    TParent
  >
}

export interface UserActivityToHistoryArgs {
  input: GQLConnectionArgs
}
export interface UserActivityToHistoryResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: UserActivityToHistoryArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserActivityToRecentSearchesArgs {
  input: GQLConnectionArgs
}
export interface UserActivityToRecentSearchesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserActivityToRecentSearchesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserActivityToAppreciationsSentArgs {
  input: GQLConnectionArgs
}
export interface UserActivityToAppreciationsSentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserActivityToAppreciationsSentArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserActivityToAppreciationsSentTotalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserActivityToAppreciationsReceivedArgs {
  input: GQLConnectionArgs
}
export interface UserActivityToAppreciationsReceivedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: UserActivityToAppreciationsReceivedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserActivityToAppreciationsReceivedTotalResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLReadHistoryConnectionTypeResolver<TParent = any> {
  totalCount?: ReadHistoryConnectionToTotalCountResolver<TParent>
  pageInfo?: ReadHistoryConnectionToPageInfoResolver<TParent>
  edges?: ReadHistoryConnectionToEdgesResolver<TParent>
}

export interface ReadHistoryConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReadHistoryConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReadHistoryConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLReadHistoryEdgeTypeResolver<TParent = any> {
  cursor?: ReadHistoryEdgeToCursorResolver<TParent>
  node?: ReadHistoryEdgeToNodeResolver<TParent>
}

export interface ReadHistoryEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReadHistoryEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLReadHistoryTypeResolver<TParent = any> {
  article?: ReadHistoryToArticleResolver<TParent>
  readAt?: ReadHistoryToReadAtResolver<TParent>
}

export interface ReadHistoryToArticleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReadHistoryToReadAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLRecentSearchConnectionTypeResolver<TParent = any> {
  totalCount?: RecentSearchConnectionToTotalCountResolver<TParent>
  pageInfo?: RecentSearchConnectionToPageInfoResolver<TParent>
  edges?: RecentSearchConnectionToEdgesResolver<TParent>
}

export interface RecentSearchConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecentSearchConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecentSearchConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLRecentSearchEdgeTypeResolver<TParent = any> {
  cursor?: RecentSearchEdgeToCursorResolver<TParent>
  node?: RecentSearchEdgeToNodeResolver<TParent>
}

export interface RecentSearchEdgeToCursorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface RecentSearchEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLAppreciationConnectionTypeResolver<TParent = any> {
  totalCount?: AppreciationConnectionToTotalCountResolver<TParent>
  pageInfo?: AppreciationConnectionToPageInfoResolver<TParent>
  edges?: AppreciationConnectionToEdgesResolver<TParent>
}

export interface AppreciationConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AppreciationConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AppreciationConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLAppreciationEdgeTypeResolver<TParent = any> {
  cursor?: AppreciationEdgeToCursorResolver<TParent>
  node?: AppreciationEdgeToNodeResolver<TParent>
}

export interface AppreciationEdgeToCursorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AppreciationEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLAppreciationTypeResolver<TParent = any> {
  amount?: AppreciationToAmountResolver<TParent>
  purpose?: AppreciationToPurposeResolver<TParent>
  content?: AppreciationToContentResolver<TParent>
  createdAt?: AppreciationToCreatedAtResolver<TParent>
  recipient?: AppreciationToRecipientResolver<TParent>
  sender?: AppreciationToSenderResolver<TParent>
  target?: AppreciationToTargetResolver<TParent>
}

export interface AppreciationToAmountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AppreciationToPurposeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AppreciationToContentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AppreciationToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AppreciationToRecipientResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AppreciationToSenderResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AppreciationToTargetResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserStatusTypeResolver<TParent = any> {
  state?: UserStatusToStateResolver<TParent>
  role?: UserStatusToRoleResolver<TParent>
  LIKE?: UserStatusToLIKEResolver<TParent>
  articleCount?: UserStatusToArticleCountResolver<TParent>
  commentCount?: UserStatusToCommentCountResolver<TParent>
  unreadNoticeCount?: UserStatusToUnreadNoticeCountResolver<TParent>
  unreadFolloweeArticles?: UserStatusToUnreadFolloweeArticlesResolver<TParent>
  unreadResponseInfoPopUp?: UserStatusToUnreadResponseInfoPopUpResolver<TParent>
  hasPaymentPassword?: UserStatusToHasPaymentPasswordResolver<TParent>
  totalWordCount?: UserStatusToTotalWordCountResolver<TParent>
}

export interface UserStatusToStateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserStatusToRoleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserStatusToLIKEResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserStatusToArticleCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserStatusToCommentCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserStatusToUnreadNoticeCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserStatusToUnreadFolloweeArticlesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserStatusToUnreadResponseInfoPopUpResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserStatusToHasPaymentPasswordResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserStatusToTotalWordCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLLIKETypeResolver<TParent = any> {
  total?: LIKEToTotalResolver<TParent>
  rateUSD?: LIKEToRateUSDResolver<TParent>
}

export interface LIKEToTotalResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface LIKEToRateUSDResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserOSSTypeResolver<TParent = any> {
  boost?: UserOSSToBoostResolver<TParent>
  score?: UserOSSToScoreResolver<TParent>
}

export interface UserOSSToBoostResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserOSSToScoreResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLNoticeConnectionTypeResolver<TParent = any> {
  totalCount?: NoticeConnectionToTotalCountResolver<TParent>
  pageInfo?: NoticeConnectionToPageInfoResolver<TParent>
  edges?: NoticeConnectionToEdgesResolver<TParent>
}

export interface NoticeConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NoticeConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NoticeConnectionToEdgesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLNoticeEdgeTypeResolver<TParent = any> {
  cursor?: NoticeEdgeToCursorResolver<TParent>
  node?: NoticeEdgeToNodeResolver<TParent>
}

export interface NoticeEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface NoticeEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLNoticeTypeResolver<TParent = any> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo):
    | 'ArticleMentionedYouNotice'
    | 'ArticleNewAppreciationNotice'
    | 'ArticleNewCollectedNotice'
    | 'ArticleNewCommentNotice'
    | 'ArticleNewDownstreamNotice'
    | 'ArticleNewSubscriberNotice'
    | 'ArticlePublishedNotice'
    | 'ArticleTagHasBeenAddedNotice'
    | 'ArticleTagHasBeenRemovedNotice'
    | 'ArticleTagHasBeenUnselectedNotice'
    | 'CommentMentionedYouNotice'
    | 'CommentNewReplyNotice'
    | 'CommentPinnedNotice'
    | 'DownstreamArticleArchivedNotice'
    | 'OfficialAnnouncementNotice'
    | 'PaymentPayoutNotice'
    | 'PaymentReceivedDonationNotice'
    | 'SubscribedArticleNewCommentNotice'
    | 'UpstreamArticleArchivedNotice'
    | 'UserNewFollowerNotice'
}
export interface GQLWalletTypeResolver<TParent = any> {
  balance?: WalletToBalanceResolver<TParent>
  transactions?: WalletToTransactionsResolver<TParent>
  stripeAccount?: WalletToStripeAccountResolver<TParent>
}

export interface WalletToBalanceResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface WalletToTransactionsArgs {
  input: GQLTransactionsArgs
}
export interface WalletToTransactionsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: WalletToTransactionsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface WalletToStripeAccountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLBalanceTypeResolver<TParent = any> {
  HKD?: BalanceToHKDResolver<TParent>
}

export interface BalanceToHKDResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTransactionConnectionTypeResolver<TParent = any> {
  totalCount?: TransactionConnectionToTotalCountResolver<TParent>
  pageInfo?: TransactionConnectionToPageInfoResolver<TParent>
  edges?: TransactionConnectionToEdgesResolver<TParent>
}

export interface TransactionConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTransactionEdgeTypeResolver<TParent = any> {
  cursor?: TransactionEdgeToCursorResolver<TParent>
  node?: TransactionEdgeToNodeResolver<TParent>
}

export interface TransactionEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTransactionTypeResolver<TParent = any> {
  id?: TransactionToIdResolver<TParent>
  state?: TransactionToStateResolver<TParent>
  purpose?: TransactionToPurposeResolver<TParent>
  amount?: TransactionToAmountResolver<TParent>
  fee?: TransactionToFeeResolver<TParent>
  currency?: TransactionToCurrencyResolver<TParent>
  createdAt?: TransactionToCreatedAtResolver<TParent>
  recipient?: TransactionToRecipientResolver<TParent>
  sender?: TransactionToSenderResolver<TParent>
  target?: TransactionToTargetResolver<TParent>
  message?: TransactionToMessageResolver<TParent>
}

export interface TransactionToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionToStateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionToPurposeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionToAmountResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionToFeeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionToCurrencyResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionToRecipientResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionToSenderResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionToTargetResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface TransactionToMessageResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLTransactionTargetTypeResolver<TParent = any> {
  (parent: TParent, context: Context, info: GraphQLResolveInfo):
    | 'Article'
    | 'Transaction'
}
export interface GQLStripeAccountTypeResolver<TParent = any> {
  id?: StripeAccountToIdResolver<TParent>
  loginUrl?: StripeAccountToLoginUrlResolver<TParent>
}

export interface StripeAccountToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface StripeAccountToLoginUrlResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleTranslationTypeResolver<TParent = any> {
  originalLanguage?: ArticleTranslationToOriginalLanguageResolver<TParent>
  title?: ArticleTranslationToTitleResolver<TParent>
  content?: ArticleTranslationToContentResolver<TParent>
}

export interface ArticleTranslationToOriginalLanguageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleTranslationToTitleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleTranslationToContentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleOSSTypeResolver<TParent = any> {
  boost?: ArticleOSSToBoostResolver<TParent>
  score?: ArticleOSSToScoreResolver<TParent>
  inRecommendIcymi?: ArticleOSSToInRecommendIcymiResolver<TParent>
  inRecommendHottest?: ArticleOSSToInRecommendHottestResolver<TParent>
  inRecommendNewest?: ArticleOSSToInRecommendNewestResolver<TParent>
}

export interface ArticleOSSToBoostResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleOSSToScoreResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleOSSToInRecommendIcymiResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleOSSToInRecommendHottestResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleOSSToInRecommendNewestResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLSearchResultConnectionTypeResolver<TParent = any> {
  totalCount?: SearchResultConnectionToTotalCountResolver<TParent>
  pageInfo?: SearchResultConnectionToPageInfoResolver<TParent>
  edges?: SearchResultConnectionToEdgesResolver<TParent>
}

export interface SearchResultConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SearchResultConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SearchResultConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLSearchResultEdgeTypeResolver<TParent = any> {
  cursor?: SearchResultEdgeToCursorResolver<TParent>
  node?: SearchResultEdgeToNodeResolver<TParent>
}

export interface SearchResultEdgeToCursorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SearchResultEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLOfficialTypeResolver<TParent = any> {
  reportCategory?: OfficialToReportCategoryResolver<TParent>
  feedbackCategory?: OfficialToFeedbackCategoryResolver<TParent>
  releases?: OfficialToReleasesResolver<TParent>
  links?: OfficialToLinksResolver<TParent>
  placements?: OfficialToPlacementsResolver<TParent>
  ipfsAddress?: OfficialToIpfsAddressResolver<TParent>
  features?: OfficialToFeaturesResolver<TParent>
}

export interface OfficialToReportCategoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OfficialToFeedbackCategoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OfficialToReleasesArgs {
  input: GQLReleasesInput
}
export interface OfficialToReleasesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: OfficialToReleasesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OfficialToLinksResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OfficialToPlacementsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OfficialToIpfsAddressResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OfficialToFeaturesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCategoryTypeResolver<TParent = any> {
  id?: CategoryToIdResolver<TParent>
  name?: CategoryToNameResolver<TParent>
}

export interface CategoryToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CategoryToNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLReleaseTypeResolver<TParent = any> {
  title?: ReleaseToTitleResolver<TParent>
  description?: ReleaseToDescriptionResolver<TParent>
  cover?: ReleaseToCoverResolver<TParent>
  link?: ReleaseToLinkResolver<TParent>
  platform?: ReleaseToPlatformResolver<TParent>
  channel?: ReleaseToChannelResolver<TParent>
  version?: ReleaseToVersionResolver<TParent>
  latest?: ReleaseToLatestResolver<TParent>
  forceUpdate?: ReleaseToForceUpdateResolver<TParent>
  releasedAt?: ReleaseToReleasedAtResolver<TParent>
}

export interface ReleaseToTitleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReleaseToDescriptionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReleaseToCoverResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReleaseToLinkResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReleaseToPlatformResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReleaseToChannelResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReleaseToVersionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReleaseToLatestResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReleaseToForceUpdateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReleaseToReleasedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLOfficialLinksTypeResolver<TParent = any> {
  beginnerGuide?: OfficialLinksToBeginnerGuideResolver<TParent>
  userGuide?: OfficialLinksToUserGuideResolver<TParent>
  about?: OfficialLinksToAboutResolver<TParent>
  faq?: OfficialLinksToFaqResolver<TParent>
  tos?: OfficialLinksToTosResolver<TParent>
}

export interface OfficialLinksToBeginnerGuideResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OfficialLinksToUserGuideResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OfficialLinksToAboutResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OfficialLinksToFaqResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OfficialLinksToTosResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLPlacementsTypeResolver<TParent = any> {
  webAsideTop?: PlacementsToWebAsideTopResolver<TParent>
  appSplash?: PlacementsToAppSplashResolver<TParent>
  appInStreamTop?: PlacementsToAppInStreamTopResolver<TParent>
  appInStreamMiddle?: PlacementsToAppInStreamMiddleResolver<TParent>
  appInStreamBottom?: PlacementsToAppInStreamBottomResolver<TParent>
  appInvitationTop?: PlacementsToAppInvitationTopResolver<TParent>
}

export interface PlacementsToWebAsideTopResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PlacementsToAppSplashResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PlacementsToAppInStreamTopResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PlacementsToAppInStreamMiddleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PlacementsToAppInStreamBottomResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PlacementsToAppInvitationTopResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLPlacementUnitTypeResolver<TParent = any> {
  image?: PlacementUnitToImageResolver<TParent>
  link?: PlacementUnitToLinkResolver<TParent>
  adLabel?: PlacementUnitToAdLabelResolver<TParent>
}

export interface PlacementUnitToImageResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PlacementUnitToLinkResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PlacementUnitToAdLabelResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLFeatureTypeResolver<TParent = any> {
  name?: FeatureToNameResolver<TParent>
  enabled?: FeatureToEnabledResolver<TParent>
}

export interface FeatureToNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface FeatureToEnabledResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLOSSTypeResolver<TParent = any> {
  users?: OSSToUsersResolver<TParent>
  comments?: OSSToCommentsResolver<TParent>
  articles?: OSSToArticlesResolver<TParent>
  tags?: OSSToTagsResolver<TParent>
  reports?: OSSToReportsResolver<TParent>
  report?: OSSToReportResolver<TParent>
  oauthClients?: OSSToOauthClientsResolver<TParent>
  skippedListItems?: OSSToSkippedListItemsResolver<TParent>
}

export interface OSSToUsersArgs {
  input: GQLConnectionArgs
}
export interface OSSToUsersResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: OSSToUsersArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OSSToCommentsArgs {
  input: GQLConnectionArgs
}
export interface OSSToCommentsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: OSSToCommentsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OSSToArticlesArgs {
  input: GQLOSSArticlesInput
}
export interface OSSToArticlesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: OSSToArticlesArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OSSToTagsArgs {
  input: GQLTagsInput
}
export interface OSSToTagsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: OSSToTagsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OSSToReportsArgs {
  input: GQLReportsInput
}
export interface OSSToReportsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: OSSToReportsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OSSToReportArgs {
  input: GQLReportInput
}
export interface OSSToReportResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: OSSToReportArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OSSToOauthClientsArgs {
  input: GQLConnectionArgs
}
export interface OSSToOauthClientsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: OSSToOauthClientsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OSSToSkippedListItemsArgs {
  input: GQLSkippedListItemsInput
}
export interface OSSToSkippedListItemsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: OSSToSkippedListItemsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLReportConnectionTypeResolver<TParent = any> {
  totalCount?: ReportConnectionToTotalCountResolver<TParent>
  pageInfo?: ReportConnectionToPageInfoResolver<TParent>
  edges?: ReportConnectionToEdgesResolver<TParent>
}

export interface ReportConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReportConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReportConnectionToEdgesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLReportEdgeTypeResolver<TParent = any> {
  cursor?: ReportEdgeToCursorResolver<TParent>
  node?: ReportEdgeToNodeResolver<TParent>
}

export interface ReportEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReportEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLReportTypeResolver<TParent = any> {
  id?: ReportToIdResolver<TParent>
  user?: ReportToUserResolver<TParent>
  article?: ReportToArticleResolver<TParent>
  comment?: ReportToCommentResolver<TParent>
  category?: ReportToCategoryResolver<TParent>
  description?: ReportToDescriptionResolver<TParent>
  assets?: ReportToAssetsResolver<TParent>
  contact?: ReportToContactResolver<TParent>
  createdAt?: ReportToCreatedAtResolver<TParent>
  remark?: ReportToRemarkResolver<TParent>
}

export interface ReportToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReportToUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReportToArticleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReportToCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReportToCategoryResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReportToDescriptionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReportToAssetsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReportToContactResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReportToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ReportToRemarkResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLOAuthClientConnectionTypeResolver<TParent = any> {
  totalCount?: OAuthClientConnectionToTotalCountResolver<TParent>
  pageInfo?: OAuthClientConnectionToPageInfoResolver<TParent>
  edges?: OAuthClientConnectionToEdgesResolver<TParent>
}

export interface OAuthClientConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLOAuthClientEdgeTypeResolver<TParent = any> {
  cursor?: OAuthClientEdgeToCursorResolver<TParent>
  node?: OAuthClientEdgeToNodeResolver<TParent>
}

export interface OAuthClientEdgeToCursorResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientEdgeToNodeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLOAuthClientTypeResolver<TParent = any> {
  id?: OAuthClientToIdResolver<TParent>
  name?: OAuthClientToNameResolver<TParent>
  description?: OAuthClientToDescriptionResolver<TParent>
  website?: OAuthClientToWebsiteResolver<TParent>
  scope?: OAuthClientToScopeResolver<TParent>
  avatar?: OAuthClientToAvatarResolver<TParent>
  secret?: OAuthClientToSecretResolver<TParent>
  redirectURIs?: OAuthClientToRedirectURIsResolver<TParent>
  grantTypes?: OAuthClientToGrantTypesResolver<TParent>
  user?: OAuthClientToUserResolver<TParent>
  createdAt?: OAuthClientToCreatedAtResolver<TParent>
}

export interface OAuthClientToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientToNameResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientToDescriptionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientToWebsiteResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientToScopeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientToAvatarResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientToSecretResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientToRedirectURIsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientToGrantTypesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientToUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OAuthClientToCreatedAtResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLSkippedListItemsConnectionTypeResolver<TParent = any> {
  totalCount?: SkippedListItemsConnectionToTotalCountResolver<TParent>
  pageInfo?: SkippedListItemsConnectionToPageInfoResolver<TParent>
  edges?: SkippedListItemsConnectionToEdgesResolver<TParent>
}

export interface SkippedListItemsConnectionToTotalCountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SkippedListItemsConnectionToPageInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SkippedListItemsConnectionToEdgesResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLSkippedListItemEdgeTypeResolver<TParent = any> {
  cursor?: SkippedListItemEdgeToCursorResolver<TParent>
  node?: SkippedListItemEdgeToNodeResolver<TParent>
}

export interface SkippedListItemEdgeToCursorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SkippedListItemEdgeToNodeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLSkippedListItemTypeResolver<TParent = any> {
  id?: SkippedListItemToIdResolver<TParent>
  uuid?: SkippedListItemToUuidResolver<TParent>
  type?: SkippedListItemToTypeResolver<TParent>
  value?: SkippedListItemToValueResolver<TParent>
  archived?: SkippedListItemToArchivedResolver<TParent>
  createdAt?: SkippedListItemToCreatedAtResolver<TParent>
  updatedAt?: SkippedListItemToUpdatedAtResolver<TParent>
}

export interface SkippedListItemToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SkippedListItemToUuidResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SkippedListItemToTypeResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SkippedListItemToValueResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SkippedListItemToArchivedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SkippedListItemToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SkippedListItemToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLMutationTypeResolver<TParent = any> {
  publishArticle?: MutationToPublishArticleResolver<TParent>
  archiveArticle?: MutationToArchiveArticleResolver<TParent>
  reportArticle?: MutationToReportArticleResolver<TParent>
  toggleSubscribeArticle?: MutationToToggleSubscribeArticleResolver<TParent>
  appreciateArticle?: MutationToAppreciateArticleResolver<TParent>
  readArticle?: MutationToReadArticleResolver<TParent>
  recallPublish?: MutationToRecallPublishResolver<TParent>
  setCollection?: MutationToSetCollectionResolver<TParent>
  updateArticleInfo?: MutationToUpdateArticleInfoResolver<TParent>
  putTag?: MutationToPutTagResolver<TParent>
  putArticlesTags?: MutationToPutArticlesTagsResolver<TParent>
  deleteArticlesTags?: MutationToDeleteArticlesTagsResolver<TParent>
  toggleArticleLive?: MutationToToggleArticleLiveResolver<TParent>
  toggleArticlePublic?: MutationToToggleArticlePublicResolver<TParent>
  toggleArticleRecommend?: MutationToToggleArticleRecommendResolver<TParent>
  updateArticleState?: MutationToUpdateArticleStateResolver<TParent>
  deleteTags?: MutationToDeleteTagsResolver<TParent>
  renameTag?: MutationToRenameTagResolver<TParent>
  mergeTags?: MutationToMergeTagsResolver<TParent>
  subscribeArticle?: MutationToSubscribeArticleResolver<TParent>
  unsubscribeArticle?: MutationToUnsubscribeArticleResolver<TParent>
  putComment?: MutationToPutCommentResolver<TParent>
  deleteComment?: MutationToDeleteCommentResolver<TParent>
  togglePinComment?: MutationToTogglePinCommentResolver<TParent>
  reportComment?: MutationToReportCommentResolver<TParent>
  voteComment?: MutationToVoteCommentResolver<TParent>
  unvoteComment?: MutationToUnvoteCommentResolver<TParent>
  updateCommentsState?: MutationToUpdateCommentsStateResolver<TParent>
  pinComment?: MutationToPinCommentResolver<TParent>
  unpinComment?: MutationToUnpinCommentResolver<TParent>
  putDraft?: MutationToPutDraftResolver<TParent>
  deleteDraft?: MutationToDeleteDraftResolver<TParent>
  markAllNoticesAsRead?: MutationToMarkAllNoticesAsReadResolver<TParent>
  singleFileUpload?: MutationToSingleFileUploadResolver<TParent>
  singleFileDelete?: MutationToSingleFileDeleteResolver<TParent>
  feedback?: MutationToFeedbackResolver<TParent>
  logRecord?: MutationToLogRecordResolver<TParent>
  setBoost?: MutationToSetBoostResolver<TParent>
  putRemark?: MutationToPutRemarkResolver<TParent>
  putSkippedListItem?: MutationToPutSkippedListItemResolver<TParent>
  setFeature?: MutationToSetFeatureResolver<TParent>
  sendVerificationCode?: MutationToSendVerificationCodeResolver<TParent>
  confirmVerificationCode?: MutationToConfirmVerificationCodeResolver<TParent>
  resetPassword?: MutationToResetPasswordResolver<TParent>
  changeEmail?: MutationToChangeEmailResolver<TParent>
  verifyEmail?: MutationToVerifyEmailResolver<TParent>
  userRegister?: MutationToUserRegisterResolver<TParent>
  userLogin?: MutationToUserLoginResolver<TParent>
  userLogout?: MutationToUserLogoutResolver<TParent>
  generateLikerId?: MutationToGenerateLikerIdResolver<TParent>
  updateUserInfo?: MutationToUpdateUserInfoResolver<TParent>
  updateNotificationSetting?: MutationToUpdateNotificationSettingResolver<
    TParent
  >
  toggleFollowUser?: MutationToToggleFollowUserResolver<TParent>
  toggleBlockUser?: MutationToToggleBlockUserResolver<TParent>
  toggleSubscribePush?: MutationToToggleSubscribePushResolver<TParent>
  clearReadHistory?: MutationToClearReadHistoryResolver<TParent>
  clearSearchHistory?: MutationToClearSearchHistoryResolver<TParent>
  migration?: MutationToMigrationResolver<TParent>
  updateUserState?: MutationToUpdateUserStateResolver<TParent>
  updateUserRole?: MutationToUpdateUserRoleResolver<TParent>
  blockUser?: MutationToBlockUserResolver<TParent>
  unblockUser?: MutationToUnblockUserResolver<TParent>
  followUser?: MutationToFollowUserResolver<TParent>
  unfollowUser?: MutationToUnfollowUserResolver<TParent>
  addCredit?: MutationToAddCreditResolver<TParent>
  payTo?: MutationToPayToResolver<TParent>
  payout?: MutationToPayoutResolver<TParent>
  connectStripeAccount?: MutationToConnectStripeAccountResolver<TParent>
  putOAuthClient?: MutationToPutOAuthClientResolver<TParent>
}

export interface MutationToPublishArticleArgs {
  input: GQLPublishArticleInput
}
export interface MutationToPublishArticleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToPublishArticleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToArchiveArticleArgs {
  input: GQLArchiveArticleInput
}
export interface MutationToArchiveArticleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToArchiveArticleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToReportArticleArgs {
  input: GQLReportArticleInput
}
export interface MutationToReportArticleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToReportArticleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToToggleSubscribeArticleArgs {
  input: GQLToggleItemInput
}
export interface MutationToToggleSubscribeArticleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToToggleSubscribeArticleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToAppreciateArticleArgs {
  input: GQLAppreciateArticleInput
}
export interface MutationToAppreciateArticleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToAppreciateArticleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToReadArticleArgs {
  input: GQLReadArticleInput
}
export interface MutationToReadArticleResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToReadArticleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToRecallPublishArgs {
  input: GQLRecallPublishInput
}
export interface MutationToRecallPublishResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToRecallPublishArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToSetCollectionArgs {
  input: GQLSetCollectionInput
}
export interface MutationToSetCollectionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToSetCollectionArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateArticleInfoArgs {
  input: GQLUpdateArticleInfoInput
}
export interface MutationToUpdateArticleInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateArticleInfoArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutTagArgs {
  input: GQLPutTagInput
}
export interface MutationToPutTagResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPutTagArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutArticlesTagsArgs {
  input: GQLPutArticlesTagsInput
}
export interface MutationToPutArticlesTagsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToPutArticlesTagsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToDeleteArticlesTagsArgs {
  input: GQLUpdateArticlesTagsInput
}
export interface MutationToDeleteArticlesTagsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToDeleteArticlesTagsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToToggleArticleLiveArgs {
  input: GQLToggleItemInput
}
export interface MutationToToggleArticleLiveResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToToggleArticleLiveArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToToggleArticlePublicArgs {
  input: GQLToggleItemInput
}
export interface MutationToToggleArticlePublicResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToToggleArticlePublicArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToToggleArticleRecommendArgs {
  input: GQLToggleArticleRecommendInput
}
export interface MutationToToggleArticleRecommendResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToToggleArticleRecommendArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateArticleStateArgs {
  input: GQLUpdateArticleStateInput
}
export interface MutationToUpdateArticleStateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateArticleStateArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToDeleteTagsArgs {
  input: GQLDeleteTagsInput
}
export interface MutationToDeleteTagsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteTagsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToRenameTagArgs {
  input: GQLRenameTagInput
}
export interface MutationToRenameTagResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToRenameTagArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMergeTagsArgs {
  input: GQLMergeTagsInput
}
export interface MutationToMergeTagsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToMergeTagsArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToSubscribeArticleArgs {
  input: GQLSubscribeArticleInput
}
export interface MutationToSubscribeArticleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToSubscribeArticleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUnsubscribeArticleArgs {
  input: GQLUnsubscribeArticleInput
}
export interface MutationToUnsubscribeArticleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUnsubscribeArticleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutCommentArgs {
  input: GQLPutCommentInput
}
export interface MutationToPutCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPutCommentArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToDeleteCommentArgs {
  input: GQLDeleteCommentInput
}
export interface MutationToDeleteCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteCommentArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToTogglePinCommentArgs {
  input: GQLToggleItemInput
}
export interface MutationToTogglePinCommentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToTogglePinCommentArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToReportCommentArgs {
  input: GQLReportCommentInput
}
export interface MutationToReportCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToReportCommentArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToVoteCommentArgs {
  input: GQLVoteCommentInput
}
export interface MutationToVoteCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToVoteCommentArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUnvoteCommentArgs {
  input: GQLUnvoteCommentInput
}
export interface MutationToUnvoteCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUnvoteCommentArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateCommentsStateArgs {
  input: GQLUpdateCommentsStateInput
}
export interface MutationToUpdateCommentsStateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateCommentsStateArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPinCommentArgs {
  input: GQLPinCommentInput
}
export interface MutationToPinCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPinCommentArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUnpinCommentArgs {
  input: GQLUnpinCommentInput
}
export interface MutationToUnpinCommentResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUnpinCommentArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutDraftArgs {
  input: GQLPutDraftInput
}
export interface MutationToPutDraftResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPutDraftArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToDeleteDraftArgs {
  input: GQLDeleteDraftInput
}
export interface MutationToDeleteDraftResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteDraftArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkAllNoticesAsReadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToSingleFileUploadArgs {
  input: GQLSingleFileUploadInput
}
export interface MutationToSingleFileUploadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToSingleFileUploadArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToSingleFileDeleteArgs {
  input: GQLSingleFileDeleteInput
}
export interface MutationToSingleFileDeleteResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToSingleFileDeleteArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToFeedbackArgs {
  input: GQLFeedbackInput
}
export interface MutationToFeedbackResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToFeedbackArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToLogRecordArgs {
  input: GQLLogRecordInput
}
export interface MutationToLogRecordResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToLogRecordArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToSetBoostArgs {
  input: GQLSetBoostInput
}
export interface MutationToSetBoostResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToSetBoostArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutRemarkArgs {
  input: GQLPutRemarkInput
}
export interface MutationToPutRemarkResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPutRemarkArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutSkippedListItemArgs {
  input: GQLPutSkippedListItemInput
}
export interface MutationToPutSkippedListItemResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToPutSkippedListItemArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToSetFeatureArgs {
  input: GQLSetFeatureInput
}
export interface MutationToSetFeatureResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToSetFeatureArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToSendVerificationCodeArgs {
  input: GQLSendVerificationCodeInput
}
export interface MutationToSendVerificationCodeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToSendVerificationCodeArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToConfirmVerificationCodeArgs {
  input: GQLConfirmVerificationCodeInput
}
export interface MutationToConfirmVerificationCodeResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToConfirmVerificationCodeArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToResetPasswordArgs {
  input: GQLResetPasswordInput
}
export interface MutationToResetPasswordResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToResetPasswordArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToChangeEmailArgs {
  input: GQLChangeEmailInput
}
export interface MutationToChangeEmailResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToChangeEmailArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToVerifyEmailArgs {
  input: GQLVerifyEmailInput
}
export interface MutationToVerifyEmailResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToVerifyEmailArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUserRegisterArgs {
  input: GQLUserRegisterInput
}
export interface MutationToUserRegisterResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUserRegisterArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUserLoginArgs {
  input: GQLUserLoginInput
}
export interface MutationToUserLoginResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUserLoginArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUserLogoutResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToGenerateLikerIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateUserInfoArgs {
  input: GQLUpdateUserInfoInput
}
export interface MutationToUpdateUserInfoResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateUserInfoArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateNotificationSettingArgs {
  input: GQLUpdateNotificationSettingInput
}
export interface MutationToUpdateNotificationSettingResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateNotificationSettingArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToToggleFollowUserArgs {
  input: GQLToggleItemInput
}
export interface MutationToToggleFollowUserResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToToggleFollowUserArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToToggleBlockUserArgs {
  input: GQLToggleItemInput
}
export interface MutationToToggleBlockUserResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToToggleBlockUserArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToToggleSubscribePushArgs {
  input: GQLToggleItemInput
}
export interface MutationToToggleSubscribePushResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToToggleSubscribePushArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToClearReadHistoryArgs {
  input: GQLClearReadHistoryInput
}
export interface MutationToClearReadHistoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToClearReadHistoryArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToClearSearchHistoryResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMigrationArgs {
  input: GQLMigrationInput
}
export interface MutationToMigrationResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToMigrationArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateUserStateArgs {
  input: GQLUpdateUserStateInput
}
export interface MutationToUpdateUserStateResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateUserStateArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateUserRoleArgs {
  input: GQLUpdateUserRoleInput
}
export interface MutationToUpdateUserRoleResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateUserRoleArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToBlockUserArgs {
  input: GQLBlockUserInput
}
export interface MutationToBlockUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToBlockUserArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUnblockUserArgs {
  input: GQLBlockUserInput
}
export interface MutationToUnblockUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUnblockUserArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToFollowUserArgs {
  input: GQLFollowUserInput
}
export interface MutationToFollowUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToFollowUserArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUnfollowUserArgs {
  input: GQLFollowUserInput
}
export interface MutationToUnfollowUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUnfollowUserArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToAddCreditArgs {
  input: GQLAddCreditInput
}
export interface MutationToAddCreditResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToAddCreditArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPayToArgs {
  input: GQLPayToInput
}
export interface MutationToPayToResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPayToArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPayoutArgs {
  input: GQLPayoutInput
}
export interface MutationToPayoutResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToPayoutArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToConnectStripeAccountResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToPutOAuthClientArgs {
  input: GQLPutOAuthClientInput
}
export interface MutationToPutOAuthClientResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToPutOAuthClientArgs,
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLAuthResultTypeResolver<TParent = any> {
  auth?: AuthResultToAuthResolver<TParent>
  token?: AuthResultToTokenResolver<TParent>
}

export interface AuthResultToAuthResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AuthResultToTokenResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLAddCreditResultTypeResolver<TParent = any> {
  transaction?: AddCreditResultToTransactionResolver<TParent>
  client_secret?: AddCreditResultToClient_secretResolver<TParent>
}

export interface AddCreditResultToTransactionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface AddCreditResultToClient_secretResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLPayToResultTypeResolver<TParent = any> {
  transaction?: PayToResultToTransactionResolver<TParent>
  redirectUrl?: PayToResultToRedirectUrlResolver<TParent>
}

export interface PayToResultToTransactionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PayToResultToRedirectUrlResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLConnectStripeAccountResultTypeResolver<TParent = any> {
  redirectUrl?: ConnectStripeAccountResultToRedirectUrlResolver<TParent>
}

export interface ConnectStripeAccountResultToRedirectUrlResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLSubscriptionTypeResolver<TParent = any> {
  nodeEdited?: SubscriptionToNodeEditedResolver<TParent>
}

export interface SubscriptionToNodeEditedArgs {
  input: GQLNodeEditedInput
}
export interface SubscriptionToNodeEditedResolver<
  TParent = any,
  TResult = any
> {
  resolve?: (
    parent: TParent,
    args: SubscriptionToNodeEditedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ) => TResult
  subscribe: (
    parent: TParent,
    args: SubscriptionToNodeEditedArgs,
    context: Context,
    info: GraphQLResolveInfo
  ) => AsyncIterator<TResult>
}

export interface GQLArticleMentionedYouNoticeTypeResolver<TParent = any> {
  id?: ArticleMentionedYouNoticeToIdResolver<TParent>
  unread?: ArticleMentionedYouNoticeToUnreadResolver<TParent>
  createdAt?: ArticleMentionedYouNoticeToCreatedAtResolver<TParent>
  actor?: ArticleMentionedYouNoticeToActorResolver<TParent>
  target?: ArticleMentionedYouNoticeToTargetResolver<TParent>
}

export interface ArticleMentionedYouNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleMentionedYouNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleMentionedYouNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleMentionedYouNoticeToActorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleMentionedYouNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleNewAppreciationNoticeTypeResolver<TParent = any> {
  id?: ArticleNewAppreciationNoticeToIdResolver<TParent>
  unread?: ArticleNewAppreciationNoticeToUnreadResolver<TParent>
  createdAt?: ArticleNewAppreciationNoticeToCreatedAtResolver<TParent>
  actors?: ArticleNewAppreciationNoticeToActorsResolver<TParent>
  target?: ArticleNewAppreciationNoticeToTargetResolver<TParent>
}

export interface ArticleNewAppreciationNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewAppreciationNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewAppreciationNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewAppreciationNoticeToActorsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewAppreciationNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleNewCollectedNoticeTypeResolver<TParent = any> {
  id?: ArticleNewCollectedNoticeToIdResolver<TParent>
  unread?: ArticleNewCollectedNoticeToUnreadResolver<TParent>
  createdAt?: ArticleNewCollectedNoticeToCreatedAtResolver<TParent>
  actor?: ArticleNewCollectedNoticeToActorResolver<TParent>
  collection?: ArticleNewCollectedNoticeToCollectionResolver<TParent>
  target?: ArticleNewCollectedNoticeToTargetResolver<TParent>
}

export interface ArticleNewCollectedNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewCollectedNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewCollectedNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewCollectedNoticeToActorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewCollectedNoticeToCollectionResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewCollectedNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleNewCommentNoticeTypeResolver<TParent = any> {
  id?: ArticleNewCommentNoticeToIdResolver<TParent>
  unread?: ArticleNewCommentNoticeToUnreadResolver<TParent>
  createdAt?: ArticleNewCommentNoticeToCreatedAtResolver<TParent>
  actors?: ArticleNewCommentNoticeToActorsResolver<TParent>
  target?: ArticleNewCommentNoticeToTargetResolver<TParent>
  comment?: ArticleNewCommentNoticeToCommentResolver<TParent>
}

export interface ArticleNewCommentNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewCommentNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewCommentNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewCommentNoticeToActorsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewCommentNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewCommentNoticeToCommentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleNewDownstreamNoticeTypeResolver<TParent = any> {
  id?: ArticleNewDownstreamNoticeToIdResolver<TParent>
  unread?: ArticleNewDownstreamNoticeToUnreadResolver<TParent>
  createdAt?: ArticleNewDownstreamNoticeToCreatedAtResolver<TParent>
  actors?: ArticleNewDownstreamNoticeToActorsResolver<TParent>
  downstream?: ArticleNewDownstreamNoticeToDownstreamResolver<TParent>
  target?: ArticleNewDownstreamNoticeToTargetResolver<TParent>
}

export interface ArticleNewDownstreamNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewDownstreamNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewDownstreamNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewDownstreamNoticeToActorsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewDownstreamNoticeToDownstreamResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewDownstreamNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleNewSubscriberNoticeTypeResolver<TParent = any> {
  id?: ArticleNewSubscriberNoticeToIdResolver<TParent>
  unread?: ArticleNewSubscriberNoticeToUnreadResolver<TParent>
  createdAt?: ArticleNewSubscriberNoticeToCreatedAtResolver<TParent>
  actors?: ArticleNewSubscriberNoticeToActorsResolver<TParent>
  target?: ArticleNewSubscriberNoticeToTargetResolver<TParent>
}

export interface ArticleNewSubscriberNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewSubscriberNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewSubscriberNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewSubscriberNoticeToActorsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleNewSubscriberNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticlePublishedNoticeTypeResolver<TParent = any> {
  id?: ArticlePublishedNoticeToIdResolver<TParent>
  unread?: ArticlePublishedNoticeToUnreadResolver<TParent>
  createdAt?: ArticlePublishedNoticeToCreatedAtResolver<TParent>
  target?: ArticlePublishedNoticeToTargetResolver<TParent>
}

export interface ArticlePublishedNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticlePublishedNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticlePublishedNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticlePublishedNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleTagHasBeenAddedNoticeTypeResolver<TParent = any> {
  id?: ArticleTagHasBeenAddedNoticeToIdResolver<TParent>
  unread?: ArticleTagHasBeenAddedNoticeToUnreadResolver<TParent>
  createdAt?: ArticleTagHasBeenAddedNoticeToCreatedAtResolver<TParent>
  actor?: ArticleTagHasBeenAddedNoticeToActorResolver<TParent>
  target?: ArticleTagHasBeenAddedNoticeToTargetResolver<TParent>
  tag?: ArticleTagHasBeenAddedNoticeToTagResolver<TParent>
}

export interface ArticleTagHasBeenAddedNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleTagHasBeenAddedNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleTagHasBeenAddedNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleTagHasBeenAddedNoticeToActorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleTagHasBeenAddedNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleTagHasBeenAddedNoticeToTagResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleTagHasBeenRemovedNoticeTypeResolver<TParent = any> {
  id?: ArticleTagHasBeenRemovedNoticeToIdResolver<TParent>
  unread?: ArticleTagHasBeenRemovedNoticeToUnreadResolver<TParent>
  createdAt?: ArticleTagHasBeenRemovedNoticeToCreatedAtResolver<TParent>
  actor?: ArticleTagHasBeenRemovedNoticeToActorResolver<TParent>
  target?: ArticleTagHasBeenRemovedNoticeToTargetResolver<TParent>
  tag?: ArticleTagHasBeenRemovedNoticeToTagResolver<TParent>
}

export interface ArticleTagHasBeenRemovedNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleTagHasBeenRemovedNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleTagHasBeenRemovedNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleTagHasBeenRemovedNoticeToActorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleTagHasBeenRemovedNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleTagHasBeenRemovedNoticeToTagResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLArticleTagHasBeenUnselectedNoticeTypeResolver<
  TParent = any
> {
  id?: ArticleTagHasBeenUnselectedNoticeToIdResolver<TParent>
  unread?: ArticleTagHasBeenUnselectedNoticeToUnreadResolver<TParent>
  createdAt?: ArticleTagHasBeenUnselectedNoticeToCreatedAtResolver<TParent>
  actor?: ArticleTagHasBeenUnselectedNoticeToActorResolver<TParent>
  target?: ArticleTagHasBeenUnselectedNoticeToTargetResolver<TParent>
  tag?: ArticleTagHasBeenUnselectedNoticeToTagResolver<TParent>
}

export interface ArticleTagHasBeenUnselectedNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleTagHasBeenUnselectedNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleTagHasBeenUnselectedNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleTagHasBeenUnselectedNoticeToActorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleTagHasBeenUnselectedNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface ArticleTagHasBeenUnselectedNoticeToTagResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCommentMentionedYouNoticeTypeResolver<TParent = any> {
  id?: CommentMentionedYouNoticeToIdResolver<TParent>
  unread?: CommentMentionedYouNoticeToUnreadResolver<TParent>
  createdAt?: CommentMentionedYouNoticeToCreatedAtResolver<TParent>
  actor?: CommentMentionedYouNoticeToActorResolver<TParent>
  target?: CommentMentionedYouNoticeToTargetResolver<TParent>
}

export interface CommentMentionedYouNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentMentionedYouNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentMentionedYouNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentMentionedYouNoticeToActorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentMentionedYouNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCommentNewReplyNoticeTypeResolver<TParent = any> {
  id?: CommentNewReplyNoticeToIdResolver<TParent>
  unread?: CommentNewReplyNoticeToUnreadResolver<TParent>
  createdAt?: CommentNewReplyNoticeToCreatedAtResolver<TParent>
  actors?: CommentNewReplyNoticeToActorsResolver<TParent>
  target?: CommentNewReplyNoticeToTargetResolver<TParent>
  reply?: CommentNewReplyNoticeToReplyResolver<TParent>
}

export interface CommentNewReplyNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentNewReplyNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentNewReplyNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentNewReplyNoticeToActorsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentNewReplyNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentNewReplyNoticeToReplyResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLCommentPinnedNoticeTypeResolver<TParent = any> {
  id?: CommentPinnedNoticeToIdResolver<TParent>
  unread?: CommentPinnedNoticeToUnreadResolver<TParent>
  createdAt?: CommentPinnedNoticeToCreatedAtResolver<TParent>
  actor?: CommentPinnedNoticeToActorResolver<TParent>
  target?: CommentPinnedNoticeToTargetResolver<TParent>
}

export interface CommentPinnedNoticeToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentPinnedNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentPinnedNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentPinnedNoticeToActorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface CommentPinnedNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLDownstreamArticleArchivedNoticeTypeResolver<TParent = any> {
  id?: DownstreamArticleArchivedNoticeToIdResolver<TParent>
  unread?: DownstreamArticleArchivedNoticeToUnreadResolver<TParent>
  createdAt?: DownstreamArticleArchivedNoticeToCreatedAtResolver<TParent>
  downstream?: DownstreamArticleArchivedNoticeToDownstreamResolver<TParent>
  target?: DownstreamArticleArchivedNoticeToTargetResolver<TParent>
}

export interface DownstreamArticleArchivedNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DownstreamArticleArchivedNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DownstreamArticleArchivedNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DownstreamArticleArchivedNoticeToDownstreamResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface DownstreamArticleArchivedNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLOfficialAnnouncementNoticeTypeResolver<TParent = any> {
  id?: OfficialAnnouncementNoticeToIdResolver<TParent>
  unread?: OfficialAnnouncementNoticeToUnreadResolver<TParent>
  createdAt?: OfficialAnnouncementNoticeToCreatedAtResolver<TParent>
  message?: OfficialAnnouncementNoticeToMessageResolver<TParent>
  link?: OfficialAnnouncementNoticeToLinkResolver<TParent>
}

export interface OfficialAnnouncementNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OfficialAnnouncementNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OfficialAnnouncementNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OfficialAnnouncementNoticeToMessageResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface OfficialAnnouncementNoticeToLinkResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLPaymentPayoutNoticeTypeResolver<TParent = any> {
  id?: PaymentPayoutNoticeToIdResolver<TParent>
  unread?: PaymentPayoutNoticeToUnreadResolver<TParent>
  createdAt?: PaymentPayoutNoticeToCreatedAtResolver<TParent>
  target?: PaymentPayoutNoticeToTargetResolver<TParent>
}

export interface PaymentPayoutNoticeToIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PaymentPayoutNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PaymentPayoutNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PaymentPayoutNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLPaymentReceivedDonationNoticeTypeResolver<TParent = any> {
  id?: PaymentReceivedDonationNoticeToIdResolver<TParent>
  unread?: PaymentReceivedDonationNoticeToUnreadResolver<TParent>
  createdAt?: PaymentReceivedDonationNoticeToCreatedAtResolver<TParent>
  actor?: PaymentReceivedDonationNoticeToActorResolver<TParent>
  target?: PaymentReceivedDonationNoticeToTargetResolver<TParent>
}

export interface PaymentReceivedDonationNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PaymentReceivedDonationNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PaymentReceivedDonationNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PaymentReceivedDonationNoticeToActorResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface PaymentReceivedDonationNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLSubscribedArticleNewCommentNoticeTypeResolver<
  TParent = any
> {
  id?: SubscribedArticleNewCommentNoticeToIdResolver<TParent>
  unread?: SubscribedArticleNewCommentNoticeToUnreadResolver<TParent>
  createdAt?: SubscribedArticleNewCommentNoticeToCreatedAtResolver<TParent>
  actors?: SubscribedArticleNewCommentNoticeToActorsResolver<TParent>
  target?: SubscribedArticleNewCommentNoticeToTargetResolver<TParent>
  comment?: SubscribedArticleNewCommentNoticeToCommentResolver<TParent>
}

export interface SubscribedArticleNewCommentNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SubscribedArticleNewCommentNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SubscribedArticleNewCommentNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SubscribedArticleNewCommentNoticeToActorsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SubscribedArticleNewCommentNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface SubscribedArticleNewCommentNoticeToCommentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUpstreamArticleArchivedNoticeTypeResolver<TParent = any> {
  id?: UpstreamArticleArchivedNoticeToIdResolver<TParent>
  unread?: UpstreamArticleArchivedNoticeToUnreadResolver<TParent>
  createdAt?: UpstreamArticleArchivedNoticeToCreatedAtResolver<TParent>
  upstream?: UpstreamArticleArchivedNoticeToUpstreamResolver<TParent>
  target?: UpstreamArticleArchivedNoticeToTargetResolver<TParent>
}

export interface UpstreamArticleArchivedNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UpstreamArticleArchivedNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UpstreamArticleArchivedNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UpstreamArticleArchivedNoticeToUpstreamResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UpstreamArticleArchivedNoticeToTargetResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLUserNewFollowerNoticeTypeResolver<TParent = any> {
  id?: UserNewFollowerNoticeToIdResolver<TParent>
  unread?: UserNewFollowerNoticeToUnreadResolver<TParent>
  createdAt?: UserNewFollowerNoticeToCreatedAtResolver<TParent>
  actors?: UserNewFollowerNoticeToActorsResolver<TParent>
}

export interface UserNewFollowerNoticeToIdResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserNewFollowerNoticeToUnreadResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserNewFollowerNoticeToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}

export interface UserNewFollowerNoticeToActorsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: {},
    context: Context,
    info: GraphQLResolveInfo
  ): TResult
}
