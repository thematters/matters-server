/* tslint:disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
/**
 * The dummy queries and mutations are necessary because
 * graphql-js cannot have empty root types and we only extend
 * these types later on
 * Ref: apollographql/graphql-tools#293
 */
export interface GQLQuery {
  _?: boolean;
  node?: GQLNode;
  frequentSearch?: Array<string | null>;
  search?: Array<GQLSearchResult | null>;
  official: GQLOfficial;
  viewer?: GQLUser;
}

export interface GQLNodeInput {
  id: string;
}

export interface GQLNode {
  id: string;
}

/** Use this to resolve interface type Node */
export type GQLPossibleNodeTypeNames =
'User' |
'Article' |
'Tag' |
'Comment' |
'Draft' |
'UserNewFollowerNotice';

export interface GQLNodeNameMap {
  Node: GQLNode;
  User: GQLUser;
  Article: GQLArticle;
  Tag: GQLTag;
  Comment: GQLComment;
  Draft: GQLDraft;
  UserNewFollowerNotice: GQLUserNewFollowerNotice;
}

export interface GQLSearchResult {
  entity?: GQLEntity;
  match?: string;
}

export type GQLEntity = GQLUser | GQLArticle | GQLTag;

/** Use this to resolve union type Entity */
export type GQLPossibleEntityTypeNames = 'User' | 'Article' | 'Tag';

export interface GQLEntityNameMap {
  Entity: GQLEntity;
  User: GQLUser;
  Article: GQLArticle;
  Tag: GQLTag;
}

export interface GQLUser extends GQLNode {
  id: string;
  info: GQLUserInfo;
  settings: GQLUserSettings;
  recommnedation: GQLRecommendation;
  
  /**
   * Articles written by this user
   */
  articles?: Array<GQLArticle | null>;
  drafts?: Array<GQLDraft | null>;
  audioDrafts?: Array<GQLAudioDraft | null>;
  
  /**
   * Comments posted by this user
   */
  commentedArticles?: Array<GQLArticle | null>;
  
  /**
   * comments that citated this user's article
   */
  citedArticles?: Array<GQLArticle | null>;
  subscriptions?: Array<GQLArticle | null>;
  activity: GQLUserActivity;
  
  /**
   * Followers of this user
   */
  followers?: Array<GQLUser | null>;
  
  /**
   * Users that this user follows
   */
  followees?: Array<GQLUser | null>;
  
  /**
   * This user is following viewer
   */
  isFollower: boolean;
  
  /**
   * Viewer is following this user
   */
  isFollowee: boolean;
  status: GQLUserStatus;
  notices?: Array<GQLNotice | null>;
}

export interface GQLUserInfo {
  createdAt: GQLDateTime;
  
  /**
   * Unique user name
   */
  userName: string;
  
  /**
   * Display name on profile
   */
  displayName: string;
  
  /**
   * User desciption
   */
  description: string;
  
  /**
   * URL for avatar
   */
  avatar: GQLURL;
  email: GQLEmail;
  mobile: string;
  
  /**
   * Use 500 for now, adaptive in the future
   */
  readSpeed: number;
}

export type GQLDateTime = any;

export type GQLURL = any;

export type GQLEmail = any;

export interface GQLUserSettings {
  
  /**
   * User language setting
   */
  language: GQLUserLanguage;
  
  /**
   * Thrid party accounts binded for the user
   */
  oauthType?: Array<GQLOAuthType | null>;
  
  /**
   * Notification settings
   */
  notification: GQLNotificationSetting;
}

export enum GQLUserLanguage {
  en = 'en',
  zh_hans = 'zh_hans',
  zh_hant = 'zh_hant'
}

export enum GQLOAuthType {
  facebook = 'facebook',
  wechat = 'wechat',
  google = 'google'
}

export interface GQLNotificationSetting {
  enable: boolean;
  mention: boolean;
  follow: boolean;
  comment: boolean;
  appreciation: boolean;
  articleSubscription: boolean;
  commentSubscribed: boolean;
  downstream: boolean;
  commentPinned: boolean;
  commentVoted: boolean;
  walletUpdate: boolean;
  officialNotice: boolean;
  reportFeedback: boolean;
}

export interface GQLRecommendation {
  hottest: Array<GQLArticle | null>;
  
  /**
   * In case you missed it
   */
  icymi: Array<GQLArticle | null>;
  tags: Array<GQLTag | null>;
  topics: Array<GQLArticle | null>;
  authors: Array<GQLUser | null>;
}

export interface GQLListInput {
  offset?: number;
  limit?: number;
}

export interface GQLArticle extends GQLNode {
  id: string;
  createdAt: GQLDateTime;
  public: boolean;
  author: GQLUser;
  title: string;
  
  /**
   * url for cover
   */
  cover: GQLURL;
  summary: string;
  tags?: Array<GQLTag>;
  wordCount?: number;
  hash?: string;
  content: string;
  gatewayUrls?: Array<GQLURL | null>;
  upstream?: GQLArticle;
  downstreams?: Array<GQLArticle | null>;
  relatedArticles: Array<GQLArticle | null>;
  
  /**
   * MAT recieved for this article
   */
  MAT: number;
  commentCount: number;
  
  /**
   * Current user has subscribed
   */
  subscribed: boolean;
  pinnedComments?: Array<GQLComment | null>;
  comments?: Array<GQLComment | null>;
  subscribers?: Array<GQLUser | null>;
  appreciators?: Array<GQLUser | null>;
  appreciatorCount: number;
  hasAppreciate: boolean;
  publishState: GQLPublishState;
}

export interface GQLTag extends GQLNode {
  id: string;
  content?: string;
  count?: number;
  articles?: Array<GQLArticle | null>;
}

export interface GQLComment extends GQLNode {
  id: string;
  
  /**
   * Original article of this comment
   */
  article: GQLArticle;
  
  /**
   * content
   */
  content?: string;
  
  /**
   * Creation time of this comment
   */
  createdAt: GQLDateTime;
  author: GQLUser;
  achieved: boolean;
  upvotes: number;
  downvotes: number;
  quotation?: string;
  myVote?: GQLVote;
  mentions?: Array<GQLUser | null>;
  comments?: Array<GQLComment | null>;
  parentComment?: GQLComment;
}

export enum GQLVote {
  up = 'up',
  down = 'down'
}

export interface GQLCommentsInput {
  offset?: number;
  limit?: number;
  author?: string;
  quoted?: boolean;
  sort?: GQLCommentSort;
}

export enum GQLCommentSort {
  oldest = 'oldest',
  newest = 'newest'
}

export enum GQLPublishState {
  archived = 'archived',
  pending = 'pending',
  error = 'error',
  published = 'published'
}

export interface GQLDraft extends GQLNode {
  id: string;
  upstream?: GQLArticle;
  title?: string;
  content: string;
  createdAt: GQLDateTime;
  updatedAt: GQLDateTime;
  tags?: Array<string | null>;
  cover?: GQLURL;
  abstract?: string;
}

export interface GQLAudioDraft {
  id: string;
  authorId: number;
  title?: string;
  path: string;
  length: number;
  createdAt: GQLDateTime;
  updatedAt: GQLDateTime;
}

export interface GQLUserActivity {
  history?: Array<GQLArticle | null>;
  recentSearches?: Array<string | null>;
  invited?: Array<GQLUser | null>;
}

export interface GQLUserStatus {
  currGravity: number;
  
  /**
   * Total MAT left in wallet
   */
  MAT: number;
  
  /**
   * Number of articles published by user
   */
  articleCount: number;
  
  /**
   * Number of views on articles
   */
  viewCount: number;
  draftCount: number;
  
  /**
   * Number of comments posted by user
   */
  commentCount: number;
  quotationCount: number;
  subscriptionCount: number;
  
  /**
   * Number of user that this user follows
   */
  followeeCount: number;
  
  /**
   * Number of user that follows this user
   */
  followerCount: number;
  
  /**
   * Number of unread notices
   */
  unreadNoticeCount: number;
}

export interface GQLNotice {
  id: string;
  unread: boolean;
  createdAt: GQLDateTime;
}

/** Use this to resolve interface type Notice */
export type GQLPossibleNoticeTypeNames =
'ArticleArchivedNotice' |
'ArticleNewAppreciationNotice' |
'ArticleNewCommentNotice' |
'ArticleNewDownstreamNotice' |
'ArticleNewSubscriberNotice' |
'ArticlePublishedNotice' |
'ArticleReportedNotice' |
'CommentArchivedNotice' |
'CommentMentionedYouNotice' |
'CommentNewReplyNotice' |
'CommentNewUpvoteNotice' |
'CommentPinnedNotice' |
'CommentReportedNotice' |
'OfficialAnnouncementNotice' |
'SubscribedArticleNewCommentNotice' |
'UserDisabledNotice' |
'UserNewFollowerNotice';

export interface GQLNoticeNameMap {
  Notice: GQLNotice;
  ArticleArchivedNotice: GQLArticleArchivedNotice;
  ArticleNewAppreciationNotice: GQLArticleNewAppreciationNotice;
  ArticleNewCommentNotice: GQLArticleNewCommentNotice;
  ArticleNewDownstreamNotice: GQLArticleNewDownstreamNotice;
  ArticleNewSubscriberNotice: GQLArticleNewSubscriberNotice;
  ArticlePublishedNotice: GQLArticlePublishedNotice;
  ArticleReportedNotice: GQLArticleReportedNotice;
  CommentArchivedNotice: GQLCommentArchivedNotice;
  CommentMentionedYouNotice: GQLCommentMentionedYouNotice;
  CommentNewReplyNotice: GQLCommentNewReplyNotice;
  CommentNewUpvoteNotice: GQLCommentNewUpvoteNotice;
  CommentPinnedNotice: GQLCommentPinnedNotice;
  CommentReportedNotice: GQLCommentReportedNotice;
  OfficialAnnouncementNotice: GQLOfficialAnnouncementNotice;
  SubscribedArticleNewCommentNotice: GQLSubscribedArticleNewCommentNotice;
  UserDisabledNotice: GQLUserDisabledNotice;
  UserNewFollowerNotice: GQLUserNewFollowerNotice;
}

export interface GQLOfficial {
  reportCategory: Array<string | null>;
}

export interface GQLMutation {
  _?: boolean;
  publishArticle: GQLArticle;
  archiveArticle: GQLArticle;
  subscribeArticle?: boolean;
  unsubscribeArticle?: boolean;
  reportArticle?: boolean;
  appreciateArticle: number;
  readArticle?: boolean;
  recallPublication: GQLDraft;
  createOrEditComment?: GQLComment;
  pinComment?: GQLComment;
  deleteComment?: boolean;
  createOrEditAudioDraft?: GQLAudioDraft;
  createDraft?: GQLDraft;
  deleteDraft?: boolean;
  editDraft?: GQLDraft;
  addDraftTag?: GQLDraft;
  deleteDraftTag?: boolean;
  singleFileDelete?: boolean;
  singleFileUpload: GQLFile;
  markAllNoticesAsRead?: boolean;
  sendVerificationEmail?: boolean;
  sendPasswordResetEmail?: boolean;
  sendEmailResetEmail?: boolean;
  verifyEmailResetCode?: boolean;
  resetPassword?: boolean;
  userRegister?: GQLUser;
  userLogin: GQLLoginResult;
  addOAuth?: boolean;
  updateUserInfo: GQLUser;
  followUser?: boolean;
  unfollowUser?: boolean;
  importArticles?: Array<GQLArticle | null>;
  updateNotificationSetting?: GQLNotificationSetting;
  clearReadHistory?: boolean;
  clearSearchHistory?: boolean;
}

export interface GQLPublishArticleInput {
  
  /**
   * publish with draft id
   */
  id: string;
}

export interface GQLArchiveArticleInput {
  id: string;
}

export interface GQLSubscribeArticleInput {
  id: string;
}

export interface GQLUnsubscribeArticleInput {
  id: string;
}

export interface GQLReportArticleInput {
  id: string;
  category?: string;
  description?: string;
}

export interface GQLAppreciateArticleInput {
  id: string;
  amount?: number;
}

export interface GQLReadArticleInput {
  id: string;
}

export interface GQLRecallPublicationInput {
  id: string;
}

export interface GQLCreateOrEditCommentInput {
  comment: GQLCommentInput;
  id?: string;
}

export interface GQLCommentInput {
  content: string;
  quotation?: string;
  articleId: string;
  parentId?: string;
  mentions?: Array<string | null>;
}

export interface GQLPinCommentInput {
  id: string;
}

export interface GQLDeleteCommentInput {
  id: string;
}

export interface GQLCreateOrEditAudioDraftInput {
  path: string;
  title?: string;
  id?: string;
}

export interface GQLCreateDraftInput {
  upstreamid?: string;
  title?: string;
  content?: string;
  tags?: Array<string | null>;
  cover?: GQLURL;
}

export interface GQLDeleteDraftInput {
  id?: string;
}

export interface GQLEditDraftInput {
  id?: string;
  field?: GQLDraftField;
  value?: string;
}

export enum GQLDraftField {
  upstream = 'upstream',
  title = 'title',
  cover = 'cover',
  content = 'content'
}

export interface GQLAddDraftTagInput {
  id?: string;
  tag?: string;
}

export interface GQLDeleteDraftTagInput {
  id?: string;
  tag?: string;
}

export interface GQLSingleFileDeleteInput {
  path: string;
}

export interface GQLSingleFileUploadInput {
  purpose?: string;
  file: GQLUpload;
}

export type GQLUpload = any;

export interface GQLFile {
  filename: string;
  mimetype: string;
  encoding: string;
  path: string;
}

export interface GQLSendVerificationEmailInput {
  email: GQLEmail;
}

export interface GQLSendEmailResetEmailInput {
  email: GQLEmail;
}

export interface GQLVerifyEmailResetCodeInput {
  email: GQLEmail;
  code: string;
}

export interface GQLResetPasswordInput {
  password: string;
  code?: string;
}

export interface GQLUserRegisterInput {
  email: GQLEmail;
  displayName: string;
  password: string;
  code?: string;
}

export interface GQLUserLoginInput {
  email: GQLEmail;
  password: string;
}

export interface GQLLoginResult {
  auth: boolean;
  token?: string;
}

export interface GQLAddOAuthInput {
  name: string;
  id: string;
  type?: GQLOAuthType;
}

export interface GQLUpdateUserInfoInput {
  displayName?: string;
  avatar?: GQLURL;
  description?: string;
  language?: GQLUserLanguage;
}

export interface GQLFollowUserInput {
  id: string;
}

export interface GQLUnfollowUserInput {
  id: string;
}

export interface GQLImportArticlesInput {
  platform?: string;
  token?: string;
}

export interface GQLUpdateNotificationSettingInput {
  type: string;
  enabled: boolean;
}

export interface GQLClearReadHistoryInput {
  uuid?: GQLUUID;
}

export type GQLUUID = any;

export interface GQLSubscription {
  _?: boolean;
  nodeEdited: GQLNode;
}

export interface GQLNodeEditedInput {
  id: string;
}

export interface GQLArticleArchivedNotice extends GQLNotice {
  id: string;
  unread: boolean;
  createdAt: GQLDateTime;
  target: GQLArticle;
  reason?: GQLArticleArchivedReason;
}

export enum GQLArticleArchivedReason {
  violation = 'violation'
}

export interface GQLArticleNewAppreciationNotice extends GQLNotice {
  id: string;
  unread: boolean;
  createdAt: GQLDateTime;
  actors?: Array<GQLUser | null>;
  target: GQLArticle;
  MAT: number;
}

export interface GQLArticleNewCommentNotice extends GQLNotice {
  id: string;
  unread: boolean;
  createdAt: GQLDateTime;
  actors?: Array<GQLUser | null>;
  target: GQLArticle;
}

export interface GQLArticleNewDownstreamNotice extends GQLNotice {
  id: string;
  unread: boolean;
  createdAt: GQLDateTime;
  actors?: Array<GQLUser | null>;
  downstream: GQLArticle;
  target: GQLArticle;
}

export interface GQLArticleNewSubscriberNotice extends GQLNotice {
  id: string;
  unread: boolean;
  createdAt: GQLDateTime;
  actors?: Array<GQLUser | null>;
  target: GQLArticle;
}

export interface GQLArticlePublishedNotice extends GQLNotice {
  id: string;
  unread: boolean;
  createdAt: GQLDateTime;
  target: GQLArticle;
}

export interface GQLArticleReportedNotice extends GQLNotice {
  id: string;
  unread: boolean;
  createdAt: GQLDateTime;
  target: GQLArticle;
  reason?: GQLArticleReportedReason;
}

export enum GQLArticleReportedReason {
  violation = 'violation'
}

export interface GQLCommentArchivedNotice extends GQLNotice {
  id: string;
  unread: boolean;
  createdAt: GQLDateTime;
  target: GQLComment;
  reason?: GQLCommentArchivedReason;
}

export enum GQLCommentArchivedReason {
  violation = 'violation'
}

export interface GQLCommentMentionedYouNotice extends GQLNotice {
  id: string;
  unread: boolean;
  createdAt: GQLDateTime;
  actors?: Array<GQLUser | null>;
  target: GQLComment;
}

export interface GQLCommentNewReplyNotice extends GQLNotice {
  id: string;
  unread: boolean;
  createdAt: GQLDateTime;
  actors?: Array<GQLUser | null>;
  target: GQLComment;
}

export interface GQLCommentNewUpvoteNotice extends GQLNotice {
  id: string;
  unread: boolean;
  createdAt: GQLDateTime;
  actors?: Array<GQLUser | null>;
  target: GQLComment;
}

export interface GQLCommentPinnedNotice extends GQLNotice {
  id: string;
  unread: boolean;
  createdAt: GQLDateTime;
  target: GQLComment;
}

export interface GQLCommentReportedNotice extends GQLNotice {
  id: string;
  unread: boolean;
  createdAt: GQLDateTime;
  target: GQLComment;
  reason?: GQLCommentReportedReason;
}

export enum GQLCommentReportedReason {
  violation = 'violation'
}

export type GQLDate = any;

export type GQLJSON = any;

export interface GQLOfficialAnnouncementNotice extends GQLNotice {
  id: string;
  unread: boolean;
  createdAt: GQLDateTime;
  message: string;
  link?: GQLURL;
}

export interface GQLSearchInput {
  key: string;
  type?: GQLSearchTypes;
  offset?: number;
  limit?: number;
}

export enum GQLSearchTypes {
  Article = 'Article',
  User = 'User',
  Tag = 'Tag'
}

export interface GQLSendPasswordResetEmailInput {
  email: GQLEmail;
}

export interface GQLSubscribedArticleNewCommentNotice extends GQLNotice {
  id: string;
  unread: boolean;
  createdAt: GQLDateTime;
  actors?: Array<GQLUser | null>;
  target: GQLArticle;
}

export type GQLTime = any;

export interface GQLUserDisabledNotice extends GQLNotice {
  id: string;
  unread: boolean;
  createdAt: GQLDateTime;
  reason?: GQLUserDisabledReason;
}

export enum GQLUserDisabledReason {
  violation = 'violation'
}

export enum GQLUserInfoFields {
  displayName = 'displayName',
  avatar = 'avatar',
  description = 'description',
  email = 'email',
  mobile = 'mobile'
}

export interface GQLUserNewFollowerNotice extends GQLNotice, GQLNode {
  id: string;
  unread: boolean;
  createdAt: GQLDateTime;
  actors?: Array<GQLUser | null>;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Node?: {
    __resolveType: GQLNodeTypeResolver
  };
  
  SearchResult?: GQLSearchResultTypeResolver;
  Entity?: {
    __resolveType: GQLEntityTypeResolver
  };
  
  User?: GQLUserTypeResolver;
  UserInfo?: GQLUserInfoTypeResolver;
  DateTime?: GraphQLScalarType;
  URL?: GraphQLScalarType;
  Email?: GraphQLScalarType;
  UserSettings?: GQLUserSettingsTypeResolver;
  NotificationSetting?: GQLNotificationSettingTypeResolver;
  Recommendation?: GQLRecommendationTypeResolver;
  Article?: GQLArticleTypeResolver;
  Tag?: GQLTagTypeResolver;
  Comment?: GQLCommentTypeResolver;
  Draft?: GQLDraftTypeResolver;
  AudioDraft?: GQLAudioDraftTypeResolver;
  UserActivity?: GQLUserActivityTypeResolver;
  UserStatus?: GQLUserStatusTypeResolver;
  Notice?: {
    __resolveType: GQLNoticeTypeResolver
  };
  
  Official?: GQLOfficialTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  Upload?: GraphQLScalarType;
  File?: GQLFileTypeResolver;
  LoginResult?: GQLLoginResultTypeResolver;
  UUID?: GraphQLScalarType;
  Subscription?: GQLSubscriptionTypeResolver;
  ArticleArchivedNotice?: GQLArticleArchivedNoticeTypeResolver;
  ArticleNewAppreciationNotice?: GQLArticleNewAppreciationNoticeTypeResolver;
  ArticleNewCommentNotice?: GQLArticleNewCommentNoticeTypeResolver;
  ArticleNewDownstreamNotice?: GQLArticleNewDownstreamNoticeTypeResolver;
  ArticleNewSubscriberNotice?: GQLArticleNewSubscriberNoticeTypeResolver;
  ArticlePublishedNotice?: GQLArticlePublishedNoticeTypeResolver;
  ArticleReportedNotice?: GQLArticleReportedNoticeTypeResolver;
  CommentArchivedNotice?: GQLCommentArchivedNoticeTypeResolver;
  CommentMentionedYouNotice?: GQLCommentMentionedYouNoticeTypeResolver;
  CommentNewReplyNotice?: GQLCommentNewReplyNoticeTypeResolver;
  CommentNewUpvoteNotice?: GQLCommentNewUpvoteNoticeTypeResolver;
  CommentPinnedNotice?: GQLCommentPinnedNoticeTypeResolver;
  CommentReportedNotice?: GQLCommentReportedNoticeTypeResolver;
  Date?: GraphQLScalarType;
  JSON?: GraphQLScalarType;
  OfficialAnnouncementNotice?: GQLOfficialAnnouncementNoticeTypeResolver;
  SubscribedArticleNewCommentNotice?: GQLSubscribedArticleNewCommentNoticeTypeResolver;
  Time?: GraphQLScalarType;
  UserDisabledNotice?: GQLUserDisabledNoticeTypeResolver;
  UserNewFollowerNotice?: GQLUserNewFollowerNoticeTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  _?: QueryTo_Resolver<TParent>;
  node?: QueryToNodeResolver<TParent>;
  frequentSearch?: QueryToFrequentSearchResolver<TParent>;
  search?: QueryToSearchResolver<TParent>;
  official?: QueryToOfficialResolver<TParent>;
  viewer?: QueryToViewerResolver<TParent>;
}

export interface QueryTo_Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToNodeArgs {
  input: GQLNodeInput;
}
export interface QueryToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToNodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToFrequentSearchArgs {
  key?: string;
}
export interface QueryToFrequentSearchResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToFrequentSearchArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSearchArgs {
  key?: string;
}
export interface QueryToSearchResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToSearchArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToOfficialResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToViewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLNodeTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'User' | 'Article' | 'Tag' | 'Comment' | 'Draft' | 'UserNewFollowerNotice';
}
export interface GQLSearchResultTypeResolver<TParent = any> {
  entity?: SearchResultToEntityResolver<TParent>;
  match?: SearchResultToMatchResolver<TParent>;
}

export interface SearchResultToEntityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultToMatchResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEntityTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'User' | 'Article' | 'Tag';
}
export interface GQLUserTypeResolver<TParent = any> {
  id?: UserToIdResolver<TParent>;
  info?: UserToInfoResolver<TParent>;
  settings?: UserToSettingsResolver<TParent>;
  recommnedation?: UserToRecommnedationResolver<TParent>;
  articles?: UserToArticlesResolver<TParent>;
  drafts?: UserToDraftsResolver<TParent>;
  audioDrafts?: UserToAudioDraftsResolver<TParent>;
  commentedArticles?: UserToCommentedArticlesResolver<TParent>;
  citedArticles?: UserToCitedArticlesResolver<TParent>;
  subscriptions?: UserToSubscriptionsResolver<TParent>;
  activity?: UserToActivityResolver<TParent>;
  followers?: UserToFollowersResolver<TParent>;
  followees?: UserToFolloweesResolver<TParent>;
  isFollower?: UserToIsFollowerResolver<TParent>;
  isFollowee?: UserToIsFolloweeResolver<TParent>;
  status?: UserToStatusResolver<TParent>;
  notices?: UserToNoticesResolver<TParent>;
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToSettingsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToRecommnedationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToArticlesArgs {
  input: GQLListInput;
}
export interface UserToArticlesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToArticlesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToDraftsArgs {
  input: GQLListInput;
}
export interface UserToDraftsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToDraftsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToAudioDraftsArgs {
  input: GQLListInput;
}
export interface UserToAudioDraftsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToAudioDraftsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToCommentedArticlesArgs {
  input: GQLListInput;
}
export interface UserToCommentedArticlesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToCommentedArticlesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToCitedArticlesArgs {
  input: GQLListInput;
}
export interface UserToCitedArticlesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToCitedArticlesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToSubscriptionsArgs {
  input: GQLListInput;
}
export interface UserToSubscriptionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToSubscriptionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToActivityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToFollowersArgs {
  input: GQLListInput;
}
export interface UserToFollowersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToFollowersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToFolloweesArgs {
  input: GQLListInput;
}
export interface UserToFolloweesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToFolloweesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsFollowerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsFolloweeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToNoticesArgs {
  input: GQLListInput;
}
export interface UserToNoticesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToNoticesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserInfoTypeResolver<TParent = any> {
  createdAt?: UserInfoToCreatedAtResolver<TParent>;
  userName?: UserInfoToUserNameResolver<TParent>;
  displayName?: UserInfoToDisplayNameResolver<TParent>;
  description?: UserInfoToDescriptionResolver<TParent>;
  avatar?: UserInfoToAvatarResolver<TParent>;
  email?: UserInfoToEmailResolver<TParent>;
  mobile?: UserInfoToMobileResolver<TParent>;
  readSpeed?: UserInfoToReadSpeedResolver<TParent>;
}

export interface UserInfoToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInfoToUserNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInfoToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInfoToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInfoToAvatarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInfoToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInfoToMobileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInfoToReadSpeedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserSettingsTypeResolver<TParent = any> {
  language?: UserSettingsToLanguageResolver<TParent>;
  oauthType?: UserSettingsToOauthTypeResolver<TParent>;
  notification?: UserSettingsToNotificationResolver<TParent>;
}

export interface UserSettingsToLanguageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserSettingsToOauthTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserSettingsToNotificationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLNotificationSettingTypeResolver<TParent = any> {
  enable?: NotificationSettingToEnableResolver<TParent>;
  mention?: NotificationSettingToMentionResolver<TParent>;
  follow?: NotificationSettingToFollowResolver<TParent>;
  comment?: NotificationSettingToCommentResolver<TParent>;
  appreciation?: NotificationSettingToAppreciationResolver<TParent>;
  articleSubscription?: NotificationSettingToArticleSubscriptionResolver<TParent>;
  commentSubscribed?: NotificationSettingToCommentSubscribedResolver<TParent>;
  downstream?: NotificationSettingToDownstreamResolver<TParent>;
  commentPinned?: NotificationSettingToCommentPinnedResolver<TParent>;
  commentVoted?: NotificationSettingToCommentVotedResolver<TParent>;
  walletUpdate?: NotificationSettingToWalletUpdateResolver<TParent>;
  officialNotice?: NotificationSettingToOfficialNoticeResolver<TParent>;
  reportFeedback?: NotificationSettingToReportFeedbackResolver<TParent>;
}

export interface NotificationSettingToEnableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationSettingToMentionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationSettingToFollowResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationSettingToCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationSettingToAppreciationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationSettingToArticleSubscriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationSettingToCommentSubscribedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationSettingToDownstreamResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationSettingToCommentPinnedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationSettingToCommentVotedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationSettingToWalletUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationSettingToOfficialNoticeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationSettingToReportFeedbackResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRecommendationTypeResolver<TParent = any> {
  hottest?: RecommendationToHottestResolver<TParent>;
  icymi?: RecommendationToIcymiResolver<TParent>;
  tags?: RecommendationToTagsResolver<TParent>;
  topics?: RecommendationToTopicsResolver<TParent>;
  authors?: RecommendationToAuthorsResolver<TParent>;
}

export interface RecommendationToHottestArgs {
  input: GQLListInput;
}
export interface RecommendationToHottestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RecommendationToHottestArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecommendationToIcymiArgs {
  input: GQLListInput;
}
export interface RecommendationToIcymiResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RecommendationToIcymiArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecommendationToTagsArgs {
  input: GQLListInput;
}
export interface RecommendationToTagsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RecommendationToTagsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecommendationToTopicsArgs {
  input: GQLListInput;
}
export interface RecommendationToTopicsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RecommendationToTopicsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RecommendationToAuthorsArgs {
  input: GQLListInput;
}
export interface RecommendationToAuthorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RecommendationToAuthorsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLArticleTypeResolver<TParent = any> {
  id?: ArticleToIdResolver<TParent>;
  createdAt?: ArticleToCreatedAtResolver<TParent>;
  public?: ArticleToPublicResolver<TParent>;
  author?: ArticleToAuthorResolver<TParent>;
  title?: ArticleToTitleResolver<TParent>;
  cover?: ArticleToCoverResolver<TParent>;
  summary?: ArticleToSummaryResolver<TParent>;
  tags?: ArticleToTagsResolver<TParent>;
  wordCount?: ArticleToWordCountResolver<TParent>;
  hash?: ArticleToHashResolver<TParent>;
  content?: ArticleToContentResolver<TParent>;
  gatewayUrls?: ArticleToGatewayUrlsResolver<TParent>;
  upstream?: ArticleToUpstreamResolver<TParent>;
  downstreams?: ArticleToDownstreamsResolver<TParent>;
  relatedArticles?: ArticleToRelatedArticlesResolver<TParent>;
  MAT?: ArticleToMATResolver<TParent>;
  commentCount?: ArticleToCommentCountResolver<TParent>;
  subscribed?: ArticleToSubscribedResolver<TParent>;
  pinnedComments?: ArticleToPinnedCommentsResolver<TParent>;
  comments?: ArticleToCommentsResolver<TParent>;
  subscribers?: ArticleToSubscribersResolver<TParent>;
  appreciators?: ArticleToAppreciatorsResolver<TParent>;
  appreciatorCount?: ArticleToAppreciatorCountResolver<TParent>;
  hasAppreciate?: ArticleToHasAppreciateResolver<TParent>;
  publishState?: ArticleToPublishStateResolver<TParent>;
}

export interface ArticleToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToPublicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToCoverResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToSummaryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToTagsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToWordCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToHashResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToGatewayUrlsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToUpstreamResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToDownstreamsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToRelatedArticlesArgs {
  input: GQLListInput;
}
export interface ArticleToRelatedArticlesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ArticleToRelatedArticlesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToMATResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToCommentCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToSubscribedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToPinnedCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToCommentsArgs {
  input: GQLCommentsInput;
}
export interface ArticleToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ArticleToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToSubscribersArgs {
  input: GQLListInput;
}
export interface ArticleToSubscribersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ArticleToSubscribersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToAppreciatorsArgs {
  input: GQLListInput;
}
export interface ArticleToAppreciatorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ArticleToAppreciatorsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToAppreciatorCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToHasAppreciateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToPublishStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTagTypeResolver<TParent = any> {
  id?: TagToIdResolver<TParent>;
  content?: TagToContentResolver<TParent>;
  count?: TagToCountResolver<TParent>;
  articles?: TagToArticlesResolver<TParent>;
}

export interface TagToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToArticlesArgs {
  input: GQLListInput;
}
export interface TagToArticlesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TagToArticlesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommentTypeResolver<TParent = any> {
  id?: CommentToIdResolver<TParent>;
  article?: CommentToArticleResolver<TParent>;
  content?: CommentToContentResolver<TParent>;
  createdAt?: CommentToCreatedAtResolver<TParent>;
  author?: CommentToAuthorResolver<TParent>;
  achieved?: CommentToAchievedResolver<TParent>;
  upvotes?: CommentToUpvotesResolver<TParent>;
  downvotes?: CommentToDownvotesResolver<TParent>;
  quotation?: CommentToQuotationResolver<TParent>;
  myVote?: CommentToMyVoteResolver<TParent>;
  mentions?: CommentToMentionsResolver<TParent>;
  comments?: CommentToCommentsResolver<TParent>;
  parentComment?: CommentToParentCommentResolver<TParent>;
}

export interface CommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToArticleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToAchievedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToUpvotesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToDownvotesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToQuotationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToMyVoteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToMentionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToParentCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDraftTypeResolver<TParent = any> {
  id?: DraftToIdResolver<TParent>;
  upstream?: DraftToUpstreamResolver<TParent>;
  title?: DraftToTitleResolver<TParent>;
  content?: DraftToContentResolver<TParent>;
  createdAt?: DraftToCreatedAtResolver<TParent>;
  updatedAt?: DraftToUpdatedAtResolver<TParent>;
  tags?: DraftToTagsResolver<TParent>;
  cover?: DraftToCoverResolver<TParent>;
  abstract?: DraftToAbstractResolver<TParent>;
}

export interface DraftToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DraftToUpstreamResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DraftToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DraftToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DraftToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DraftToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DraftToTagsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DraftToCoverResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DraftToAbstractResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAudioDraftTypeResolver<TParent = any> {
  id?: AudioDraftToIdResolver<TParent>;
  authorId?: AudioDraftToAuthorIdResolver<TParent>;
  title?: AudioDraftToTitleResolver<TParent>;
  path?: AudioDraftToPathResolver<TParent>;
  length?: AudioDraftToLengthResolver<TParent>;
  createdAt?: AudioDraftToCreatedAtResolver<TParent>;
  updatedAt?: AudioDraftToUpdatedAtResolver<TParent>;
}

export interface AudioDraftToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AudioDraftToAuthorIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AudioDraftToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AudioDraftToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AudioDraftToLengthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AudioDraftToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AudioDraftToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserActivityTypeResolver<TParent = any> {
  history?: UserActivityToHistoryResolver<TParent>;
  recentSearches?: UserActivityToRecentSearchesResolver<TParent>;
  invited?: UserActivityToInvitedResolver<TParent>;
}

export interface UserActivityToHistoryArgs {
  input: GQLListInput;
}
export interface UserActivityToHistoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserActivityToHistoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserActivityToRecentSearchesArgs {
  input: GQLListInput;
}
export interface UserActivityToRecentSearchesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserActivityToRecentSearchesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserActivityToInvitedArgs {
  input: GQLListInput;
}
export interface UserActivityToInvitedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserActivityToInvitedArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserStatusTypeResolver<TParent = any> {
  currGravity?: UserStatusToCurrGravityResolver<TParent>;
  MAT?: UserStatusToMATResolver<TParent>;
  articleCount?: UserStatusToArticleCountResolver<TParent>;
  viewCount?: UserStatusToViewCountResolver<TParent>;
  draftCount?: UserStatusToDraftCountResolver<TParent>;
  commentCount?: UserStatusToCommentCountResolver<TParent>;
  quotationCount?: UserStatusToQuotationCountResolver<TParent>;
  subscriptionCount?: UserStatusToSubscriptionCountResolver<TParent>;
  followeeCount?: UserStatusToFolloweeCountResolver<TParent>;
  followerCount?: UserStatusToFollowerCountResolver<TParent>;
  unreadNoticeCount?: UserStatusToUnreadNoticeCountResolver<TParent>;
}

export interface UserStatusToCurrGravityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusToMATResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusToArticleCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusToViewCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusToDraftCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusToCommentCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusToQuotationCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusToSubscriptionCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusToFolloweeCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusToFollowerCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusToUnreadNoticeCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLNoticeTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'ArticleArchivedNotice' | 'ArticleNewAppreciationNotice' | 'ArticleNewCommentNotice' | 'ArticleNewDownstreamNotice' | 'ArticleNewSubscriberNotice' | 'ArticlePublishedNotice' | 'ArticleReportedNotice' | 'CommentArchivedNotice' | 'CommentMentionedYouNotice' | 'CommentNewReplyNotice' | 'CommentNewUpvoteNotice' | 'CommentPinnedNotice' | 'CommentReportedNotice' | 'OfficialAnnouncementNotice' | 'SubscribedArticleNewCommentNotice' | 'UserDisabledNotice' | 'UserNewFollowerNotice';
}
export interface GQLOfficialTypeResolver<TParent = any> {
  reportCategory?: OfficialToReportCategoryResolver<TParent>;
}

export interface OfficialToReportCategoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  _?: MutationTo_Resolver<TParent>;
  publishArticle?: MutationToPublishArticleResolver<TParent>;
  archiveArticle?: MutationToArchiveArticleResolver<TParent>;
  subscribeArticle?: MutationToSubscribeArticleResolver<TParent>;
  unsubscribeArticle?: MutationToUnsubscribeArticleResolver<TParent>;
  reportArticle?: MutationToReportArticleResolver<TParent>;
  appreciateArticle?: MutationToAppreciateArticleResolver<TParent>;
  readArticle?: MutationToReadArticleResolver<TParent>;
  recallPublication?: MutationToRecallPublicationResolver<TParent>;
  createOrEditComment?: MutationToCreateOrEditCommentResolver<TParent>;
  pinComment?: MutationToPinCommentResolver<TParent>;
  deleteComment?: MutationToDeleteCommentResolver<TParent>;
  createOrEditAudioDraft?: MutationToCreateOrEditAudioDraftResolver<TParent>;
  createDraft?: MutationToCreateDraftResolver<TParent>;
  deleteDraft?: MutationToDeleteDraftResolver<TParent>;
  editDraft?: MutationToEditDraftResolver<TParent>;
  addDraftTag?: MutationToAddDraftTagResolver<TParent>;
  deleteDraftTag?: MutationToDeleteDraftTagResolver<TParent>;
  singleFileDelete?: MutationToSingleFileDeleteResolver<TParent>;
  singleFileUpload?: MutationToSingleFileUploadResolver<TParent>;
  markAllNoticesAsRead?: MutationToMarkAllNoticesAsReadResolver<TParent>;
  sendVerificationEmail?: MutationToSendVerificationEmailResolver<TParent>;
  sendPasswordResetEmail?: MutationToSendPasswordResetEmailResolver<TParent>;
  sendEmailResetEmail?: MutationToSendEmailResetEmailResolver<TParent>;
  verifyEmailResetCode?: MutationToVerifyEmailResetCodeResolver<TParent>;
  resetPassword?: MutationToResetPasswordResolver<TParent>;
  userRegister?: MutationToUserRegisterResolver<TParent>;
  userLogin?: MutationToUserLoginResolver<TParent>;
  addOAuth?: MutationToAddOAuthResolver<TParent>;
  updateUserInfo?: MutationToUpdateUserInfoResolver<TParent>;
  followUser?: MutationToFollowUserResolver<TParent>;
  unfollowUser?: MutationToUnfollowUserResolver<TParent>;
  importArticles?: MutationToImportArticlesResolver<TParent>;
  updateNotificationSetting?: MutationToUpdateNotificationSettingResolver<TParent>;
  clearReadHistory?: MutationToClearReadHistoryResolver<TParent>;
  clearSearchHistory?: MutationToClearSearchHistoryResolver<TParent>;
}

export interface MutationTo_Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToPublishArticleArgs {
  input?: GQLPublishArticleInput;
}
export interface MutationToPublishArticleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToPublishArticleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToArchiveArticleArgs {
  input?: GQLArchiveArticleInput;
}
export interface MutationToArchiveArticleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToArchiveArticleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSubscribeArticleArgs {
  input?: GQLSubscribeArticleInput;
}
export interface MutationToSubscribeArticleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSubscribeArticleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUnsubscribeArticleArgs {
  input?: GQLUnsubscribeArticleInput;
}
export interface MutationToUnsubscribeArticleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUnsubscribeArticleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToReportArticleArgs {
  input?: GQLReportArticleInput;
}
export interface MutationToReportArticleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToReportArticleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAppreciateArticleArgs {
  input?: GQLAppreciateArticleInput;
}
export interface MutationToAppreciateArticleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAppreciateArticleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToReadArticleArgs {
  input?: GQLReadArticleInput;
}
export interface MutationToReadArticleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToReadArticleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRecallPublicationArgs {
  input?: GQLRecallPublicationInput;
}
export interface MutationToRecallPublicationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRecallPublicationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateOrEditCommentArgs {
  input?: GQLCreateOrEditCommentInput;
}
export interface MutationToCreateOrEditCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateOrEditCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToPinCommentArgs {
  input?: GQLPinCommentInput;
}
export interface MutationToPinCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToPinCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteCommentArgs {
  input?: GQLDeleteCommentInput;
}
export interface MutationToDeleteCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateOrEditAudioDraftArgs {
  input?: GQLCreateOrEditAudioDraftInput;
}
export interface MutationToCreateOrEditAudioDraftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateOrEditAudioDraftArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateDraftArgs {
  input?: GQLCreateDraftInput;
}
export interface MutationToCreateDraftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateDraftArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteDraftArgs {
  input?: GQLDeleteDraftInput;
}
export interface MutationToDeleteDraftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteDraftArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToEditDraftArgs {
  input?: GQLEditDraftInput;
}
export interface MutationToEditDraftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToEditDraftArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddDraftTagArgs {
  input?: GQLAddDraftTagInput;
}
export interface MutationToAddDraftTagResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddDraftTagArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteDraftTagArgs {
  input?: GQLDeleteDraftTagInput;
}
export interface MutationToDeleteDraftTagResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteDraftTagArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSingleFileDeleteArgs {
  input?: GQLSingleFileDeleteInput;
}
export interface MutationToSingleFileDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSingleFileDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSingleFileUploadArgs {
  input?: GQLSingleFileUploadInput;
}
export interface MutationToSingleFileUploadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSingleFileUploadArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToMarkAllNoticesAsReadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSendVerificationEmailArgs {
  input?: GQLSendVerificationEmailInput;
}
export interface MutationToSendVerificationEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSendVerificationEmailArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSendPasswordResetEmailArgs {
  input?: GQLSendVerificationEmailInput;
}
export interface MutationToSendPasswordResetEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSendPasswordResetEmailArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSendEmailResetEmailArgs {
  input?: GQLSendEmailResetEmailInput;
}
export interface MutationToSendEmailResetEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSendEmailResetEmailArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToVerifyEmailResetCodeArgs {
  input?: GQLVerifyEmailResetCodeInput;
}
export interface MutationToVerifyEmailResetCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToVerifyEmailResetCodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToResetPasswordArgs {
  input?: GQLResetPasswordInput;
}
export interface MutationToResetPasswordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToResetPasswordArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserRegisterArgs {
  input?: GQLUserRegisterInput;
}
export interface MutationToUserRegisterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUserRegisterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserLoginArgs {
  input?: GQLUserLoginInput;
}
export interface MutationToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUserLoginArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddOAuthArgs {
  input?: GQLAddOAuthInput;
}
export interface MutationToAddOAuthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddOAuthArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateUserInfoArgs {
  input?: GQLUpdateUserInfoInput;
}
export interface MutationToUpdateUserInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateUserInfoArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToFollowUserArgs {
  input?: GQLFollowUserInput;
}
export interface MutationToFollowUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToFollowUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUnfollowUserArgs {
  input?: GQLUnfollowUserInput;
}
export interface MutationToUnfollowUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUnfollowUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToImportArticlesArgs {
  input?: GQLImportArticlesInput;
}
export interface MutationToImportArticlesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToImportArticlesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateNotificationSettingArgs {
  input?: GQLUpdateNotificationSettingInput;
}
export interface MutationToUpdateNotificationSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateNotificationSettingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToClearReadHistoryArgs {
  input?: GQLClearReadHistoryInput;
}
export interface MutationToClearReadHistoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToClearReadHistoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToClearSearchHistoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFileTypeResolver<TParent = any> {
  filename?: FileToFilenameResolver<TParent>;
  mimetype?: FileToMimetypeResolver<TParent>;
  encoding?: FileToEncodingResolver<TParent>;
  path?: FileToPathResolver<TParent>;
}

export interface FileToFilenameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToMimetypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToEncodingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLoginResultTypeResolver<TParent = any> {
  auth?: LoginResultToAuthResolver<TParent>;
  token?: LoginResultToTokenResolver<TParent>;
}

export interface LoginResultToAuthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LoginResultToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSubscriptionTypeResolver<TParent = any> {
  _?: SubscriptionTo_Resolver<TParent>;
  nodeEdited?: SubscriptionToNodeEditedResolver<TParent>;
}

export interface SubscriptionTo_Resolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToNodeEditedArgs {
  input: GQLNodeEditedInput;
}
export interface SubscriptionToNodeEditedResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToNodeEditedArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToNodeEditedArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface GQLArticleArchivedNoticeTypeResolver<TParent = any> {
  id?: ArticleArchivedNoticeToIdResolver<TParent>;
  unread?: ArticleArchivedNoticeToUnreadResolver<TParent>;
  createdAt?: ArticleArchivedNoticeToCreatedAtResolver<TParent>;
  target?: ArticleArchivedNoticeToTargetResolver<TParent>;
  reason?: ArticleArchivedNoticeToReasonResolver<TParent>;
}

export interface ArticleArchivedNoticeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleArchivedNoticeToUnreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleArchivedNoticeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleArchivedNoticeToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleArchivedNoticeToReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLArticleNewAppreciationNoticeTypeResolver<TParent = any> {
  id?: ArticleNewAppreciationNoticeToIdResolver<TParent>;
  unread?: ArticleNewAppreciationNoticeToUnreadResolver<TParent>;
  createdAt?: ArticleNewAppreciationNoticeToCreatedAtResolver<TParent>;
  actors?: ArticleNewAppreciationNoticeToActorsResolver<TParent>;
  target?: ArticleNewAppreciationNoticeToTargetResolver<TParent>;
  MAT?: ArticleNewAppreciationNoticeToMATResolver<TParent>;
}

export interface ArticleNewAppreciationNoticeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleNewAppreciationNoticeToUnreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleNewAppreciationNoticeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleNewAppreciationNoticeToActorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleNewAppreciationNoticeToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleNewAppreciationNoticeToMATResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLArticleNewCommentNoticeTypeResolver<TParent = any> {
  id?: ArticleNewCommentNoticeToIdResolver<TParent>;
  unread?: ArticleNewCommentNoticeToUnreadResolver<TParent>;
  createdAt?: ArticleNewCommentNoticeToCreatedAtResolver<TParent>;
  actors?: ArticleNewCommentNoticeToActorsResolver<TParent>;
  target?: ArticleNewCommentNoticeToTargetResolver<TParent>;
}

export interface ArticleNewCommentNoticeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleNewCommentNoticeToUnreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleNewCommentNoticeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleNewCommentNoticeToActorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleNewCommentNoticeToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLArticleNewDownstreamNoticeTypeResolver<TParent = any> {
  id?: ArticleNewDownstreamNoticeToIdResolver<TParent>;
  unread?: ArticleNewDownstreamNoticeToUnreadResolver<TParent>;
  createdAt?: ArticleNewDownstreamNoticeToCreatedAtResolver<TParent>;
  actors?: ArticleNewDownstreamNoticeToActorsResolver<TParent>;
  downstream?: ArticleNewDownstreamNoticeToDownstreamResolver<TParent>;
  target?: ArticleNewDownstreamNoticeToTargetResolver<TParent>;
}

export interface ArticleNewDownstreamNoticeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleNewDownstreamNoticeToUnreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleNewDownstreamNoticeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleNewDownstreamNoticeToActorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleNewDownstreamNoticeToDownstreamResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleNewDownstreamNoticeToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLArticleNewSubscriberNoticeTypeResolver<TParent = any> {
  id?: ArticleNewSubscriberNoticeToIdResolver<TParent>;
  unread?: ArticleNewSubscriberNoticeToUnreadResolver<TParent>;
  createdAt?: ArticleNewSubscriberNoticeToCreatedAtResolver<TParent>;
  actors?: ArticleNewSubscriberNoticeToActorsResolver<TParent>;
  target?: ArticleNewSubscriberNoticeToTargetResolver<TParent>;
}

export interface ArticleNewSubscriberNoticeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleNewSubscriberNoticeToUnreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleNewSubscriberNoticeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleNewSubscriberNoticeToActorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleNewSubscriberNoticeToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLArticlePublishedNoticeTypeResolver<TParent = any> {
  id?: ArticlePublishedNoticeToIdResolver<TParent>;
  unread?: ArticlePublishedNoticeToUnreadResolver<TParent>;
  createdAt?: ArticlePublishedNoticeToCreatedAtResolver<TParent>;
  target?: ArticlePublishedNoticeToTargetResolver<TParent>;
}

export interface ArticlePublishedNoticeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticlePublishedNoticeToUnreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticlePublishedNoticeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticlePublishedNoticeToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLArticleReportedNoticeTypeResolver<TParent = any> {
  id?: ArticleReportedNoticeToIdResolver<TParent>;
  unread?: ArticleReportedNoticeToUnreadResolver<TParent>;
  createdAt?: ArticleReportedNoticeToCreatedAtResolver<TParent>;
  target?: ArticleReportedNoticeToTargetResolver<TParent>;
  reason?: ArticleReportedNoticeToReasonResolver<TParent>;
}

export interface ArticleReportedNoticeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleReportedNoticeToUnreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleReportedNoticeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleReportedNoticeToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleReportedNoticeToReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommentArchivedNoticeTypeResolver<TParent = any> {
  id?: CommentArchivedNoticeToIdResolver<TParent>;
  unread?: CommentArchivedNoticeToUnreadResolver<TParent>;
  createdAt?: CommentArchivedNoticeToCreatedAtResolver<TParent>;
  target?: CommentArchivedNoticeToTargetResolver<TParent>;
  reason?: CommentArchivedNoticeToReasonResolver<TParent>;
}

export interface CommentArchivedNoticeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentArchivedNoticeToUnreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentArchivedNoticeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentArchivedNoticeToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentArchivedNoticeToReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommentMentionedYouNoticeTypeResolver<TParent = any> {
  id?: CommentMentionedYouNoticeToIdResolver<TParent>;
  unread?: CommentMentionedYouNoticeToUnreadResolver<TParent>;
  createdAt?: CommentMentionedYouNoticeToCreatedAtResolver<TParent>;
  actors?: CommentMentionedYouNoticeToActorsResolver<TParent>;
  target?: CommentMentionedYouNoticeToTargetResolver<TParent>;
}

export interface CommentMentionedYouNoticeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentMentionedYouNoticeToUnreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentMentionedYouNoticeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentMentionedYouNoticeToActorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentMentionedYouNoticeToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommentNewReplyNoticeTypeResolver<TParent = any> {
  id?: CommentNewReplyNoticeToIdResolver<TParent>;
  unread?: CommentNewReplyNoticeToUnreadResolver<TParent>;
  createdAt?: CommentNewReplyNoticeToCreatedAtResolver<TParent>;
  actors?: CommentNewReplyNoticeToActorsResolver<TParent>;
  target?: CommentNewReplyNoticeToTargetResolver<TParent>;
}

export interface CommentNewReplyNoticeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentNewReplyNoticeToUnreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentNewReplyNoticeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentNewReplyNoticeToActorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentNewReplyNoticeToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommentNewUpvoteNoticeTypeResolver<TParent = any> {
  id?: CommentNewUpvoteNoticeToIdResolver<TParent>;
  unread?: CommentNewUpvoteNoticeToUnreadResolver<TParent>;
  createdAt?: CommentNewUpvoteNoticeToCreatedAtResolver<TParent>;
  actors?: CommentNewUpvoteNoticeToActorsResolver<TParent>;
  target?: CommentNewUpvoteNoticeToTargetResolver<TParent>;
}

export interface CommentNewUpvoteNoticeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentNewUpvoteNoticeToUnreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentNewUpvoteNoticeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentNewUpvoteNoticeToActorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentNewUpvoteNoticeToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommentPinnedNoticeTypeResolver<TParent = any> {
  id?: CommentPinnedNoticeToIdResolver<TParent>;
  unread?: CommentPinnedNoticeToUnreadResolver<TParent>;
  createdAt?: CommentPinnedNoticeToCreatedAtResolver<TParent>;
  target?: CommentPinnedNoticeToTargetResolver<TParent>;
}

export interface CommentPinnedNoticeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentPinnedNoticeToUnreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentPinnedNoticeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentPinnedNoticeToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommentReportedNoticeTypeResolver<TParent = any> {
  id?: CommentReportedNoticeToIdResolver<TParent>;
  unread?: CommentReportedNoticeToUnreadResolver<TParent>;
  createdAt?: CommentReportedNoticeToCreatedAtResolver<TParent>;
  target?: CommentReportedNoticeToTargetResolver<TParent>;
  reason?: CommentReportedNoticeToReasonResolver<TParent>;
}

export interface CommentReportedNoticeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentReportedNoticeToUnreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentReportedNoticeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentReportedNoticeToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentReportedNoticeToReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOfficialAnnouncementNoticeTypeResolver<TParent = any> {
  id?: OfficialAnnouncementNoticeToIdResolver<TParent>;
  unread?: OfficialAnnouncementNoticeToUnreadResolver<TParent>;
  createdAt?: OfficialAnnouncementNoticeToCreatedAtResolver<TParent>;
  message?: OfficialAnnouncementNoticeToMessageResolver<TParent>;
  link?: OfficialAnnouncementNoticeToLinkResolver<TParent>;
}

export interface OfficialAnnouncementNoticeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OfficialAnnouncementNoticeToUnreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OfficialAnnouncementNoticeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OfficialAnnouncementNoticeToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OfficialAnnouncementNoticeToLinkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSubscribedArticleNewCommentNoticeTypeResolver<TParent = any> {
  id?: SubscribedArticleNewCommentNoticeToIdResolver<TParent>;
  unread?: SubscribedArticleNewCommentNoticeToUnreadResolver<TParent>;
  createdAt?: SubscribedArticleNewCommentNoticeToCreatedAtResolver<TParent>;
  actors?: SubscribedArticleNewCommentNoticeToActorsResolver<TParent>;
  target?: SubscribedArticleNewCommentNoticeToTargetResolver<TParent>;
}

export interface SubscribedArticleNewCommentNoticeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubscribedArticleNewCommentNoticeToUnreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubscribedArticleNewCommentNoticeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubscribedArticleNewCommentNoticeToActorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubscribedArticleNewCommentNoticeToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserDisabledNoticeTypeResolver<TParent = any> {
  id?: UserDisabledNoticeToIdResolver<TParent>;
  unread?: UserDisabledNoticeToUnreadResolver<TParent>;
  createdAt?: UserDisabledNoticeToCreatedAtResolver<TParent>;
  reason?: UserDisabledNoticeToReasonResolver<TParent>;
}

export interface UserDisabledNoticeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserDisabledNoticeToUnreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserDisabledNoticeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserDisabledNoticeToReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserNewFollowerNoticeTypeResolver<TParent = any> {
  id?: UserNewFollowerNoticeToIdResolver<TParent>;
  unread?: UserNewFollowerNoticeToUnreadResolver<TParent>;
  createdAt?: UserNewFollowerNoticeToCreatedAtResolver<TParent>;
  actors?: UserNewFollowerNoticeToActorsResolver<TParent>;
}

export interface UserNewFollowerNoticeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserNewFollowerNoticeToUnreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserNewFollowerNoticeToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserNewFollowerNoticeToActorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
